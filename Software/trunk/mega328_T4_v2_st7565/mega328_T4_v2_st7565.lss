
../Obj/mega328_T4_v2_st7565/mega328_T4_v2_st7565.elf:     formato del file elf32-avr

Sezioni:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000766e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000728a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c2  00800100  00800100  0000731e  2**0
                  ALLOC
  3 .eeprom       00000350  00810000  00810000  0000731e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      00000012  00000000  00000000  0000766e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007680  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000678  00000000  00000000  000076c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   0000cb23  00000000  00000000  00007d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00002e50  00000000  00000000  0001485b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   0001022e  00000000  00000000  000176ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000ca4  00000000  00000000  000278dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00001c35  00000000  00000000  00028580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00008df7  00000000  00000000  0002a1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000558  00000000  00000000  00032fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassemblamento della sezione .text:

00000000 <__vectors>:
       0:	4e c6       	rjmp	.+3228   	; 0xc9e <__ctors_end>
       2:	00 00       	nop
       4:	5e c6       	rjmp	.+3260   	; 0xcc2 <__bad_interrupt>
       6:	00 00       	nop
       8:	5c c6       	rjmp	.+3256   	; 0xcc2 <__bad_interrupt>
       a:	00 00       	nop
       c:	5a c6       	rjmp	.+3252   	; 0xcc2 <__bad_interrupt>
       e:	00 00       	nop
      10:	58 c6       	rjmp	.+3248   	; 0xcc2 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 fc 30 	jmp	0x61f8	; 0x61f8 <__vector_5>
      18:	54 c6       	rjmp	.+3240   	; 0xcc2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <__vector_7>
      20:	50 c6       	rjmp	.+3232   	; 0xcc2 <__bad_interrupt>
      22:	00 00       	nop
      24:	4e c6       	rjmp	.+3228   	; 0xcc2 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 a5 26 	jmp	0x4d4a	; 0x4d4a <__vector_10>
      2c:	0c 94 eb 30 	jmp	0x61d6	; 0x61d6 <__vector_11>
      30:	0c 94 f0 30 	jmp	0x61e0	; 0x61e0 <__vector_12>
      34:	0c 94 81 26 	jmp	0x4d02	; 0x4d02 <__vector_13>
      38:	44 c6       	rjmp	.+3208   	; 0xcc2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	42 c6       	rjmp	.+3204   	; 0xcc2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 ca 30 	jmp	0x6194	; 0x6194 <__vector_16>
      44:	3e c6       	rjmp	.+3196   	; 0xcc2 <__bad_interrupt>
      46:	00 00       	nop
      48:	3c c6       	rjmp	.+3192   	; 0xcc2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3a c6       	rjmp	.+3188   	; 0xcc2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	38 c6       	rjmp	.+3184   	; 0xcc2 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <__vector_21>
      58:	34 c6       	rjmp	.+3176   	; 0xcc2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	32 c6       	rjmp	.+3172   	; 0xcc2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	30 c6       	rjmp	.+3168   	; 0xcc2 <__bad_interrupt>
      62:	00 00       	nop
      64:	2e c6       	rjmp	.+3164   	; 0xcc2 <__bad_interrupt>
	...

00000068 <samplingADC>:
      68:	e6 2f       	mov	r30, r22
      6a:	f7 2f       	mov	r31, r23
      6c:	90 30       	cpi	r25, 0x00	; 0
      6e:	09 f4       	brne	.+2      	; 0x72 <L16>
      70:	93 95       	inc	r25

00000072 <L16>:
      72:	e5 b8       	out	0x05, r14	; 5
      74:	c4 b8       	out	0x04, r12	; 4
      76:	b6 ef       	ldi	r27, 0xF6	; 246
      78:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
      7c:	a5 e0       	ldi	r26, 0x05	; 5
      7e:	a0 93 7b 00 	sts	0x007B, r26	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
      82:	a8 e0       	ldi	r26, 0x08	; 8
      84:	a0 93 81 00 	sts	0x0081, r26	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
      88:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
      8c:	af ef       	ldi	r26, 0xFF	; 255
      8e:	a0 93 85 00 	sts	0x0085, r26	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
      92:	a0 93 84 00 	sts	0x0084, r26	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
      96:	a6 e0       	ldi	r26, 0x06	; 6
      98:	a0 93 36 00 	sts	0x0036, r26	; 0x800036 <__TEXT_REGION_LENGTH__+0x7e0036>
      9c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
      a0:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
      a4:	b3 e0       	ldi	r27, 0x03	; 3
      a6:	af e3       	ldi	r26, 0x3F	; 63
      a8:	a9 1b       	sub	r26, r25
      aa:	51 e0       	ldi	r21, 0x01	; 1
      ac:	39 2f       	mov	r19, r25

000000ae <L14>:
      ae:	33 30       	cpi	r19, 0x03	; 3
      b0:	2a f0       	brmi	.+10     	; 0xbc <L13>
      b2:	a0 5c       	subi	r26, 0xC0	; 192
      b4:	bc 4f       	sbci	r27, 0xFC	; 252
      b6:	53 95       	inc	r21
      b8:	33 50       	subi	r19, 0x03	; 3
      ba:	f9 cf       	rjmp	.-14     	; 0xae <L14>

000000bc <L13>:
      bc:	b0 93 89 00 	sts	0x0089, r27	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
      c0:	a0 93 88 00 	sts	0x0088, r26	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>

000000c4 <wait_adc>:
      c4:	a0 91 7a 00 	lds	r26, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
      c8:	a4 ff       	sbrs	r26, 4
      ca:	fc cf       	rjmp	.-8      	; 0xc4 <wait_adc>
      cc:	b6 eb       	ldi	r27, 0xB6	; 182
      ce:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
      d2:	a2 e0       	ldi	r26, 0x02	; 2
      d4:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
      d8:	a9 e0       	ldi	r26, 0x09	; 9
      da:	a0 93 81 00 	sts	0x0081, r26	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
      de:	62 e0       	ldi	r22, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	a0 93 7b 00 	sts	0x007B, r26	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

000000e6 <backtosleep>:
      e6:	a1 e0       	ldi	r26, 0x01	; 1
      e8:	a0 93 53 00 	sts	0x0053, r26	; 0x800053 <__TEXT_REGION_LENGTH__+0x7e0053>
      ec:	88 95       	sleep
      ee:	e5 b8       	out	0x05, r14	; 5
      f0:	c4 b8       	out	0x04, r12	; 4
      f2:	84 ff       	sbrs	r24, 4
      f4:	1a c0       	rjmp	.+52     	; 0x12a <stepresponse>
      f6:	a8 e1       	ldi	r26, 0x18	; 24
	...

000000fa <L11>:
      fa:	aa 95       	dec	r26
      fc:	f1 f7       	brne	.-4      	; 0xfa <L11>
      fe:	ef 93       	push	r30
     100:	ff 93       	push	r31
     102:	e7 b1       	in	r30, 0x07	; 7
     104:	f8 b1       	in	r31, 0x08	; 8
     106:	a4 e0       	ldi	r26, 0x04	; 4
     108:	c2 fc       	sbrc	r12, 2
     10a:	a2 e0       	ldi	r26, 0x02	; 2
     10c:	c0 fc       	sbrc	r12, 0
     10e:	a1 e0       	ldi	r26, 0x01	; 1
     110:	bf 2f       	mov	r27, r31
     112:	ba 2b       	or	r27, r26
     114:	ae 2b       	or	r26, r30
     116:	b8 b9       	out	0x08, r27	; 8
     118:	04 b9       	out	0x04, r16	; 4
     11a:	a7 b9       	out	0x07, r26	; 7
     11c:	e7 b9       	out	0x07, r30	; 7
     11e:	f8 b9       	out	0x08, r31	; 8
     120:	ff 91       	pop	r31
     122:	ef 91       	pop	r30
     124:	0b c0       	rjmp	.+22     	; 0x13c <genfreq_end>

00000126 <backtosleep2>:
     126:	0c 94 73 00 	jmp	0xe6	; 0xe6 <backtosleep>

0000012a <stepresponse>:
     12a:	ac e1       	ldi	r26, 0x1C	; 28
     12c:	00 00       	nop
	...

00000130 <L10>:
     130:	aa 95       	dec	r26
     132:	f1 f7       	brne	.-4      	; 0x130 <L10>
     134:	25 b9       	out	0x05, r18	; 5
     136:	e5 b8       	out	0x05, r14	; 5
     138:	00 00       	nop
     13a:	04 b9       	out	0x04, r16	; 4

0000013c <genfreq_end>:
     13c:	a0 91 84 00 	lds	r26, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     140:	a0 91 85 00 	lds	r26, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     144:	b0 91 89 00 	lds	r27, 0x0089	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     148:	a3 95       	inc	r26
     14a:	ab 17       	cp	r26, r27
     14c:	60 f7       	brcc	.-40     	; 0x126 <backtosleep2>
     14e:	a0 91 7a 00 	lds	r26, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     152:	a4 ff       	sbrs	r26, 4
     154:	f3 cf       	rjmp	.-26     	; 0x13c <genfreq_end>
     156:	b6 eb       	ldi	r27, 0xB6	; 182
     158:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     15c:	6a 95       	dec	r22

0000015e <brnewaitevent>:
     15e:	71 f7       	brne	.-36     	; 0x13c <genfreq_end>
     160:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     164:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     168:	30 81       	ld	r19, Z
     16a:	86 fd       	sbrc	r24, 6
     16c:	63 0f       	add	r22, r19
     16e:	61 93       	st	Z+, r22
     170:	30 81       	ld	r19, Z
     172:	86 fd       	sbrc	r24, 6
     174:	73 1f       	adc	r23, r19
     176:	80 ff       	sbrs	r24, 0
     178:	71 93       	st	Z+, r23
     17a:	65 2f       	mov	r22, r21
     17c:	4a 95       	dec	r20
     17e:	79 f7       	brne	.-34     	; 0x15e <brnewaitevent>

00000180 <end>:
     180:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     184:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     188:	b6 e0       	ldi	r27, 0x06	; 6
     18a:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     18e:	08 95       	ret

00000190 <bmp_number>:
     190:	c8 01 bf 01 b6 01                                   ......

00000196 <bmp_vakdiode>:
     196:	18 00 07 20 08 08 08 f8 00 00 00 20 60 a0 3f a0     ... ....... `.?.
     1a6:	60 20 02 02 02 ff 02 02 02 10 10 10 1f 00 00 00     ` ..............

000001b6 <bmp_three_data>:
     1b6:	07 08 ff db bd b5 b5 cb ff                          .........

000001bf <bmp_two_data>:
     1bf:	07 08 ff bb 9d ad ad b3 ff                          .........

000001c8 <bmp_one_data>:
     1c8:	07 08 ff ff f7 fb 81 ff ff                          .........

000001d1 <bmp_pnp>:
     1d1:	10 10 05 08 f8 78 38 58 88                          .....x8X.

000001da <bmp_p_jfet>:
     1da:	09 10 03 08 1c 3e 7f                                .....>.

000001e1 <bmp_p_d_mos>:
     1e1:	0d 08 07 10 ff 81 81 81 f1 e1 c1 ff 40 40 40 47     ............@@@G
     1f1:	43 41                                               CA

000001f3 <bmp_n_d_mos>:
     1f3:	0d 08 01 10 ff ff                                   ......

000001f9 <bmp_p_e_mos>:
     1f9:	11 08 03 10 f1 e1 c1 47 43 41                       .......GCA

00000203 <bmp_p_d_igbt>:
     203:	0e 00 08 20 21 21 12 20 60 e0 e0 e0 fe fe 04 02     ... !!. `.......
     213:	01 00 01 03 7f 7f 21 c2 c4 c4 c0 40 94 84 00 07     ......!....@....
     223:	03 01 02 04                                         ....

00000227 <bmp_n_d_igbt>:
     227:	0e 08 02 10 fe fe 7f 7f 00 00 00 00                 ............

00000233 <bmp_p_e_igbt>:
     233:	11 00 05 20 20 60 e0 e0 e0 02 01 00 01 03 c2 c4     ...  `..........
     243:	c4 c0 40 07 03 01 02 04                             ..@.....

0000024b <PinRLRHADCtab>:
     24b:	01 04 10 01 02 04                                   ......

00000251 <HelpCalibration_str>:
     251:	4e 6f 74 20 63 61 6c 69 62 72 61 74 65 64 21 20     Not calibrated! 
     261:	46 6f 72 ff 63 61 6c 69 62 72 61 74 69 6f 6e 20     For.calibration 
     271:	63 6c 61 6d 70 20 74 68 65 20 33 ff 70 69 6e 73     clamp the 3.pins
     281:	20 74 6f 67 65 74 68 65 72 20 61 6e 64 20 73 74      together and st
     291:	61 72 74 20 77 69 74 68 20 74 68 65 ff 6b 65 79     art with the.key
     2a1:	2e 20 41 63 6b 6e 6f 77 6c 65 64 67 65 20 74 68     . Acknowledge th
     2b1:	65 20 73 65 6c 66 2d 74 65 73 74 20 77 69 74 68     e self-test with
     2c1:	20 74 68 65 20 6b 65 79 20 77 69 74 68 69 6e ff      the key within.
     2d1:	32 73 2e 20 44 69 73 63 6f 6e 6e 65 63 74 20 70     2s. Disconnect p
     2e1:	69 6e 73 20 61 66 74 65 72 20 74 68 65 ff 6d 65     ins after the.me
     2f1:	73 73 61 67 65 20 22 69 73 6f 6c 61 74 65 ff 50     ssage "isolate.P
     301:	72 6f 62 65 21 22 20 69 73 20 73 68 6f 77 6e 2e     robe!" is shown.
     311:	20 53 6f 66 74 77 61 72 65 20 61 6e 64 20 64 6f      Software and do
     321:	63 75 6d 65 6e 74 61 74 69 6f 6e 20 69 73 20 61     cumentation is a
     331:	74 20 67 69 74 68 75 62 2e 63 6f 6d 2f fe 6d 69     t github.com/.mi
     341:	6b 72 6f 63 6f 6e 74 72 6f 6c 6c 65 72 fe 2d 6e     krocontroller.-n
     351:	65 74 2f 74 72 61 6e 73 69 73 74 6f 72 fe 74 65     et/transistor.te
     361:	73 74 65 72 20 00                                   ster .

00000367 <RHtab>:
     367:	b9 03 87 03 58 03 2e 03 07 03 e4 02 c3 02 a4 02     ....X...........
     377:	88 02                                               ..

00000379 <LogTab>:
     379:	00 00 14 00 29 00 3e 00 53 00 69 00 80 00 97 00     ....).>.S.i.....
     389:	ae 00 c6 00 df 00 f8 00 12 01 2d 01 49 01 65 01     ..........-.I.e.
     399:	82 01 a0 01 be 01 de 01 ff 01 21 02 44 02 68 02     ..........!.D.h.
     3a9:	8e 02 b5 02 de 02 09 03 35 03 64 03 94 03 c8 03     ........5.d.....
     3b9:	fe 03 37 04 73 04 b4 04 f9 04 43 05 93 05 ea 05     ..7.s.....C.....
     3c9:	49 06 b3 06 29 07 ae 07 48 08 ff 08 de 09 fd 0a     I...)...H.......
     3d9:	93 0c 48 0f 99 1b                                   ..H...

000003df <bigfont>:
	...
     3ef:	1e 21 21 21 12 00 80 7f 00 00 00 7e 4a 4a 4a 34     .!!!.......~JJJ4
     3ff:	00 00 00 00 00 00 fc 40 20 10 08 04 02 01 00 00     .......@ .......
     40f:	00 01 01 01 01 01 01 01 01 01 01 01 01 01 7f 04     ................
     41f:	88 d0 e0 f0 f8 00 00 00 00 00 00 00 00 00 00 00     ................
     42f:	00 00 00 00 00 00 00 fc 94 94 84 00 00 01 02 fc     ................
	...
     44b:	1e 21 21 21 12 e0 c0 80 40 20 10 0f 00 00 00 c0     .!!!....@ ......
     45b:	20 20 20 40 00 00 00 fc 00 00 9e 9e 04 03 03 03        @............
     46b:	03 02 00 00 00 20 20 23 24 25 25 23 20 20 20 3f     .....  #$%%#   ?
     47b:	00 00 7b 7b 21 42 84 04 80 c0 00 00 00 00 00 00     ..{{!B..........
	...
     493:	fc 94 94 84 00 04 06 07 07 07 08 f0 00 00 00 00     ................
	...
     4ab:	00 80 3f 21 21 12 0c 00 00 00 00 ff 00 00 00 f0     ..?!!...........
     4bb:	08 48 48 c8 00 00 fe 00 00 e7 81 81 81 c1 e1 f1     .HH.............
     4cb:	81 81 81 01 00 20 20 20 21 21 21 20 20 20 3f 00     .....   !!!   ?.
     4db:	00 f3 40 40 40 41 43 47 40 40 7f c0 00 00 00 00     ..@@@ACG@@......
	...
     4f3:	00 00 48 94 94 94 64 00 00 00 00 ff 00 00 00 00     ..H...d.........
	...
     50f:	3f 21 21 12 0c 00 00 ff 00 00 00 f0 08 48 48 d0     ?!!..........HH.
     51f:	00 00 00 00 00 00 fe fe 04 04 04 04 04 04 04 07     ................
     52f:	00 08 08 08 09 09 09 08 08 7f 3e 1c 08 08 7f 7f     ..........>.....
     53f:	20 20 20 20 20 20 20 e0 00 00 00 00 00 00 00 00            .........
	...
     557:	48 94 94 94 64 00 00 ff 00 00 00 00 00 00 00 00     H...d...........
     567:	00 00 00 ff 00 3c 0a 09 0a 3c 00 22 31 29 29 26     .....<...<."1))&
     577:	00 00 82 86 8e 9e be fe fe be de ef f6 fa fe fe     ................
     587:	fa f2 e2 c2 82 00 00 00 08 08 08 04 02 79 84 a4     .............y..
     597:	a4 68 00 ff 00 00 00 00 00 00 00 00 00 00 00 00     .h..............
	...
     5af:	00 00 00 ff 00 00 f0 28 24 28 f0 00 10 08 fc 00     .......($(......
	...
     5c7:	00 00 00 3c 0a 09 0a 3c 00 ff 00 00 00 00 00 00     ...<...<........
	...
     5e3:	04 0c 1c 3c 7c ff 7c 3c 1c 0c 04 00 00 00 00 00     ...<|.|<........
     5f3:	00 9e a1 a9 a9 9a 80 43 23 13 0b 07 03 ff 03 03     .......C#.......
     603:	03 03 03 03 00 00 00 00 00 00 00 00 00 00 00 78     ...............x
     613:	84 84 84 48 00 ff 00 00 00 00 00 00 00 00 00 f0     ...H............
     623:	08 04 e2 11 09 09 09 09 09 09 09 09 09 11 21 c2     ..............!.
     633:	04 08 10 e0 00 00 00 01 02 04 04 07 00 00 00 00     ................
     643:	00 80 40 20 10 88 44 23 10 08 04 03 00 00 00 00     ..@ ..D#........
     653:	00 00 00 00 00 00 00 fe 01 00 fc 02 01 00 00 00     ................
	...
     66f:	00 00 00 79 49 49 79 00 00 00 00 00 00 00 00 00     ...yIIy.........

0000067f <nfont>:
     67f:	00 fc 02 12 12 ec 04 03 00 01 01 00 f0 08 08 08     ................
     68f:	08 f0 04 07 00 00 07 04 00 00 f0 00 00 f0 04 02     ................
     69f:	03 02 01 03 00 0c 12 12 0c 00 00 00 00 00 00 00     ................
	...
     6bb:	00 00 3c fe 3c 00 00 00 00 0b 00 00 00 16 0e 00     ..<.<...........
     6cb:	16 0e 00 00 00 00 00 00 08 fe 08 08 fe 08 01 07     ................
     6db:	01 01 07 01 00 10 28 fc 88 10 00 01 02 07 02 01     ......(.........
     6eb:	0e 8a 4e 20 10 0c 03 00 00 07 05 07 88 54 22 54     ..N .........T"T
     6fb:	88 c0 03 04 04 02 01 06 00 00 16 0e 00 00 00 00     ................
     70b:	00 00 00 00 f8 04 02 00 00 00 01 02 04 00 00 00     ................
     71b:	00 00 00 02 04 f8 00 00 00 04 02 01 48 50 e0 e0     ............HP..
     72b:	50 48 02 01 00 00 01 02 00 40 40 f0 40 40 00 00     PH.......@@.@@..
     73b:	00 01 00 00 00 00 00 00 00 00 00 00 05 03 00 00     ................
     74b:	40 40 40 40 40 40 00 00 00 00 00 00 00 00 00 00     @@@@@@..........
     75b:	00 00 00 00 06 06 00 00 00 80 40 20 10 08 01 00     ..........@ ....
     76b:	00 00 00 00 f8 84 42 22 14 f8 01 02 04 04 02 01     ......B"........
     77b:	00 08 04 fe 00 00 00 00 00 07 00 00 18 04 82 42     ...............B
     78b:	24 18 06 05 04 04 04 04 0c 02 02 22 54 88 03 04     $.........."T...
     79b:	04 04 02 01 c0 b0 8c 82 fe 80 00 00 00 00 07 00     ................
     7ab:	3e 22 12 12 22 c2 01 02 04 04 02 01 f8 24 12 12     >".."........$..
     7bb:	22 c4 01 02 04 04 02 01 02 82 42 22 12 0e 00 07     ".........B"....
     7cb:	00 00 00 00 88 54 22 22 54 88 01 02 04 04 02 01     .....T""T.......
     7db:	38 44 82 82 44 f8 02 04 04 04 02 01 00 00 30 30     8D..D.........00
     7eb:	00 00 00 00 06 06 00 00 00 00 30 30 00 00 00 00     ..........00....
     7fb:	05 03 00 00 00 40 a0 10 08 04 00 00 00 01 02 04     .....@..........
     80b:	20 20 20 20 20 20 01 01 01 01 01 01 00 04 08 10           ..........
     81b:	a0 40 00 04 02 01 00 00 0c 02 c2 22 12 0c 00 00     .@........."....
     82b:	06 00 00 00 f8 04 62 92 94 f8 01 02 04 04 04 02     ......b.........
     83b:	f8 44 42 42 44 f8 07 00 00 00 00 07 fe 22 22 22     .DBBD........"""
     84b:	22 dc 07 04 04 04 04 03 fc 02 02 02 02 0c 03 04     "...............
     85b:	04 04 04 03 fe 02 02 02 02 fc 07 04 04 04 04 03     ................
     86b:	fe 22 22 22 22 02 07 04 04 04 04 04 fe 22 22 22     .""""........"""
     87b:	02 02 07 00 00 00 00 00 fc 02 02 42 42 cc 03 04     ...........BB...
     88b:	04 04 02 07 fe 20 20 20 20 fe 07 00 00 00 00 07     .....    .......
     89b:	00 00 02 fe 02 00 00 00 04 07 04 00 00 00 00 00     ................
     8ab:	fe 00 02 04 04 04 03 00 fe 60 90 08 04 02 07 00     .........`......
     8bb:	00 01 02 04 fe 00 00 00 00 00 07 04 04 04 04 04     ................
     8cb:	fe 0c 30 30 0c fe 07 00 00 00 00 07 fe 18 20 40     ..00.......... @
     8db:	80 fe 07 00 00 00 01 07 fc 02 02 02 02 fc 03 04     ................
     8eb:	04 04 04 03 fe 42 42 42 42 3c 07 00 00 00 00 00     .....BBBB<......
     8fb:	fc 02 02 02 02 fc 03 04 04 05 02 05 fe 42 c2 42     .............B.B
     90b:	42 3c 07 00 00 01 02 04 0c 12 22 22 42 8c 03 04     B<........""B...
     91b:	04 04 04 03 00 02 02 fe 02 02 00 00 00 07 00 00     ................
     92b:	fe 00 00 00 00 fe 03 04 04 04 04 03 00 7e c0 00     .............~..
     93b:	c0 7e 00 00 01 07 01 00 00 fe 80 f8 80 fe 00 00     .~..............
     94b:	07 01 07 00 06 98 60 60 98 06 06 01 00 00 01 06     ......``........
     95b:	00 1e 20 c0 20 1e 00 00 00 07 00 00 02 82 42 22     .. . .........B"
     96b:	12 0e 07 04 04 04 04 04 00 fe 02 02 02 00 00 07     ................
     97b:	04 04 04 00 10 20 40 80 00 00 00 00 00 00 01 02     ..... @.........
     98b:	00 02 02 02 fe 00 00 04 04 04 07 00 00 08 04 02     ................
     99b:	04 08 00 00 00 00 00 00 00 00 00 00 00 00 04 04     ................
     9ab:	04 04 04 04 00 02 04 08 00 00 00 00 00 00 00 00     ................
     9bb:	80 48 48 48 48 f0 03 04 04 04 02 07 fe 10 08 08     .HHHH...........
     9cb:	08 f0 07 04 04 04 04 03 f0 08 08 08 08 30 03 04     .............0..
     9db:	04 04 04 02 e0 10 10 10 20 fe 03 04 04 04 04 07     ........ .......
     9eb:	f0 88 88 88 88 70 03 04 04 04 04 04 10 fc 12 02     .....p..........
     9fb:	02 04 00 07 00 00 00 00 70 88 88 88 88 f0 02 04     ........p.......
     a0b:	04 04 04 03 fe 40 20 10 10 e0 07 00 00 00 00 07     .....@ .........
     a1b:	00 00 08 fa 00 00 00 00 00 07 00 00 00 00 00 00     ................
     a2b:	fa 00 04 08 08 08 07 00 fe 40 a0 10 08 00 07 00     .........@......
     a3b:	00 01 02 04 00 00 02 fe 00 00 00 00 00 03 04 00     ................
     a4b:	00 f8 08 f0 08 f0 00 07 00 07 00 07 f8 20 10 08     ............. ..
     a5b:	08 f0 07 00 00 00 00 07 f0 08 08 08 08 f0 03 04     ................
     a6b:	04 04 04 03 f8 90 08 08 08 f0 07 00 01 01 01 00     ................
     a7b:	f0 08 08 08 90 f8 00 01 01 01 00 07 f8 20 10 08     ............. ..
     a8b:	08 30 07 00 00 00 00 00 30 48 48 88 88 10 02 04     .0......0HH.....
     a9b:	04 04 04 03 00 10 fe 10 10 00 00 00 03 04 04 02     ................
     aab:	f8 00 00 00 00 f8 03 04 04 04 02 07 00 78 c0 00     .............x..
     abb:	c0 78 00 00 01 07 01 00 00 f8 00 c0 00 f8 00 03     .x..............
     acb:	04 03 04 03 18 60 80 80 60 18 06 01 00 00 01 06     .....`..`.......
     adb:	78 80 80 80 40 f8 02 04 04 04 04 03 08 08 88 48     x...@..........H
     aeb:	28 18 06 05 04 04 04 04 00 40 a0 1c 02 02 00 00     (........@......
     afb:	00 07 08 08 00 00 00 fe 00 00 00 00 00 0f 00 00     ................
     b0b:	00 02 02 1c a0 40 00 08 08 07 00 00 04 02 01 02     .....@..........
     b1b:	04 02 00 00 00 00 00 00 e0 10 08 04 08 10 01 01     ................
     b2b:	01 01 01 01 80 49 4a 48 48 f0 03 04 04 04 02 07     .....IJHH.......
     b3b:	f0 88 88 8a 89 70 03 04 04 04 04 00 f0 89 8a 88     .....p..........
     b4b:	88 70 03 04 04 04 04 00 00 00 08 fa 01 00 00 00     .p..............
     b5b:	00 07 00 00 00 02 09 fa 00 00 00 00 00 07 00 00     ................
     b6b:	00 00 09 fa 00 00 00 00 00 07 00 00 f0 08 08 0a     ................
     b7b:	09 f0 03 04 04 04 04 03 f0 08 08 09 0a f0 03 04     ................
     b8b:	04 04 04 03 f8 00 02 01 00 f8 03 04 04 04 02 07     ................
     b9b:	f8 01 02 00 00 f8 03 04 04 04 02 07 e0 90 89 8a     ................
     bab:	90 e0 07 00 00 00 00 07 fc 44 44 46 45 04 07 04     .........DDFE...
     bbb:	04 04 04 04 fc 44 45 46 44 04 07 04 04 04 04 04     .....DEFD.......
     bcb:	00 00 04 fe 05 00 00 00 04 07 04 00 00 00 0a f9     ................
     bdb:	0a 00 00 00 04 07 04 00 00 00 08 f9 0a 00 00 00     ................
     beb:	04 07 04 00 f8 04 04 06 05 f8 03 04 04 04 04 03     ................
     bfb:	f8 04 05 06 04 f8 03 04 04 04 04 03 fe 00 02 01     ................
     c0b:	00 fe 03 04 04 04 04 03 fc 00 01 02 00 fc 03 04     ................
     c1b:	04 04 04 03                                         ....

00000c1f <sfont>:
     c1f:	40 f0 10 10 10 f0 40 00 01 01 01 01 01 00 fc f8     @.....@.........
     c2f:	f0 e0 40 fc fc 07 03 01 00 00 07 07 fc fc 40 e0     ..@...........@.
     c3f:	f0 f8 fc 07 07 00 00 01 03 07 40 fc fc 00 fc fc     ..........@.....
     c4f:	40 00 07 07 00 07 07 00 f8 08 08 08 08 08 08 03     @...............
     c5f:	02 02 02 02 02 02 08 08 08 08 08 08 f8 02 02 02     ................
     c6f:	02 02 02 03 40 40 40 40 40 40 40 00 00 00 00 00     ....@@@@@@@.....
     c7f:	00 00 40 40 80 00 c0 20 c0 00 00 01 02 02 01 02     ..@@... ........
     c8f:	00 c0 20 c0 00 80 40 02 02 01 02 02 01 00 00        .. ...@........

00000c9e <__ctors_end>:
     c9e:	11 24       	eor	r1, r1
     ca0:	1f be       	out	0x3f, r1	; 63
     ca2:	cf ef       	ldi	r28, 0xFF	; 255
     ca4:	d8 e0       	ldi	r29, 0x08	; 8
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	cd bf       	out	0x3d, r28	; 61

00000caa <__do_clear_bss>:
     caa:	21 e0       	ldi	r18, 0x01	; 1

00000cac <.Loc.1>:
     cac:	a0 e0       	ldi	r26, 0x00	; 0

00000cae <.Loc.2>:
     cae:	b1 e0       	ldi	r27, 0x01	; 1

00000cb0 <.Loc.3>:
     cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <.Loc.5>

00000cb2 <.Loc.4>:
     cb2:	1d 92       	st	X+, r1

00000cb4 <.Loc.5>:
     cb4:	a2 3c       	cpi	r26, 0xC2	; 194

00000cb6 <.Loc.6>:
     cb6:	b2 07       	cpc	r27, r18

00000cb8 <.Loc.7>:
     cb8:	e1 f7       	brne	.-8      	; 0xcb2 <.Loc.4>

00000cba <L0^A>:
     cba:	0e 94 c7 13 	call	0x278e	; 0x278e <main>
     cbe:	0c 94 43 39 	jmp	0x7286	; 0x7286 <_exit>

00000cc2 <__bad_interrupt>:
     cc2:	9e c9       	rjmp	.-3268   	; 0x0 <__vectors>

00000cc4 <_lcd_hw_write>:
	rcall	wait1us
	ret
 #else /* no LCD_SPI_OPEN_COL */
  #ifdef FAST_SPI_OUTPUT
               ; Set RS (0=Cmd, 1=Char)
	set_ce_low
     cc4:	5d 98       	cbi	0x0b, 5	; 11

00000cc6 <.Loc.1>:
	set_ce_output		// enable chip
     cc6:	55 9a       	sbi	0x0a, 5	; 10

00000cc8 <.Loc.2>:
               set_b0_output		; set B0 to output
               set_rs_low		; SCE to GND
               set_rs_output		//init hardware
               set_en_high		; force data read from LCD controller
   #else
               sbrc    preg_1, 0
     cc8:	80 fd       	sbrc	r24, 0

00000cca <.Loc.3>:
                       set_rs_high
     cca:	59 9a       	sbi	0x0b, 1	; 11

00000ccc <.Loc.4>:
               sbrs    preg_1, 0
     ccc:	80 ff       	sbrs	r24, 0

00000cce <.Loc.5>:
                       set_rs_low
     cce:	59 98       	cbi	0x0b, 1	; 11

00000cd0 <.Loc.6>:
               set_rs_output;		//init hardware
     cd0:	51 9a       	sbi	0x0a, 1	; 10

00000cd2 <.Loc.7>:
               set_b0_output		; wait for address setup, set B0 to output
     cd2:	53 9a       	sbi	0x0a, 3	; 10

00000cd4 <.Loc.8>:
   #endif
               ; Send bit-7
               set_en_low
     cd4:	5a 98       	cbi	0x0b, 2	; 11

00000cd6 <.Loc.9>:
               sbrc    preg_2, 7
     cd6:	67 fd       	sbrc	r22, 7

00000cd8 <.Loc.10>:
                       set_b0_high
     cd8:	5b 9a       	sbi	0x0b, 3	; 11

00000cda <.Loc.11>:
               sbrs    preg_2, 7
     cda:	67 ff       	sbrs	r22, 7

00000cdc <.Loc.12>:
                       set_b0_low
     cdc:	5b 98       	cbi	0x0b, 3	; 11

00000cde <.Loc.13>:
               set_en_high		; force data read from LCD controller
     cde:	5a 9a       	sbi	0x0b, 2	; 11

00000ce0 <.Loc.14>:

               ; Send bit-6
               set_en_low
     ce0:	5a 98       	cbi	0x0b, 2	; 11

00000ce2 <.Loc.15>:
               sbrc    preg_2, 6
     ce2:	66 fd       	sbrc	r22, 6

00000ce4 <.Loc.16>:
                       set_b0_high
     ce4:	5b 9a       	sbi	0x0b, 3	; 11

00000ce6 <.Loc.17>:
               sbrs    preg_2, 6
     ce6:	66 ff       	sbrs	r22, 6

00000ce8 <.Loc.18>:
                       set_b0_low
     ce8:	5b 98       	cbi	0x0b, 3	; 11

00000cea <.Loc.19>:
               set_en_high		; force data read from LCD controller
     cea:	5a 9a       	sbi	0x0b, 2	; 11

00000cec <.Loc.20>:

               ; Send bit-5
               set_en_low
     cec:	5a 98       	cbi	0x0b, 2	; 11

00000cee <.Loc.21>:
               sbrc    preg_2, 5
     cee:	65 fd       	sbrc	r22, 5

00000cf0 <.Loc.22>:
                       set_b0_high
     cf0:	5b 9a       	sbi	0x0b, 3	; 11

00000cf2 <.Loc.23>:
               sbrs    preg_2, 5
     cf2:	65 ff       	sbrs	r22, 5

00000cf4 <.Loc.24>:
                       set_b0_low
     cf4:	5b 98       	cbi	0x0b, 3	; 11

00000cf6 <.Loc.25>:
               set_en_high		; force data read from LCD controller
     cf6:	5a 9a       	sbi	0x0b, 2	; 11

00000cf8 <.Loc.26>:

               ; Send bit-4
               set_en_low
     cf8:	5a 98       	cbi	0x0b, 2	; 11

00000cfa <.Loc.27>:
               sbrc    preg_2, 4
     cfa:	64 fd       	sbrc	r22, 4

00000cfc <.Loc.28>:
                       set_b0_high
     cfc:	5b 9a       	sbi	0x0b, 3	; 11

00000cfe <.Loc.29>:
               sbrs    preg_2, 4
     cfe:	64 ff       	sbrs	r22, 4

00000d00 <.Loc.30>:
                       set_b0_low
     d00:	5b 98       	cbi	0x0b, 3	; 11

00000d02 <.Loc.31>:
               set_en_high		; force data read from LCD controller
     d02:	5a 9a       	sbi	0x0b, 2	; 11

00000d04 <.Loc.32>:

               ; Send bit-3
               set_en_low
     d04:	5a 98       	cbi	0x0b, 2	; 11

00000d06 <.Loc.33>:
               sbrc    preg_2, 3
     d06:	63 fd       	sbrc	r22, 3

00000d08 <.Loc.34>:
                       set_b0_high
     d08:	5b 9a       	sbi	0x0b, 3	; 11

00000d0a <.Loc.35>:
               sbrs    preg_2, 3
     d0a:	63 ff       	sbrs	r22, 3

00000d0c <.Loc.36>:
                       set_b0_low
     d0c:	5b 98       	cbi	0x0b, 3	; 11

00000d0e <.Loc.37>:
               set_en_high		; force data read from LCD controller
     d0e:	5a 9a       	sbi	0x0b, 2	; 11

00000d10 <.Loc.38>:

               ; Send bit-2
               set_en_low
     d10:	5a 98       	cbi	0x0b, 2	; 11

00000d12 <.Loc.39>:
               sbrc    preg_2, 2
     d12:	62 fd       	sbrc	r22, 2

00000d14 <.Loc.40>:
                       set_b0_high
     d14:	5b 9a       	sbi	0x0b, 3	; 11

00000d16 <.Loc.41>:
               sbrs    preg_2, 2
     d16:	62 ff       	sbrs	r22, 2

00000d18 <.Loc.42>:
                       set_b0_low
     d18:	5b 98       	cbi	0x0b, 3	; 11

00000d1a <.Loc.43>:
               set_en_high		; force data read from LCD controller
     d1a:	5a 9a       	sbi	0x0b, 2	; 11

00000d1c <.Loc.44>:

               ; Send bit-1
               set_en_low
     d1c:	5a 98       	cbi	0x0b, 2	; 11

00000d1e <.Loc.45>:
               sbrc    preg_2, 1
     d1e:	61 fd       	sbrc	r22, 1

00000d20 <.Loc.46>:
                       set_b0_high
     d20:	5b 9a       	sbi	0x0b, 3	; 11

00000d22 <.Loc.47>:
               sbrs    preg_2, 1
     d22:	61 ff       	sbrs	r22, 1

00000d24 <.Loc.48>:
                       set_b0_low
     d24:	5b 98       	cbi	0x0b, 3	; 11

00000d26 <.Loc.49>:
               set_en_high              ; force data read from LCD controller
     d26:	5a 9a       	sbi	0x0b, 2	; 11

00000d28 <.Loc.50>:

               ; Send bit-0
               set_en_low
     d28:	5a 98       	cbi	0x0b, 2	; 11

00000d2a <.Loc.51>:
               sbrc    preg_2, 0
     d2a:	60 fd       	sbrc	r22, 0

00000d2c <.Loc.52>:
                       set_b0_high
     d2c:	5b 9a       	sbi	0x0b, 3	; 11

00000d2e <.Loc.53>:
               sbrs    preg_2, 0
     d2e:	60 ff       	sbrs	r22, 0

00000d30 <.Loc.54>:
                       set_b0_low
     d30:	5b 98       	cbi	0x0b, 3	; 11

00000d32 <.Loc.55>:
               set_en_high              ; force data read from LCD controller
     d32:	5a 9a       	sbi	0x0b, 2	; 11

00000d34 <.Loc.56>:
   #if (LCD_INTERFACE_MODE == MODE_3LINE)
               set_rs_high		; SCE to VCC
   #endif
        set_ce_high		// disable chip
     d34:	5d 9a       	sbi	0x0b, 5	; 11

00000d36 <.Loc.57>:
	set_en_low
     d36:	5a 98       	cbi	0x0b, 2	; 11

00000d38 <.Loc.58>:
	set_b0_low		// ## reset b0 to GND to prevent incorrect detection of rotary encoder movement
     d38:	5b 98       	cbi	0x0b, 3	; 11

00000d3a <.Loc.59>:
	ret		// return _lcd_hw_write
     d3a:	08 95       	ret

00000d3c <i2lcd>:
i2lcd:			;	void i2lcd(int iw)

#if FLASHEND > 0x1fff

;;  	movw	r20, r24
 	sbrs	r25, 7
     d3c:	97 ff       	sbrs	r25, 7

00000d3e <.Loc.1>:
 	rjmp	to_lcd		; if (iw >= 0) {
     d3e:	09 c0       	rjmp	.+18     	; 0xd52 <u2lcd>

00000d40 <.Loc.2>:
;   // negativ value, output -  and invert iw
        push	r24		; save r24:r25
     d40:	8f 93       	push	r24

00000d42 <.Loc.3>:
        push	r25
     d42:	9f 93       	push	r25

00000d44 <.Loc.4>:
 	ldi	r24,'-'		; 45
     d44:	8d e2       	ldi	r24, 0x2D	; 45

00000d46 <.Loc.5>:
 	RCALL	lcd_data	; lcd_data('-'); uses r22
     d46:	ab d5       	rcall	.+2902   	; 0x189e <lcd_data>

00000d48 <.Loc.6>:
        pop	r25		; recall r25:r24
     d48:	9f 91       	pop	r25

00000d4a <.Loc.7>:
        pop	r24		; old r24
     d4a:	8f 91       	pop	r24

00000d4c <.Loc.8>:
        com	r25
     d4c:	90 95       	com	r25

00000d4e <.Loc.9>:
	neg	r24
     d4e:	81 95       	neg	r24

00000d50 <.Loc.10>:
        sbci	r25,-1		; iw = - iw
     d50:	9f 4f       	sbci	r25, 0xFF	; 255

00000d52 <u2lcd>:
#endif

#if FLASHEND > 0x1fff
u2lcd:			;	void i2lcd(uint16_t iw)
to_lcd:			;	void i2lcd(uint16_t iw)
 	ldi	r22, lo8(outval)	;0x0F
     d52:	64 e2       	ldi	r22, 0x24	; 36

00000d54 <.Loc.12>:
 	ldi	r23, hi8(outval)	;0x01
     d54:	71 e0       	ldi	r23, 0x01	; 1

00000d56 <.Loc.13>:
 	ldi	r20, 10
     d56:	4a e0       	ldi	r20, 0x0A	; 10

00000d58 <.Loc.14>:
 	ldi	r21, 0x00	; 0
     d58:	50 e0       	ldi	r21, 0x00	; 0

00000d5a <.Loc.15>:
 	ACALL	utoa		; utoa(iw, outval, 10);	//output voltage to string
     d5a:	0e 94 e2 38 	call	0x71c4	; 0x71c4 <utoa>

00000d5e <.Loc.16>:
 	RCALL	lcd_string	;lcd_string(utoa(iw, outval, 10));	//output correction voltage
     d5e:	ec c5       	rjmp	.+3032   	; 0x1938 <lcd_string>

00000d60 <.Loc.17>:

 	ret
     d60:	08 95       	ret

00000d62 <i2lcd_space>:
#endif

#if FLASHEND > 0x1fff
.GLOBAL i2lcd_space
i2lcd_space:
	RCALL	i2lcd
     d62:	ec df       	rcall	.-40     	; 0xd3c <i2lcd>

00000d64 <.Loc.19>:
	rjmp	space_ret	; use return from u2lcd_space
     d64:	01 c0       	rjmp	.+2      	; 0xd68 <lcd_space>

00000d66 <u2lcd_space>:

u2lcd_space:
	RCALL	i2lcd
     d66:	ea df       	rcall	.-44     	; 0xd3c <i2lcd>

00000d68 <lcd_space>:

; Output a ' ' to the LCD screen
.GLOBAL lcd_space
.func lcd_space
lcd_space:
	ldi	r24, ' '
     d68:	80 e2       	ldi	r24, 0x20	; 32

00000d6a <.Loc.22>:
	RJMP	lcd_data
     d6a:	99 c5       	rjmp	.+2866   	; 0x189e <lcd_data>

00000d6c <lcd_minus>:

; Output a '-' to the LCD screen
.GLOBAL lcd_minus
.func lcd_minus
lcd_minus:
	ldi	r24, '-'
     d6c:	8d e2       	ldi	r24, 0x2D	; 45

00000d6e <.Loc.24>:
	RJMP	lcd_data
     d6e:	97 c5       	rjmp	.+2862   	; 0x189e <lcd_data>

00000d70 <lcd_equal>:

; Output a '=' to the LCD screen
.GLOBAL lcd_equal
.func lcd_equal
lcd_equal:
	ldi	r24, '='
     d70:	8d e3       	ldi	r24, 0x3D	; 61

00000d72 <.Loc.26>:
	RJMP	lcd_data
     d72:	95 c5       	rjmp	.+2858   	; 0x189e <lcd_data>

00000d74 <PinLayout>:

PinLayout:

#ifndef EBC_STYLE 
;   // Layout with 123= style
 	push	r14
     d74:	ef 92       	push	r14

00000d76 <.Loc.1>:
 	push	r15
     d76:	ff 92       	push	r15

00000d78 <.Loc.2>:
 	push	r16
     d78:	0f 93       	push	r16

00000d7a <.Loc.3>:
 	push	r17
     d7a:	1f 93       	push	r17

00000d7c <.Loc.4>:

 	mov	r17, r24		; Pin1
     d7c:	18 2f       	mov	r17, r24

00000d7e <.Loc.5>:
 	mov	r16, r22		; Pin2
     d7e:	06 2f       	mov	r16, r22

00000d80 <.Loc.6>:
 	mov	r15, r20		; Pin3
     d80:	f4 2e       	mov	r15, r20

00000d82 <.Loc.7>:
 	ldi	r24, lo8(N123_str)	; 0x0B
     d82:	82 e6       	ldi	r24, 0x62	; 98

00000d84 <.Loc.8>:
 	ldi	r25, hi8(N123_str)	; 0x01	
     d84:	91 e0       	ldi	r25, 0x01	; 1

00000d86 <.Loc.9>:
 #ifdef USE_EEPROM
 	RCALL	lcd_fix_string	; lcd_MEM_string(N123_str);		//" 123="
     d86:	e3 d5       	rcall	.+3014   	; 0x194e <lcd_fix_string>

00000d88 <.Loc.10>:
 #else
 	RCALL	lcd_pgm_string	; lcd_MEM_string(N123_str);		//" 123="
 #endif
 	eor	r14, r14	; for (ipp=0;
     d88:	ee 24       	eor	r14, r14

00000d8a <loop1>:
loop1:
 	lds	r30, _trans
     d8a:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>

00000d8e <.Loc.12>:
 	lds	r31, _trans+1
     d8e:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>

00000d92 <.Loc.13>:
 	ldd	r24, Z+OFFS_e	; _trans->e
     d92:	86 85       	ldd	r24, Z+14	; 0x0e

00000d94 <.Loc.14>:
 	cp	r14, r24
     d94:	e8 16       	cp	r14, r24

00000d96 <.Loc.15>:
 	brne	checkb		; if (ipp == _trans->e) 
     d96:	11 f4       	brne	.+4      	; 0xd9c <checkb>

00000d98 <.Loc.16>:
 	mov	r24, r17	; pin1
     d98:	81 2f       	mov	r24, r17

00000d9a <.Loc.17>:
        rjmp	data_ipp  	; lcd_data(pin1);	// Output Character in right order
     d9a:	09 c0       	rjmp	.+18     	; 0xdae <data_ipp>

00000d9c <checkb>:
checkb:
 	ldd	r24, Z+OFFS_b	; _trans->b
     d9c:	84 85       	ldd	r24, Z+12	; 0x0c

00000d9e <.Loc.19>:
 	cp	r14, r24	; if (ipp == _trans->b) 
     d9e:	e8 16       	cp	r14, r24

00000da0 <.Loc.20>:
 	brne	checkc
     da0:	11 f4       	brne	.+4      	; 0xda6 <checkc>

00000da2 <.Loc.21>:
 	mov	r24, r16
     da2:	80 2f       	mov	r24, r16

00000da4 <.Loc.22>:
        rjmp	data_ipp	;  lcd_data(pin2);
     da4:	04 c0       	rjmp	.+8      	; 0xdae <data_ipp>

00000da6 <checkc>:
checkc:
 	ldd	r24, Z+OFFS_c	; _trans->c
     da6:	85 85       	ldd	r24, Z+13	; 0x0d

00000da8 <.Loc.24>:
 	cp	r14, r24
     da8:	e8 16       	cp	r14, r24

00000daa <.Loc.25>:
 	brne	next_ipp		; if (ipp == _trans->c) 
     daa:	11 f4       	brne	.+4      	; 0xdb0 <next_ipp>

00000dac <.Loc.26>:
 	mov	r24, r15
     dac:	8f 2d       	mov	r24, r15

00000dae <data_ipp>:
data_ipp:
 	RCALL	lcd_data	;  lcd_data(pin3);
     dae:	77 d5       	rcall	.+2798   	; 0x189e <lcd_data>

00000db0 <next_ipp>:
next_ipp:
 	inc	r14
     db0:	e3 94       	inc	r14

00000db2 <.Loc.29>:
 	mov	r24, r14
     db2:	8e 2d       	mov	r24, r14

00000db4 <.Loc.30>:
 	cpi	r24, 0x03	;  for (     ;ipp<3;ipp++) {
     db4:	83 30       	cpi	r24, 0x03	; 3

00000db6 <.Loc.31>:
 	brne	loop1 
     db6:	49 f7       	brne	.-46     	; 0xd8a <loop1>

00000db8 <.Loc.32>:

 	pop	r17
     db8:	1f 91       	pop	r17

00000dba <.Loc.33>:
 	pop	r16
     dba:	0f 91       	pop	r16

00000dbc <.Loc.34>:
 	pop	r15
     dbc:	ff 90       	pop	r15

00000dbe <.Loc.35>:
 	pop	r14
     dbe:	ef 90       	pop	r14

00000dc0 <.Loc.36>:
 	ret
     dc0:	08 95       	ret

00000dc2 <PinLayoutLine>:
#ifdef WITH_GRAPHICS
 .GLOBAL PinLayoutLine
 .func PinLayoutLine

PinLayoutLine:
 	push	r14
     dc2:	ef 92       	push	r14

00000dc4 <.Loc.38>:
 	push	r15
     dc4:	ff 92       	push	r15

00000dc6 <.Loc.39>:
 	push	r16
     dc6:	0f 93       	push	r16

00000dc8 <.Loc.40>:
 	push	r17
     dc8:	1f 93       	push	r17

00000dca <.Loc.41>:

 	mov	r17, r24		; Pin1
     dca:	18 2f       	mov	r17, r24

00000dcc <.Loc.42>:
 	mov	r16, r22		; Pin2
     dcc:	06 2f       	mov	r16, r22

00000dce <.Loc.43>:
 	mov	r15, r20		; Pin3
     dce:	f4 2e       	mov	r15, r20

00000dd0 <.Loc.44>:
	ldi	r24, 0
     dd0:	80 e0       	ldi	r24, 0x00	; 0

00000dd2 <.Loc.45>:
	call	lcd_next_line_wait		; lcd_next_line_wait(0);
     dd2:	92 d4       	rcall	.+2340   	; 0x16f8 <lcd_next_line_wait>

00000dd4 <.Loc.46>:
	mov	r22, r16
	mov	r24, r17
	RCALL	PinLayout		; PinLayout(Pin1, Pin2, Pin3)
 #else

 	ldi	r24, lo8(Pin_str)	; 
     dd4:	88 e6       	ldi	r24, 0x68	; 104

00000dd6 <.Loc.47>:
 	ldi	r25, hi8(Pin_str)	; 	
     dd6:	91 e0       	ldi	r25, 0x01	; 1

00000dd8 <.Loc.48>:
  #ifdef USE_EEPROM
 	RCALL	lcd_fix_string		; lcd_MEM_string(Pin_str);	//"Pin "
     dd8:	ba d5       	rcall	.+2932   	; 0x194e <lcd_fix_string>

00000dda <.Loc.49>:
  #else
 	RCALL	lcd_pgm_string		; lcd_MEM_string(Pin_str);	//"Pin "
  #endif
  #ifndef EBC_STYLE 
;   // Layout with 1= 2= 3= style
 	eor	r14, r14	; for (ipp=0;
     dda:	ee 24       	eor	r14, r14

00000ddc <lloop1>:
lloop1:
        mov	r24, r14
     ddc:	8e 2d       	mov	r24, r14

00000dde <.Loc.51>:
	RCALL	lcd_testpin	; lcd_testpin(ipp)
     dde:	a9 d5       	rcall	.+2898   	; 0x1932 <lcd_testpin>

00000de0 <.Loc.52>:
	RCALL	lcd_equal	; lcd_data('=')
     de0:	c7 df       	rcall	.-114    	; 0xd70 <lcd_equal>

00000de2 <.Loc.53>:
 	lds	r30, _trans
     de2:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>

00000de6 <.Loc.54>:
 	lds	r31, _trans+1
     de6:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>

00000dea <.Loc.55>:
 	ldd	r24, Z+OFFS_e	; _trans->e
     dea:	86 85       	ldd	r24, Z+14	; 0x0e

00000dec <.Loc.56>:
 	cp	r14, r24
     dec:	e8 16       	cp	r14, r24

00000dee <.Loc.57>:
 	brne	lcheckb		; if (ipp == _trans->e) 
     dee:	11 f4       	brne	.+4      	; 0xdf4 <lcheckb>

00000df0 <.Loc.58>:
 	mov	r24, r17	; pin1
     df0:	81 2f       	mov	r24, r17

00000df2 <.Loc.59>:
        rjmp	ldata_ipp  	; lcd_data(pin1);	// Output Character in right order
     df2:	09 c0       	rjmp	.+18     	; 0xe06 <ldata_ipp>

00000df4 <lcheckb>:
lcheckb:
 	ldd	r24, Z+OFFS_b	; _trans->b
     df4:	84 85       	ldd	r24, Z+12	; 0x0c

00000df6 <.Loc.61>:
 	cp	r14, r24	; if (ipp == _trans->b) 
     df6:	e8 16       	cp	r14, r24

00000df8 <.Loc.62>:
 	brne	lcheckc
     df8:	11 f4       	brne	.+4      	; 0xdfe <lcheckc>

00000dfa <.Loc.63>:
 	mov	r24, r16
     dfa:	80 2f       	mov	r24, r16

00000dfc <.Loc.64>:
        rjmp	ldata_ipp	;  lcd_data(pin2);
     dfc:	04 c0       	rjmp	.+8      	; 0xe06 <ldata_ipp>

00000dfe <lcheckc>:
lcheckc:
 	ldd	r24, Z+OFFS_c	; _trans->c
     dfe:	85 85       	ldd	r24, Z+13	; 0x0d

00000e00 <.Loc.66>:
 	cp	r14, r24
     e00:	e8 16       	cp	r14, r24

00000e02 <.Loc.67>:
 	brne	lnext_ipp		; if (ipp == _trans->c) 
     e02:	11 f4       	brne	.+4      	; 0xe08 <lnext_ipp>

00000e04 <.Loc.68>:
 	mov	r24, r15
     e04:	8f 2d       	mov	r24, r15

00000e06 <ldata_ipp>:
ldata_ipp:
 	RCALL	lcd_data	;  lcd_data(pin3);
     e06:	4b d5       	rcall	.+2710   	; 0x189e <lcd_data>

00000e08 <lnext_ipp>:
lnext_ipp:
	RCALL	lcd_space	;  lcd_space()
     e08:	af df       	rcall	.-162    	; 0xd68 <lcd_space>

00000e0a <.Loc.71>:
 	inc	r14
     e0a:	e3 94       	inc	r14

00000e0c <.Loc.72>:
 	mov	r24, r14
     e0c:	8e 2d       	mov	r24, r14

00000e0e <.Loc.73>:
 	cpi	r24, 0x03	;  for (     ;ipp<3;ipp++) {
     e0e:	83 30       	cpi	r24, 0x03	; 3

00000e10 <.Loc.74>:
 	brne	lloop1 
     e10:	29 f7       	brne	.-54     	; 0xddc <lloop1>

00000e12 <.Loc.75>:
 	RCALL	lcd_testpin	; lcd_testpin(_trans->c);

   #endif /* =321 */
  #endif  /* EBC_STYLE */
 #endif  /* NO_LONG_PINLAYOUT */
 	pop	r17		; restore registers and return
     e12:	1f 91       	pop	r17

00000e14 <.Loc.76>:
 	pop	r16
     e14:	0f 91       	pop	r16

00000e16 <.Loc.77>:
 	pop	r15
     e16:	ff 90       	pop	r15

00000e18 <.Loc.78>:
 	pop	r14
     e18:	ef 90       	pop	r14

00000e1a <.Loc.79>:
 	ret
     e1a:	08 95       	ret

00000e1c <Rnum2pins>:
#endif     /* WITH_GRAPHICS */

 .GLOBAL Rnum2pins
 .func Rnum2pins
 Rnum2pins:
	mov	r22,r24
     e1c:	68 2f       	mov	r22, r24

00000e1e <.Loc.81>:
	ldi	r24, TP1
     e1e:	80 e0       	ldi	r24, 0x00	; 0

00000e20 <.Loc.82>:
	ldi	r25, TP3
     e20:	92 e0       	ldi	r25, 0x02	; 2

00000e22 <.Loc.83>:
        and	r22,r22
     e22:	66 23       	and	r22, r22

00000e24 <.Loc.84>:
        brne    nozero
     e24:	09 f4       	brne	.+2      	; 0xe28 <nozero>

00000e26 <.Loc.85>:
        ldi	r25, TP2
     e26:	91 e0       	ldi	r25, 0x01	; 1

00000e28 <nozero>:
nozero:
	cpi	r22, 2
     e28:	62 30       	cpi	r22, 0x02	; 2

00000e2a <.Loc.87>:
	brne	no_two
     e2a:	09 f4       	brne	.+2      	; 0xe2e <no_two>

00000e2c <.Loc.88>:
	ldi	r24, TP2
     e2c:	81 e0       	ldi	r24, 0x01	; 1

00000e2e <no_two>:
no_two:
	ret
     e2e:	08 95       	ret

00000e30 <RvalOut>:
 .extern ResistorVal

 .section .text

RvalOut:		; void RvalOut(uint8_t nrr) 	
 	push	r16
     e30:	0f 93       	push	r16

00000e32 <.Loc.1>:

        mov	r16, r24
     e32:	08 2f       	mov	r16, r24

00000e34 <.Loc.2>:
	LDIZ	ResistorVal
     e34:	ea ea       	ldi	r30, 0xAA	; 170
     e36:	f1 e0       	ldi	r31, 0x01	; 1

00000e38 <.Loc.3>:
	add	r24, r24	; nrr*2
     e38:	88 0f       	add	r24, r24

00000e3a <.Loc.4>:
	add	r24, r24	; nrr*4
     e3a:	88 0f       	add	r24, r24

00000e3c <.Loc.5>:
	add	r30, r24
     e3c:	e8 0f       	add	r30, r24

00000e3e <.Loc.6>:
	adc	r31, zero_reg
     e3e:	f1 1d       	adc	r31, r1

00000e40 <.Loc.7>:

 	ld	r22, Z		; resis[rr].rx
     e40:	60 81       	ld	r22, Z

00000e42 <.Loc.8>:
 	ldd	r23, Z+1	; 0x01
     e42:	71 81       	ldd	r23, Z+1	; 0x01

00000e44 <.Loc.9>:
 	ldd	r24, Z+2	; 0x02
     e44:	82 81       	ldd	r24, Z+2	; 0x02

00000e46 <.Loc.10>:
 	ldd	r25, Z+3	; 0x03
     e46:	93 81       	ldd	r25, Z+3	; 0x03

00000e48 <.Loc.11>:
#if FLASHEND > 0x1fff
 	cpi	r22, 0x64	; 100
     e48:	64 36       	cpi	r22, 0x64	; 100

00000e4a <.Loc.12>:
 	cpc	r23, r1
     e4a:	71 05       	cpc	r23, r1

00000e4c <.Loc.13>:
 	cpc	r24, r1
     e4c:	81 05       	cpc	r24, r1

00000e4e <.Loc.14>:
 	cpc	r25, r1
     e4e:	91 05       	cpc	r25, r1

00000e50 <.Loc.15>:
 	brcc	ad1d8e 		; (ResistorVal[nrr] < 100)
     e50:	68 f4       	brcc	.+26     	; 0xe6c <ad1d8e>

00000e52 <.Loc.16>:
 	lds	r18, inductor_lpre
     e52:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <inductor_lpre>

00000e56 <.Loc.17>:
	sbrc	r18, 7		; minus bit set?
     e56:	27 fd       	sbrc	r18, 7

00000e58 <.Loc.18>:
 	rjmp	ad1d8e 		; (inductor_lpre >= 0)
     e58:	09 c0       	rjmp	.+18     	; 0xe6c <ad1d8e>

00000e5a <.Loc.19>:
	mov	r24,r16
     e5a:	80 2f       	mov	r24, r16

00000e5c <.Loc.20>:
	ACALL	Rnum2pins;	; pins = Rnum2pins(nrr)
     e5c:	df df       	rcall	.-66     	; 0xe1c <Rnum2pins>

00000e5e <.Loc.21>:
        mov	r22, r25
     e5e:	69 2f       	mov	r22, r25

00000e60 <.Loc.22>:
 	ACALL	GetESR		; rr = GetESR(resis[nrr].ra,resis[nrr].rb);
     e60:	f3 d1       	rcall	.+998    	; 0x1248 <GetESR>

00000e62 <.Loc.23>:
;        ldi	r24, 0
;        ldi	r25, 0
; 	ldi	r20, -2		; 254
; 	ldi	r16, 0x03	; 3
; 	rjmp	ad1d94		; DisplayValue(rr,-2,LCD_CHAR_OMEGA,3);
	ldi	r22, -2
     e62:	6e ef       	ldi	r22, 0xFE	; 254

00000e64 <.Loc.24>:
	ldi	r18, 3
     e64:	23 e0       	ldi	r18, 0x03	; 3

00000e66 <.Loc.25>:
	ldi	r20, LCD_CHAR_OMEGA
     e66:	4d e1       	ldi	r20, 0x1D	; 29

00000e68 <.Loc.26>:
	RCALL	DisplayValue16	; DisplayValue16(rr,-2,LCD_OMEGA,3);
     e68:	bc d6       	rcall	.+3448   	; 0x1be2 <DisplayValue16>

00000e6a <.Loc.27>:
	rjmp	ret_with_space
     e6a:	04 c0       	rjmp	.+8      	; 0xe74 <ret_with_space>

00000e6c <ad1d8e>:
ad1d8e:		; } else {
#endif
	; r22-r25 = ResistorVal[rr]
 	ldi	r20, -1		; 255
     e6c:	4f ef       	ldi	r20, 0xFF	; 255

00000e6e <.Loc.29>:
 	ldi	r16, 0x04	; DisplayValue(resis[nrr].rx,-1,LCD_CHAR_OMEGA,4);
     e6e:	04 e0       	ldi	r16, 0x04	; 4

00000e70 <.Loc.30>:
;ad1d94:
 	ldi	r18, LCD_CHAR_OMEGA	; 244
     e70:	2d e1       	ldi	r18, 0x1D	; 29

00000e72 <.Loc.31>:
 	RCALL	DisplayValue
     e72:	b2 d5       	rcall	.+2916   	; 0x19d8 <DisplayValue>

00000e74 <ret_with_space>:
ret_with_space:
 	RCALL	lcd_space	; lcd_space();
     e74:	79 df       	rcall	.-270    	; 0xd68 <lcd_space>

00000e76 <.Loc.33>:
 	pop	r16
     e76:	0f 91       	pop	r16

00000e78 <.Loc.34>:
 	ret
     e78:	08 95       	ret

00000e7a <mVAusgabe>:
        .extern lcd_space

	 .func mVAusgabe
	mVAusgabe:
	;   if (nn < 6) {
		cpi	r24, 0x06	; 6
     e7a:	86 30       	cpi	r24, 0x06	; 6

00000e7c <.Loc.1>:
		brcc	ad1ca4;
     e7c:	58 f4       	brcc	.+22     	; 0xe94 <ad1ca4>

00000e7e <.Loc.2>:
	      // Output in mV units
		LDIZ	diodes+12;
     e7e:	e2 e9       	ldi	r30, 0x92	; 146
     e80:	f1 e0       	ldi	r31, 0x01	; 1

00000e82 <.Loc.3>:
		add	r30,r24
     e82:	e8 0f       	add	r30, r24

00000e84 <.Loc.4>:
		adc	r31,zero_reg
     e84:	f1 1d       	adc	r31, r1

00000e86 <.Loc.5>:
		add	r30,r24
     e86:	e8 0f       	add	r30, r24

00000e88 <.Loc.6>:
		adc	r31,zero_reg
     e88:	f1 1d       	adc	r31, r1

00000e8a <.Loc.7>:
		ld	r24, Z		; diodes.Voltage[nn]
     e8a:	80 81       	ld	r24, Z

00000e8c <.Loc.8>:
		ldd	r25, Z+1	; 0x01
     e8c:	91 81       	ldd	r25, Z+1	; 0x01

00000e8e <.Loc.9>:
		ldi	r22, 0x03	; 3
     e8e:	63 e0       	ldi	r22, 0x03	; 3

00000e90 <.Loc.10>:
		RCALL	Display_mV	; Display_mV(diodes.Voltage[nn],3);
     e90:	b3 d6       	rcall	.+3430   	; 0x1bf8 <Display_mV>

00000e92 <.Loc.11>:
		RCALL	lcd_space;	; lcd_space();
     e92:	6a cf       	rjmp	.-300    	; 0xd68 <lcd_space>

00000e94 <ad1ca4>:
	ad1ca4:
		ret
     e94:	08 95       	ret

00000e96 <UfAusgabe>:
	.extern mVAusgabe

	.func UfAusgabe

UfAusgabe:
 	push	r17
     e96:	1f 93       	push	r17

00000e98 <.Loc.14>:
 	mov	r17, r24
     e98:	18 2f       	mov	r17, r24

00000e9a <.Loc.15>:
 	lds	r24, ResistorsFound;	0x0168
     e9a:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <ResistorsFound>

00000e9e <.Loc.16>:
 	and	r24, r24
     e9e:	88 23       	and	r24, r24

00000ea0 <.Loc.17>:
 	breq	ad1cbe; 	   if (ResistorsFound > 0) { 
     ea0:	19 f0       	breq	.+6      	; 0xea8 <ad1cbe>

00000ea2 <.Loc.18>:
 	RCALL	lcd_space;	lcd_space();
     ea2:	62 df       	rcall	.-316    	; 0xd68 <lcd_space>

00000ea4 <.Loc.19>:
 	ldi	r24, LCD_CHAR_RESIS3;	0
     ea4:	80 e0       	ldi	r24, 0x00	; 0

00000ea6 <.Loc.20>:
 	RCALL	lcd_data;      lcd_data(LCD_CHAR_RESIS3);	// special symbol or R
     ea6:	fb d4       	rcall	.+2550   	; 0x189e <lcd_data>

00000ea8 <ad1cbe>:
ad1cbe:
 	RCALL	lcd_line2;					//2. row
     ea8:	91 d3       	rcall	.+1826   	; 0x15cc <lcd_line2>

00000eaa <.Loc.22>:
 	ldi	r24, lo8(Uf_str);	0xE9
     eaa:	89 e5       	ldi	r24, 0x59	; 89

00000eac <.Loc.23>:
 	ldi	r25, hi8(Uf_str);	0x01
     eac:	91 e0       	ldi	r25, 0x01	; 1

00000eae <.Loc.24>:
#ifdef USE_EEPROM
 	RCALL	lcd_fix_string	; lcd_PGM_string(Uf_str);	//"Uf="
     eae:	4f d5       	rcall	.+2718   	; 0x194e <lcd_fix_string>

00000eb0 <.Loc.25>:
#else
 	RCALL	lcd_pgm_string	; lcd_PGM_string(Uf_str);	//"Uf="
#endif
 	mov	r24, r17
     eb0:	81 2f       	mov	r24, r17

00000eb2 <.Loc.26>:
 	swap	r24
     eb2:	82 95       	swap	r24

00000eb4 <.Loc.27>:
 	andi	r24, 0x0F
     eb4:	8f 70       	andi	r24, 0x0F	; 15

00000eb6 <.Loc.28>:
 	rcall	mVAusgabe	; mVAusgabe(bcdnum >> 4);
     eb6:	e1 df       	rcall	.-62     	; 0xe7a <mVAusgabe>

00000eb8 <.Loc.29>:
 	mov	r24, r17
     eb8:	81 2f       	mov	r24, r17

00000eba <.Loc.30>:
 	andi	r24, 0x0F	; 15
     eba:	8f 70       	andi	r24, 0x0F	; 15

00000ebc <.Loc.31>:
 	rcall	mVAusgabe	; mVAusgabe(bcdnum & 0x0f);
     ebc:	de df       	rcall	.-68     	; 0xe7a <mVAusgabe>

00000ebe <.Loc.32>:
 	pop	r17
     ebe:	1f 91       	pop	r17

00000ec0 <.Loc.33>:
 	ret
     ec0:	08 95       	ret

00000ec2 <SerienDiodenAusgabe>:
	.extern AnKat_str

	.func  SerienDiodenAusgabe

SerienDiodenAusgabe:
 	lds	r24, diode_sequence;	0x0102
     ec2:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <diode_sequence>

00000ec6 <.Loc.35>:
 	swap	r24
     ec6:	82 95       	swap	r24

00000ec8 <.Loc.36>:
 	andi	r24, 0x0F	; first = diode_sequence >> 4;
     ec8:	8f 70       	andi	r24, 0x0F	; 15

00000eca <.Loc.37>:
	rcall	DiodeSymbol_ApinCpin	;  1->|-2
     eca:	19 d0       	rcall	.+50     	; 0xefe <DiodeSymbol_ApinCpin>

00000ecc <.Loc.38>:

 	lds	r24, diode_sequence;	0x0102
     ecc:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <diode_sequence>

00000ed0 <.Loc.39>:
 	andi	r24, 0x03	; second = diode_sequence & 3;
     ed0:	83 70       	andi	r24, 0x03	; 3

00000ed2 <.Loc.40>:
 	RCALL	DiodeSymbol_ACpin	;  ->|-3
     ed2:	1c d0       	rcall	.+56     	; 0xf0c <DiodeSymbol_ACpin>

00000ed4 <.Loc.41>:
 	lds	r24, diode_sequence;	x0102
     ed4:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <diode_sequence>

00000ed8 <.Loc.42>:
 	rcall	UfAusgabe	; UfAusgabe(diode_sequence);
     ed8:	de cf       	rjmp	.-68     	; 0xe96 <UfAusgabe>

00000eda <.Loc.43>:
    	ret
     eda:	08 95       	ret

00000edc <load_diodes_adr>:
 .endfunc

        .func	load_diodes_adr
load_diodes_adr:
 	ldi	r30, lo8(diodes)	;0x80
     edc:	e6 e8       	ldi	r30, 0x86	; 134

00000ede <.Loc.45>:
 	ldi	r31, hi8(diodes)	;0x01
     ede:	f1 e0       	ldi	r31, 0x01	; 1

00000ee0 <.Loc.46>:
 	add	r30, r24	; [nn]
     ee0:	e8 0f       	add	r30, r24

00000ee2 <.Loc.47>:
 	adc	r31, zero_reg
     ee2:	f1 1d       	adc	r31, r1

00000ee4 <.Loc.48>:
	ret
     ee4:	08 95       	ret

00000ee6 <DiodeSymbol_withPins>:
	.func	DiodeSymbol_withPins

DiodeSymbol_withPins:
#if FLASHEND > 0x1fff
 // enough memory (>8k) to sort the pins
        push    r28
     ee6:	cf 93       	push	r28

00000ee8 <.Loc.50>:
	rcall	load_diodes_adr
     ee8:	f9 df       	rcall	.-14     	; 0xedc <load_diodes_adr>

00000eea <.Loc.51>:

cat_first1:
	rcall	DiodeSymbol_CpinApin
 #else
  // the higher test pin number is right side
	ld	r25, Z
     eea:	90 81       	ld	r25, Z

00000eec <.Loc.52>:
	ldd	r28, Z+6	; if (anode_nr < cathode_nr) {
     eec:	c6 81       	ldd	r28, Z+6	; 0x06

00000eee <.Loc.53>:
	cp	r28, r25
     eee:	c9 17       	cp	r28, r25

00000ef0 <.Loc.54>:
	brcc	cat_first2
     ef0:	10 f4       	brcc	.+4      	; 0xef6 <cat_first2>

00000ef2 <.Loc.55>:

	rcall	DiodeSymbol_ApinCpin
     ef2:	05 d0       	rcall	.+10     	; 0xefe <DiodeSymbol_ApinCpin>

00000ef4 <.Loc.56>:
	rjmp	diode_fin
     ef4:	01 c0       	rjmp	.+2      	; 0xef8 <diode_fin>

00000ef6 <cat_first2>:

//   } else {

cat_first2:
	rcall	DiodeSymbol_CpinApin
     ef6:	13 d0       	rcall	.+38     	; 0xf1e <DiodeSymbol_CpinApin>

00000ef8 <diode_fin>:
 #endif
#else
	rcall	DiodeSymbol_ApinCpin
#endif
diode_fin:
	rcall	lcd_space
     ef8:	37 df       	rcall	.-402    	; 0xd68 <lcd_space>

00000efa <.Loc.59>:
	pop	r28
     efa:	cf 91       	pop	r28

00000efc <.Loc.60>:
	ret
     efc:	08 95       	ret

00000efe <DiodeSymbol_ApinCpin>:

	.GLOBAL DiodeSymbol_ApinCpin
	.func	DiodeSymbol_ApinCpin

DiodeSymbol_ApinCpin:
	rcall	load_diodes_adr
     efe:	ee df       	rcall	.-36     	; 0xedc <load_diodes_adr>

00000f00 <.Loc.62>:
	push	r24
     f00:	8f 93       	push	r24

00000f02 <.Loc.63>:
 	ld	r24, Z		;Anode
     f02:	80 81       	ld	r24, Z

00000f04 <.Loc.64>:
 	RCALL	lcd_testpin	; lcd_testpin(diodes.Anode[nn]);
     f04:	16 d5       	rcall	.+2604   	; 0x1932 <lcd_testpin>

00000f06 <.Loc.65>:
	pop	r24
     f06:	8f 91       	pop	r24

00000f08 <.Loc.66>:
	rcall	DiodeSymbol_ACpin	; ->|-3
     f08:	01 c0       	rjmp	.+2      	; 0xf0c <DiodeSymbol_ACpin>

00000f0a <.Loc.67>:
        ret
     f0a:	08 95       	ret

00000f0c <DiodeSymbol_ACpin>:

	.GLOBAL DiodeSymbol_ACpin
	.func	DiodeSymbol_ACpin

DiodeSymbol_ACpin:
	push	r24
     f0c:	8f 93       	push	r24

00000f0e <.Loc.69>:
 	ldi	r24, lo8(AnKat_str)	;0xA3
     f0e:	87 e2       	ldi	r24, 0x27	; 39

00000f10 <.Loc.70>:
 	ldi	r25, hi8(AnKat_str)	;0x03
     f10:	91 e0       	ldi	r25, 0x01	; 1

00000f12 <.Loc.71>:
  #ifdef USE_EEPROM
	.extern lcd_fix_string
 	RCALL	lcd_fix_string	; lcd_PGM_string(AnKat_str);	//"->|-"
     f12:	1d d5       	rcall	.+2618   	; 0x194e <lcd_fix_string>

00000f14 <.Loc.72>:
  #else
	.extern lcd_pgm_string
 	RCALL	lcd_pgm_string	; lcd_PGM_string(AnKat_str);	//"->|-"
  #endif
	pop	r24
     f14:	8f 91       	pop	r24

00000f16 <.Loc.73>:
	rcall	load_diodes_adr
     f16:	e2 df       	rcall	.-60     	; 0xedc <load_diodes_adr>

00000f18 <.Loc.74>:
	ldd	r24, Z+6	; Cathode
     f18:	86 81       	ldd	r24, Z+6	; 0x06

00000f1a <.Loc.75>:
 	RCALL	lcd_testpin	; lcd_testpin(diodes.Cathode[nn]);
     f1a:	0b c5       	rjmp	.+2582   	; 0x1932 <lcd_testpin>

00000f1c <.Loc.76>:
	ret
     f1c:	08 95       	ret

00000f1e <DiodeSymbol_CpinApin>:

	.GLOBAL DiodeSymbol_CpinApin
	.func	DiodeSymbol_CpinApin

DiodeSymbol_CpinApin:
	rcall	load_diodes_adr
     f1e:	de df       	rcall	.-68     	; 0xedc <load_diodes_adr>

00000f20 <.Loc.78>:
	push	r24
     f20:	8f 93       	push	r24

00000f22 <.Loc.79>:
 	ldd	r24, Z+6	;Cathode
     f22:	86 81       	ldd	r24, Z+6	; 0x06

00000f24 <.Loc.80>:
 	RCALL	lcd_testpin	; lcd_testpin(diodes.Cathode[nn]);
     f24:	06 d5       	rcall	.+2572   	; 0x1932 <lcd_testpin>

00000f26 <.Loc.81>:
	pop	r24
     f26:	8f 91       	pop	r24

00000f28 <.Loc.82>:
	rcall	DiodeSymbol_CApin	; -|<-3
     f28:	01 c0       	rjmp	.+2      	; 0xf2c <DiodeSymbol_CApin>

00000f2a <.Loc.83>:
        ret
     f2a:	08 95       	ret

00000f2c <DiodeSymbol_CApin>:

	.GLOBAL DiodeSymbol_CApin
	.func	DiodeSymbol_CApin

DiodeSymbol_CApin:
	push	r24
     f2c:	8f 93       	push	r24

00000f2e <.Loc.85>:
 	ldi	r24, lo8(KatAn_str)	;0xA3
     f2e:	83 e2       	ldi	r24, 0x23	; 35

00000f30 <.Loc.86>:
 	ldi	r25, hi8(KatAn_str)	;0x03
     f30:	91 e0       	ldi	r25, 0x01	; 1

00000f32 <.Loc.87>:
  #ifdef USE_EEPROM
	.extern lcd_fix_string
 	RCALL	lcd_fix_string	; lcd_PGM_string(KatAn_str);	//"->|-"
     f32:	0d d5       	rcall	.+2586   	; 0x194e <lcd_fix_string>

00000f34 <.Loc.88>:
  #else
	.extern lcd_pgm_string
 	RCALL	lcd_pgm_string	; lcd_PGM_string(KatAn_str);	//"->|-"
  #endif
	pop	r24
     f34:	8f 91       	pop	r24

00000f36 <.Loc.89>:
	rcall	load_diodes_adr
     f36:	d2 df       	rcall	.-92     	; 0xedc <load_diodes_adr>

00000f38 <.Loc.90>:
	ld	r24, Z		; Anode
     f38:	80 81       	ld	r24, Z

00000f3a <.Loc.91>:
 	RCALL	lcd_testpin	; lcd_testpin(diodes.Anode[nn]);
     f3a:	fb c4       	rjmp	.+2550   	; 0x1932 <lcd_testpin>

00000f3c <.Loc.92>:
	ret
     f3c:	08 95       	ret

00000f3e <wait5s>:
; A maximum of 28 bytes of space for return addresses is used in RAM 
; I see no way to implement this function with C-language (too tricky)


wait5s:
 rcall wait1s		;	12+x return-adresses
     f3e:	03 d0       	rcall	.+6      	; 0xf46 <wait1000ms>

00000f40 <wait4s>:
wait4s:
 rcall wait1s		;	12+x return-adresses
     f40:	02 d0       	rcall	.+4      	; 0xf46 <wait1000ms>

00000f42 <wait3s>:
wait3s:
 rcall wait1s		;	12+x return-adresses
     f42:	01 d0       	rcall	.+2      	; 0xf46 <wait1000ms>

00000f44 <wait2s>:
wait2s:
 rcall wait1s		;1s     12+x Return-Adresses
     f44:	00 d0       	rcall	.+0      	; 0xf46 <wait1000ms>

00000f46 <wait1000ms>:

wait1s:
wait1000ms:	
 rcall wait500ms	;500ms	11+x Return-Adresses
     f46:	00 d0       	rcall	.+0      	; 0xf48 <wait500ms>

00000f48 <wait500ms>:

wait500ms:
 rcall wait100ms	;100ms	10+x Return-Adresses
     f48:	03 d0       	rcall	.+6      	; 0xf50 <wait100ms>

00000f4a <wait400ms>:
wait400ms:
 rcall wait100ms	;100ms	10+x Return-Adresses
     f4a:	02 d0       	rcall	.+4      	; 0xf50 <wait100ms>

00000f4c <wait300ms>:
wait300ms:
 rcall wait100ms	;100ms	10+x Return-Adresses
     f4c:	01 d0       	rcall	.+2      	; 0xf50 <wait100ms>

00000f4e <wait200ms>:
wait200ms:
 rcall wait100ms	;100ms	10+x Return-Adresses
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <wait100ms>

00000f50 <wait100ms>:


wait100ms:
 rcall wait50ms	    	; 50ms	9+x Return-Adresses
     f50:	00 d0       	rcall	.+0      	; 0xf52 <wait50ms>

00000f52 <wait50ms>:

wait50ms:
 rcall wait10ms	    	;10ms	8+x Return-Adresses 
     f52:	03 d0       	rcall	.+6      	; 0xf5a <wait10ms>

00000f54 <wait40ms>:
wait40ms:
 rcall wait10ms	    	;10ms	8+x Return-Adresses  
     f54:	02 d0       	rcall	.+4      	; 0xf5a <wait10ms>

00000f56 <wait30ms>:
wait30ms:
 rcall wait10ms	    	;10ms	8+x Return-Adresses  
     f56:	01 d0       	rcall	.+2      	; 0xf5a <wait10ms>

00000f58 <wait20ms>:
wait20ms:
 rcall wait10ms	    	;10ms	8+x Return-Adresses
     f58:	00 d0       	rcall	.+0      	; 0xf5a <wait10ms>

00000f5a <wait10ms>:

wait10ms:
 rcall wait5ms	   	;5ms	7+x Return-Adresses
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <wait5ms>

00000f5c <wait5ms>:
wait5ms:
 wdr				; every 5ms one Watchdog reset!
     f5c:	a8 95       	wdr

00000f5e <.Loc.16>:
 rcall wait1ms	   	;1ms	6+x Return-Adresses
     f5e:	03 d0       	rcall	.+6      	; 0xf66 <wait1ms>

00000f60 <wait4ms>:
wait4ms:
 rcall wait1ms	   	;1ms	6+x Return-Adresses
     f60:	02 d0       	rcall	.+4      	; 0xf66 <wait1ms>

00000f62 <wait3ms>:
wait3ms:
 rcall wait1ms	   	;1ms	6+x Return-Adresses
     f62:	01 d0       	rcall	.+2      	; 0xf66 <wait1ms>

00000f64 <wait2ms>:
wait2ms:
 rcall wait1ms	   	;1ms	6+x Return-Adresses
     f64:	00 d0       	rcall	.+0      	; 0xf66 <wait1ms>

00000f66 <wait1ms>:

wait1ms:
 rcall wait500us    	;500us	5+x Return-Adresses
     f66:	00 d0       	rcall	.+0      	; 0xf68 <wait500us>

00000f68 <wait500us>:
wait500us:
 rcall wait100us    	;100us	4+x Return-Adresses
     f68:	03 d0       	rcall	.+6      	; 0xf70 <wait100us>

00000f6a <wait400us>:
wait400us:
 rcall wait100us    	;100us	4+x Return-Adresses
     f6a:	02 d0       	rcall	.+4      	; 0xf70 <wait100us>

00000f6c <wait300us>:
wait300us:
 rcall wait100us    	;100us	4+x Return-Adresses
     f6c:	01 d0       	rcall	.+2      	; 0xf70 <wait100us>

00000f6e <wait200us>:
wait200us:
 rcall wait100us    	;100us	4+x Return-Adresses
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <wait100us>

00000f70 <wait100us>:

wait100us:
#if US100_TICS > (2 * US50_TICS)
 nop
#endif
 rcall wait50us	    	; 50us delay
     f70:	00 d0       	rcall	.+0      	; 0xf72 <wait50us>

00000f72 <wait50us>:
wait50us:
#if US50_TICS > (US40_TICS + US10_TICS)
 nop
#endif
 rcall wait10us     	;10us delay
     f72:	03 d0       	rcall	.+6      	; 0xf7a <wait10us>

00000f74 <wait40us>:
wait40us:
#if US40_TICS > (US30_TICS + US10_TICS)
 nop
#endif
 rcall wait10us     	;10us delay
     f74:	02 d0       	rcall	.+4      	; 0xf7a <wait10us>

00000f76 <wait30us>:
wait30us:
#if US30_TICS > (US20_TICS + US10_TICS)
 nop
#endif
 rcall wait10us     	;10us delay
     f76:	01 d0       	rcall	.+2      	; 0xf7a <wait10us>

00000f78 <wait20us>:
wait20us:
#if US20_TICS > (2 * US10_TICS)
 nop
#endif
 rcall wait10us		;10us delay
     f78:	00 d0       	rcall	.+0      	; 0xf7a <wait10us>

00000f7a <wait10us>:

#if US5_TICS >= RCALL_TICS
 #if US10_TICS > (2 * US5_TICS)
  nop
 #endif
 rcall wait5us
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <wait5us>

00000f7c <wait5us>:
   #define INNER_TICS US1_TICS
wait5us:
   #if US5_TICS > (US4_TICS + US1_TICS)
    nop
   #endif
   rcall wait1us
     f7c:	03 d0       	rcall	.+6      	; 0xf84 <wait1us>

00000f7e <wait4us>:
wait4us:
   #if US4_TICS > (US3_TICS + US1_TICS)
    nop
   #endif
   rcall wait1us
     f7e:	02 d0       	rcall	.+4      	; 0xf84 <wait1us>

00000f80 <wait3us>:
wait3us:
   #if US3_TICS > (US2_TICS + US1_TICS)
    nop
   #endif
   rcall wait1us
     f80:	01 d0       	rcall	.+2      	; 0xf84 <wait1us>

00000f82 <wait2us>:
wait2us:
   #if US2_TICS > (2 * US1_TICS)
    nop
   #endif
   rcall wait1us
     f82:	00 d0       	rcall	.+0      	; 0xf84 <wait1us>

00000f84 <wait1us>:
	...

00000f86 <.Loc.36>:
 #endif
 #if ((WAST_TICS2 / 2) * 2) < WAST_TICS2
    nop			/* one additional tic */
 #endif

 ret
     f86:	08 95       	ret

00000f88 <sleep_10ms>:


;/* set the processor to sleep state */
;/* wake up will be done with compare match interrupt of counter 2 */
sleep_10ms:
	ldi	r24,2
     f88:	82 e0       	ldi	r24, 0x02	; 2

00000f8a <sleep_5ms>:
; void sleep_5ms(uint8_t spause){
sleep_5ms:
;	push	r0
;	push	r20
;	push	r21
 	ldi	r25, 0x00	;  pause = spause;
     f8a:	90 e0       	ldi	r25, 0x00	; 0

00000f8c <.Loc.2>:
 	cpi	r24, 201
     f8c:	89 3c       	cpi	r24, 0xC9	; 201

00000f8e <.Loc.3>:
 	brcs	wloop		; if (spause > 200) 
     f8e:	28 f0       	brcs	.+10     	; 0xf9a <wloop>

00000f90 <.Loc.4>:

;// spause = 202 = 2s
;// spause = 203 = 3s
;// spause = 204 = 4s
;// spause = 205 = 5s
 	subi	r24, 0xC8	; 200 pause = (spause-200) * 200;
     f90:	88 5c       	subi	r24, 0xC8	; 200

00000f92 <.Loc.5>:
 	ldi	r20, 0xC8	; 200
     f92:	48 ec       	ldi	r20, 0xC8	; 200

00000f94 <.Loc.6>:
 	mul	r24, r20	; (spause-200) * 200
     f94:	84 9f       	mul	r24, r20

00000f96 <.Loc.7>:
 	movw	r24, r0		; r24:25 = (spause-200) * 200
     f96:	c0 01       	movw	r24, r0

00000f98 <.Loc.8>:
 	eor	r1, r1
     f98:	11 24       	eor	r1, r1

00000f9a <wloop>:

wloop:
 	sbiw	r24, 0x00	; 0 while (pause > 0)
     f9a:	00 97       	sbiw	r24, 0x00	; 0

00000f9c <.Loc.10>:
 	brne	check_remain 
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <check_remain>

00000f9e <.Loc.11>:
; 	sts	TIMSK2, r1	; TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
;#endif
;	pop	r21
;	pop	r20
;	pop	r0
 	ret
     f9e:	08 95       	ret

00000fa0 <check_remain>:

check_remain:
#if (F_CPU_HZ / 400) > RESTART_DELAY_TICS
        lds	r20, TCCR1B	; if (TCCR1B & ((1<<CS12)|(1<<CS11)|(1<<CS10)) != 0) 
     fa0:	40 91 81 00 	lds	r20, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

00000fa4 <.Loc.13>:
	andi	r20, ((1<<CS12)|(1<<CS11)|(1<<CS10))	;
     fa4:	47 70       	andi	r20, 0x07	; 7

00000fa6 <.Loc.14>:
	breq	do_sleep
     fa6:	19 f0       	breq	.+6      	; 0xfae <do_sleep>

00000fa8 <.Loc.15>:
;  timer 1 is running, don't use sleep
	RCALL	wait5ms		; wait5ms();
     fa8:	d9 df       	rcall	.-78     	; 0xf5c <wait5ms>

00000faa <.Loc.16>:
	sbiw	r24, 1		; pause -= 1;
     faa:	01 97       	sbiw	r24, 0x01	; 1

00000fac <.Loc.17>:
	rjmp	wloop
     fac:	f6 cf       	rjmp	.-20     	; 0xf9a <wloop>

00000fae <do_sleep>:
do_sleep:
 	cpi	r24, 0x01	; 1
     fae:	81 30       	cpi	r24, 0x01	; 1

00000fb0 <.Loc.19>:
 	cpc	r25, r1
     fb0:	91 05       	cpc	r25, r1

00000fb2 <.Loc.20>:
 	breq	only_one 		; if (pause > 1)
     fb2:	19 f0       	breq	.+6      	; 0xfba <only_one>

00000fb4 <.Loc.21>:
 	sbiw	r24, 0x02	; pause -= 2;
     fb4:	02 97       	sbiw	r24, 0x02	; 2

00000fb6 <.Loc.22>:
;     // Startup time is too long with 1MHz Clock!!!!
	ldi	r21, DELAY_10ms ; 	/* set to 10ms above the actual counter */
     fb6:	5e e3       	ldi	r21, 0x3E	; 62

00000fb8 <.Loc.23>:
 	rjmp	set_cntr 
     fb8:	03 c0       	rjmp	.+6      	; 0xfc0 <set_cntr>

00000fba <only_one>:

only_one:
	ldi	r21, DELAY_5ms	; 	/* set to 5ms above the actual counter */
     fba:	57 e1       	ldi	r21, 0x17	; 23

00000fbc <.Loc.25>:
 	ldi	r24, 0x00	;  pause = 0;
     fbc:	80 e0       	ldi	r24, 0x00	; 0

00000fbe <.Loc.26>:
 	ldi	r25, 0x00	; 0
     fbe:	90 e0       	ldi	r25, 0x00	; 0

00000fc0 <set_cntr>:
   
set_cntr:
 	lds	r20, TCNT2
     fc0:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>

00000fc4 <.Loc.28>:
 	add	r20, r21	; + t2_offset
     fc4:	45 0f       	add	r20, r21

00000fc6 <.Loc.29>:
 	sts	OCR2A, r20	; OCR2A = TCNT2 + t2_offset;	/* set the compare value */
     fc6:	40 93 b3 00 	sts	0x00B3, r20	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

00000fca <.Loc.30>:
 	ldi	r20, ((0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2)); /* enable output compare match A interrupt */ 
     fca:	42 e0       	ldi	r20, 0x02	; 2

00000fcc <.Loc.31>:
 	sts	TIMSK2, r20	; TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     fcc:	40 93 70 00 	sts	0x0070, r20	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>

00000fd0 <.Loc.32>:

;;	ldi	r20, (1 << SM1) | (1 << SM0) | (0 << SE); set_sleep_mode(SLEEP_MODE_PWR_SAVE)
;;	out	_SFR_IO_ADDR(SMCR), r20;        /*  SMCR = (1 <<SM1) | (1 << SM0) | (0 << SE); */
	ldi	r20, (1 << SM1) | (1 << SM0) | (1 << SE);
     fd0:	47 e0       	ldi	r20, 0x07	; 7

00000fd2 <.Loc.33>:
	out	_SFR_IO_ADDR(SMCR), r20;        /*  SMCR = (1 <<SM1) | (1 << SM0) | (1 << SE); */
     fd2:	43 bf       	out	0x33, r20	; 51

00000fd4 <.Loc.34>:
	sleep			;
     fd4:	88 95       	sleep

00000fd6 <.Loc.35>:
; // wake up after output compare match interrupt
	ldi	r20, (1 << SM1) | (1 << SM0) | (0 << SE);
     fd6:	46 e0       	ldi	r20, 0x06	; 6

00000fd8 <.Loc.36>:
	out	_SFR_IO_ADDR(SMCR), r20;        /*  SMCR = (1 << SM0) | (0 << SE); */
     fd8:	43 bf       	out	0x33, r20	; 51

00000fda <.Loc.37>:
 	sts	TIMSK2, r1	; TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
     fda:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>

00000fde <.Loc.38>:
 	wdr			; wdt_reset();
     fde:	a8 95       	wdr

00000fe0 <.Loc.39>:
#else
;    // restart delay ist too long, use normal delay of 5ms
	RCALL	wait5ms		; wait5ms();	// wait5ms includes wdt_reset()
	sbiw	r24, 1		; pause -= 1;
#endif
 	rjmp	wloop 
     fe0:	dc cf       	rjmp	.-72     	; 0xf9a <wloop>

00000fe2 <W20msReadADC>:
W5msReadADC:
	ACALL wait5ms;
			;// runs directly to ReadADC, this will replace "ACALL ReadADC + ret"
#else
W20msReadADC:
	push	r24;
     fe2:	8f 93       	push	r24

00000fe4 <.Loc.1>:
	ldi	r24, 4;		/* 4 * 5ms */
     fe4:	84 e0       	ldi	r24, 0x04	; 4

00000fe6 <.Loc.2>:
	RCALL	sleep_5ms;
     fe6:	d1 df       	rcall	.-94     	; 0xf8a <sleep_5ms>

00000fe8 <.Loc.3>:
	rjmp   to_read;
     fe8:	06 c0       	rjmp	.+12     	; 0xff6 <to_read>

00000fea <W10msReadADC>:
W10msReadADC:
	push	r24;
     fea:	8f 93       	push	r24

00000fec <.Loc.5>:
	RCALL	sleep_10ms;
     fec:	cd df       	rcall	.-102    	; 0xf88 <sleep_10ms>

00000fee <.Loc.6>:
	rjmp   to_read;
     fee:	03 c0       	rjmp	.+6      	; 0xff6 <to_read>

00000ff0 <W5msReadADC>:
W5msReadADC:
	push	r24;
     ff0:	8f 93       	push	r24

00000ff2 <.Loc.8>:
	ldi	r24, 1;		/* 1 * 5ms */
     ff2:	81 e0       	ldi	r24, 0x01	; 1

00000ff4 <.Loc.9>:
	RCALL	sleep_5ms;
     ff4:	ca df       	rcall	.-108    	; 0xf8a <sleep_5ms>

00000ff6 <to_read>:

to_read:
	pop	r24;
     ff6:	8f 91       	pop	r24

00000ff8 <ReadADC>:

;unsigned int ReadADC(uint8_t Probe) 
ReadADC:
;  //returns result of ADC port Probe scaled to mV resolution (unsigned int)
;  unsigned long Value;
	push	r17;
     ff8:	1f 93       	push	r17

00000ffa <.Loc.12>:
; unsigned int U; /* return value (mV) */
; uint8_t Samples; /* loop counter */
; unsigned long Value; /* ADC value */
	mov	r17, r24;	Probe
     ffa:	18 2f       	mov	r17, r24

00000ffc <.Loc.13>:
	ori	r17, (1 << REFS0)	; Probe |= (1 << REFS0); /* use internal reference anyway */
     ffc:	10 64       	ori	r17, 0x40	; 64

00000ffe <get_sample>:
get_sample:
        AOUT	ADMUX, r17		; ADMUX = Probe; /* set input channel and U reference */
     ffe:	10 93 7c 00 	sts	0x007C, r17	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

00001002 <.Loc.15>:
#ifdef AUTOSCALE_ADC
 /* if voltage reference changed run a dummy conversion */
	mov	r30, r17;
    1002:	e1 2f       	mov	r30, r17

00001004 <.Loc.16>:
       	andi	r30, (1 << REFS1)	; Samples = Probe & (1 << REFS1); /* get REFS1 bit flag */
    1004:	e0 78       	andi	r30, 0x80	; 128

00001006 <.Loc.17>:
	lds	r24, ADCconfig+RefFlag	;
    1006:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <ADCconfig+0x1>

0000100a <.Loc.18>:
       	cp	r30, r24;
    100a:	e8 17       	cp	r30, r24

0000100c <.Loc.19>:
       	breq	no_ref_change			; if (Samples != ADCconfig.RefFlag) 
    100c:	59 f0       	breq	.+22     	; 0x1024 <no_ref_change>

0000100e <.Loc.20>:
	sts	ADCconfig+RefFlag, r30	; ADCconfig.RefFlag = Samples; /* update flag */
    100e:	e0 93 1f 01 	sts	0x011F, r30	; 0x80011f <ADCconfig+0x1>

00001012 <.Loc.21>:
 #ifdef NO_AREF_CAP
	RCALL	wait100us		; wait100us(); /* time for voltage stabilization */
    1012:	ae df       	rcall	.-164    	; 0xf70 <wait100us>

00001014 <.Loc.22>:
	RCALL	wait10ms		; wait10ms(); /* long time for voltage stabilization */
  #else
	RCALL	sleep_10ms		; wait_about10ms()
  #endif
 #endif		/* end NO_AREF_CAP */
	StartADCwait                    ; // allways do one dummy read of ADC, 112us
    1014:	8e e9       	ldi	r24, 0x9E	; 158
    1016:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    101a:	83 e0       	ldi	r24, 0x03	; 3
    101c:	83 bf       	out	0x33, r24	; 51
    101e:	88 95       	sleep
    1020:	82 e0       	ldi	r24, 0x02	; 2
    1022:	83 bf       	out	0x33, r24	; 51

00001024 <no_ref_change>:
#endif		/* end AUTOSCALE_ADC */

;unsigned int ReadADC (uint8_t Probe) {
no_ref_change:
 /* * sample ADC readings */
	ldi	r18, 0x00;	 Value = 0UL; /* reset sampling variable */
    1024:	20 e0       	ldi	r18, 0x00	; 0

00001026 <.Loc.24>:
	ldi	r19, 0x00; 
    1026:	30 e0       	ldi	r19, 0x00	; 0

00001028 <.Loc.25>:
	movw	r20, r18;
    1028:	a9 01       	movw	r20, r18

0000102a <.Loc.26>:
	ldi	r30, 0x00;	 Samples = 0; /* number of samples to take */
    102a:	e0 e0       	ldi	r30, 0x00	; 0

0000102c <.Loc.27>:
	rjmp	r2ae8 ;
    102c:	1f c0       	rjmp	.+62     	; 0x106c <r2ae8>

0000102e <Loop>:
; while (Samples < ADCconfig.Samples) /* take samples */ 
Loop:
	StartADCwait                    /* start ADC and wait */
    102e:	8e e9       	ldi	r24, 0x9E	; 158
    1030:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1034:	83 e0       	ldi	r24, 0x03	; 3
    1036:	83 bf       	out	0x33, r24	; 51
    1038:	88 95       	sleep
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	83 bf       	out	0x33, r24	; 51

0000103e <.Loc.29>:

	lds	r22, ADCL;     Value += ADCW; /* add ADC reading */
    103e:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>

00001042 <.Loc.30>:
	lds	r23, ADCH;
    1042:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>

00001046 <.Loc.31>:
	add	r18, r22;
    1046:	26 0f       	add	r18, r22

00001048 <.Loc.32>:
	adc	r19, r23;
    1048:	37 1f       	adc	r19, r23

0000104a <.Loc.33>:
	adc	r20, r1;
    104a:	41 1d       	adc	r20, r1

0000104c <.Loc.34>:
	adc	r21, r1;
    104c:	51 1d       	adc	r21, r1

0000104e <.Loc.35>:
#ifdef AUTOSCALE_ADC
;    /* auto-switch voltage reference for low readings */
;    if ((Samples == 4) && (ADCconfig.U_Bandgap > 255) && ((uint16_t)Value < 1024) && !(Probe & (1 << REFS1))) {
	cpi	r30, 0x04;	Samples == 4
    104e:	e4 30       	cpi	r30, 0x04	; 4

00001050 <.Loc.36>:
	brne	cnt_next		; if ((Samples == 4) && 
    1050:	61 f4       	brne	.+24     	; 0x106a <cnt_next>

00001052 <.Loc.37>:
	lds	r24, ADCconfig+3;
    1052:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <ADCconfig+0x3>

00001056 <.Loc.38>:
        cpi	r24,0;
    1056:	80 30       	cpi	r24, 0x00	; 0

00001058 <.Loc.39>:
        breq	cnt_next		; if ( && (ADCconfig.U_Bandgap > 255) )
    1058:	41 f0       	breq	.+16     	; 0x106a <cnt_next>

0000105a <.Loc.40>:
       	ldi	r24, hi8(1024)		; Value < 1024
    105a:	84 e0       	ldi	r24, 0x04	; 4

0000105c <.Loc.41>:
	cpi	r18, lo8(1024)
    105c:	20 30       	cpi	r18, 0x00	; 0

0000105e <.Loc.42>:
	cpc	r19, r24;
    105e:	38 07       	cpc	r19, r24

00001060 <.Loc.43>:
	brcc	cnt_next		; if ( &&  && ((uint16_t)Value < 1024) )
    1060:	20 f4       	brcc	.+8      	; 0x106a <cnt_next>

00001062 <.Loc.44>:
	sbrc	r17, REFS1;
    1062:	17 fd       	sbrc	r17, 7

00001064 <.Loc.45>:
	rjmp	cnt_next		; if ( &&  &&  && !(Probe & (1 << REFS1))) 
    1064:	02 c0       	rjmp	.+4      	; 0x106a <cnt_next>

00001066 <.Loc.46>:
	ori	r17, (1 << REFS1);   Probe |= (1 << REFS1); /* select internal bandgap reference */
    1066:	10 68       	ori	r17, 0x80	; 128

00001068 <.Loc.47>:
 #if (PROCESSOR_TYP == 644) || (PROCESSOR_TYP == 1280)
	cbr	r17, (1<<REFS0); Probe &= ~(1 << REFS0);  /* ATmega640/1280/2560 1.1V Reference with REFS0=0 */
 #endif
	rjmp	get_sample ;       goto get_sample; /* re-run sampling */
    1068:	ca cf       	rjmp	.-108    	; 0xffe <get_sample>

0000106a <cnt_next>:
#endif		/* end AUTOSCALE_ADC */
cnt_next:
	subi	r30, 0xFF;	  Samples++; /* one more done */
    106a:	ef 5f       	subi	r30, 0xFF	; 255

0000106c <r2ae8>:
r2ae8:
	lds	r24, ADCconfig+Samples;
    106c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <ADCconfig>

00001070 <.Loc.50>:
	cp	r30, r24		; while (Samples < ADCconfig.Samples) /* take samples */ 
    1070:	e8 17       	cp	r30, r24

00001072 <.Loc.51>:
	brcs	Loop ;
    1072:	e8 f2       	brcs	.-70     	; 0x102e <Loop>

00001074 <.Loc.52>:
	lds	r22, ADCconfig+U_AVCC		; U = ADCconfig.U_AVCC; /* Vcc reference */
    1074:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <ADCconfig+0x4>

00001078 <.Loc.53>:
       	lds	r23, ADCconfig+U_AVCC+1;
    1078:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <ADCconfig+0x5>

0000107c <.Loc.54>:
#ifdef AUTOSCALE_ADC
; /* * convert ADC reading to voltage * - single sample: U = ADC reading * U_ref / 1024 */
; /* get voltage of reference used */
	sbrs	r17, REFS1			; if (Probe & (1 << REFS1))
    107c:	17 ff       	sbrs	r17, 7

0000107e <.Loc.55>:
	rjmp	r2b02 ;
    107e:	04 c0       	rjmp	.+8      	; 0x1088 <r2b02>

00001080 <.Loc.56>:
	lds	r22, ADCconfig+U_Bandgap	; U = ADCconfig.U_Bandgap; /* bandgap reference */
    1080:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <ADCconfig+0x2>

00001084 <.Loc.57>:
	lds	r23, ADCconfig+U_Bandgap+1;
    1084:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <ADCconfig+0x3>

00001088 <r2b02>:
#endif		/* end AUTOSCALE_ADC */
; /* convert to voltage; */
r2b02:
	ldi	r24, 0x00			; Value *= U; /* ADC readings * U_ref */
    1088:	80 e0       	ldi	r24, 0x00	; 0

0000108a <.Loc.59>:
	ldi	r25, 0x00; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0

0000108c <.Loc.60>:
	ACALL	__mulsi3;			; sum(ADCreads) * ADC_reference
    108c:	0e 94 e5 37 	call	0x6fca	; 0x6fca <__mulsi3>

00001090 <.Loc.61>:
	ldi	r18, lo8(1023)			; Value /= 1023; /* / 1024 for 10bit ADC */
    1090:	2f ef       	ldi	r18, 0xFF	; 255

00001092 <.Loc.62>:
	ldi	r19, hi8(1023);
    1092:	33 e0       	ldi	r19, 0x03	; 3

00001094 <.Loc.63>:
	ldi	r20, 0x00; 0
    1094:	40 e0       	ldi	r20, 0x00	; 0

00001096 <.Loc.64>:
	ldi	r21, 0x00; 0
    1096:	50 e0       	ldi	r21, 0x00	; 0

00001098 <.Loc.65>:
	ACALL	__udivmodsi4;			R22-25 / R18-21
    1098:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

0000109c <.Loc.66>:
	movw	r22, r18;
    109c:	b9 01       	movw	r22, r18

0000109e <.Loc.67>:
	movw	r24, r20;
    109e:	ca 01       	movw	r24, r20

000010a0 <.Loc.68>:
; /* de-sample to get average voltage */
	lds	r18,ADCconfig+Samples			; Value /= ADCconfig.Samples;
    10a0:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <ADCconfig>

000010a4 <.Loc.69>:
	ldi	r19, 0x00; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0

000010a6 <.Loc.70>:
	ldi	r20, 0x00; 0
    10a6:	40 e0       	ldi	r20, 0x00	; 0

000010a8 <.Loc.71>:
	ldi	r21, 0x00; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0

000010aa <.Loc.72>:
	ACALL	__udivmodsi4;			R22-25 / R18-21
    10aa:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

000010ae <.Loc.73>:
	movw	r24, r18			;;//   return ((unsigned int)(Value / (1023 * (unsigned long)ADCconfig.Samples)));
    10ae:	c9 01       	movw	r24, r18

000010b0 <.Loc.74>:
	pop	r17;
    10b0:	1f 91       	pop	r17

000010b2 <.Loc.75>:
    	ret;
    10b2:	08 95       	ret

000010b4 <abs_diff>:
 .endfunc

.func abs_diff
.GLOBAL abs_diff
abs_diff:
	movw	r18, r22
    10b4:	9b 01       	movw	r18, r22

000010b6 <.Loc.77>:
        sub	r18, r24
    10b6:	28 1b       	sub	r18, r24

000010b8 <.Loc.78>:
	sbc	r19, r25
    10b8:	39 0b       	sbc	r19, r25

000010ba <.Loc.79>:
	brcs	is_pl		; return v1-v2
    10ba:	50 f0       	brcs	.+20     	; 0x10d0 <is_pl>

000010bc <.Loc.80>:
	movw	r24, r18
    10bc:	c9 01       	movw	r24, r18

000010be <.Loc.81>:
	ret			; return v2-v1
    10be:	08 95       	ret

000010c0 <vcc_diff>:

.func vcc_diff
.GLOBAL vcc_diff
; uint16_t vcc_diff(uint16_t v2)	// computes unsigned_diff(ADCconfig.U_AVCC, v2)
vcc_diff:
	movw	r22, r24
    10c0:	bc 01       	movw	r22, r24

000010c2 <.Loc.83>:
	lds	r24, ADCconfig+U_AVCC
    10c2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ADCconfig+0x4>

000010c6 <.Loc.84>:
	lds	r25, ADCconfig+U_AVCC+1
    10c6:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <ADCconfig+0x5>

000010ca <unsigned_diff>:
.func unsigned_diff
.GLOBAL unsigned_diff
; uint16_t unsigned_diff(uint16_t v1, uint16_t v2)  // computes v1-v2 if positive, otherwise returns 0

unsigned_diff:
	cp	r22, r24
    10ca:	68 17       	cp	r22, r24

000010cc <.Loc.86>:
	cpc	r23, r25
    10cc:	79 07       	cpc	r23, r25

000010ce <.Loc.87>:
	brcc	no_pl
    10ce:	18 f4       	brcc	.+6      	; 0x10d6 <no_pl>

000010d0 <is_pl>:
is_pl:
	sub	r24, r22
    10d0:	86 1b       	sub	r24, r22

000010d2 <.Loc.89>:
	sbc	r25, r23
    10d2:	97 0b       	sbc	r25, r23

000010d4 <.Loc.90>:
	ret			; return v1-v2
    10d4:	08 95       	ret

000010d6 <no_pl>:
no_pl:
	ldi	r24, 0
    10d6:	80 e0       	ldi	r24, 0x00	; 0

000010d8 <.Loc.92>:
	ldi	r25, 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0

000010da <.Loc.93>:
	ret	;
    10da:	08 95       	ret

000010dc <RefVoltage>:
 

RefVoltage:

#ifdef AUTO_CAL
 	ldi	r24, lo8(ref_offset)	; 1
    10dc:	8e e3       	ldi	r24, 0x3E	; 62

000010de <.Loc.1>:
 	ldi	r25, hi8(ref_offset)	; 0
    10de:	93 e0       	ldi	r25, 0x03	; 3

000010e0 <.Loc.2>:
 #if defined(WITH_SAMPLING_ADC) || defined(WITH_MENU)
  ; any other function use eeprom_read_word
 	ACALL	eeprom_read_word	; eeprom_read_word((uint16_t *)(&ref_offset));
    10e0:	0e 94 1d 39 	call	0x723a	; 0x723a <eeprom_read_word>

000010e4 <.Loc.3>:
 	lds	r18, ref_mv
    10e4:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <ref_mv>

000010e8 <.Loc.4>:
 	lds	r19, ref_mv+1
    10e8:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <ref_mv+0x1>

000010ec <.Loc.5>:
 	add	r18, r24		; referenz =  ref_mv +
    10ec:	28 0f       	add	r18, r24

000010ee <.Loc.6>:
 	adc	r19, r25
    10ee:	39 1f       	adc	r19, r25

000010f0 <.Loc.7>:
	lds	r18, ref_mv
	lds	r19, ref_mv+1
	subi	r18, -REF_C_KORR		; referenz = ref_mv + REF_C_KORR;
	adc	r19, zero_reg
#endif
        sts	ref_mv_offs, r18
    10f0:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <ref_mv_offs>

000010f4 <.Loc.8>:
        sts	ref_mv_offs+1, r19
    10f4:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <ref_mv_offs+0x1>

000010f8 <.Loc.9>:

#ifdef AUTO_RH 
 	ldi	r24, hi8(Ref_Tab_Beginn)	; 3
    10f8:	83 e0       	ldi	r24, 0x03	; 3

000010fa <.Loc.10>:
 	cpi	r18, lo8(Ref_Tab_Beginn)	; 232
    10fa:	28 3e       	cpi	r18, 0xE8	; 232

000010fc <.Loc.11>:
 	cpc	r19, r24
    10fc:	38 07       	cpc	r19, r24

000010fe <.Loc.12>:
 	brcs	ad210e 				; if (referenz >= Ref_Tab_Beginn) 
    10fe:	20 f0       	brcs	.+8      	; 0x1108 <ad210e>

00001100 <.Loc.13>:
 	movw	r24, r18
    1100:	c9 01       	movw	r24, r18

00001102 <.Loc.14>:
 	subi	r24, lo8(Ref_Tab_Beginn)	; 232 referenz -= Ref_Tab_Beginn;
    1102:	88 5e       	subi	r24, 0xE8	; 232

00001104 <.Loc.15>:
 	sbci	r25, hi8(Ref_Tab_Beginn)	; 3
    1104:	93 40       	sbci	r25, 0x03	; 3

00001106 <.Loc.16>:
 	rjmp	ad2112 
    1106:	02 c0       	rjmp	.+4      	; 0x110c <ad2112>

00001108 <ad210e>:
ad210e:
 	ldi	r24, 0x00	; referenz = 0;		// limit to begin of table
    1108:	80 e0       	ldi	r24, 0x00	; 0

0000110a <.Loc.18>:
 	ldi	r25, 0x00	; 0
    110a:	90 e0       	ldi	r25, 0x00	; 0

0000110c <ad2112>:
ad2112:
 	ldi	r22, lo8(Ref_Tab_Abstand)	; 50 tabind = referenz / Ref_Tab_Abstand;
    110c:	62 e3       	ldi	r22, 0x32	; 50

0000110e <.Loc.20>:
 	ldi	r23, hi8(Ref_Tab_Abstand)	; 0
    110e:	70 e0       	ldi	r23, 0x00	; 0

00001110 <.Loc.21>:
 	ACALL	__udivmodhi4
    1110:	0e 94 00 38 	call	0x7000	; 0x7000 <__udivmodhi4>

00001114 <.Loc.22>:
;  r22 = tabind = referenz / Ref_Tab_Abstand;
;  r24 =  tabres = referenz % Ref_Tab_Abstand;
 	cpi	r22, 0x08	; if (tabind > 7) 
    1114:	68 30       	cpi	r22, 0x08	; 8

00001116 <.Loc.23>:
 	brcs	ad2120 
    1116:	08 f0       	brcs	.+2      	; 0x111a <ad2120>

00001118 <.Loc.24>:
 	ldi	r22, 0x07	; tabind = 7;		// limit to end of table
    1118:	67 e0       	ldi	r22, 0x07	; 7

0000111a <ad2120>:
ad2120:
; // interpolate the table of factors

	LDIZ	RHtab
    111a:	e7 e6       	ldi	r30, 0x67	; 103
    111c:	f3 e0       	ldi	r31, 0x03	; 3

0000111e <.Loc.26>:
	add	r30, r22
    111e:	e6 0f       	add	r30, r22

00001120 <.Loc.27>:
	adc	r31, zero_reg
    1120:	f1 1d       	adc	r31, r1

00001122 <.Loc.28>:
	add	r30, r22
    1122:	e6 0f       	add	r30, r22

00001124 <.Loc.29>:
	adc	r31, zero_reg
    1124:	f1 1d       	adc	r31, r1

00001126 <.Loc.30>:

 	lpm	r20, Z+		; y1 = pgm_read_word(&RHtab[tabind]);
    1126:	45 91       	lpm	r20, Z+

00001128 <.Loc.31>:
 	lpm	r21, Z+
    1128:	55 91       	lpm	r21, Z+

0000112a <.Loc.32>:
 	lpm	r18, Z+		; y2 = pgm_read_word(&RHtab[tabind+1]);
    112a:	25 91       	lpm	r18, Z+

0000112c <.Loc.33>:
 	lpm	r19, Z+
    112c:	35 91       	lpm	r19, Z+

0000112e <.Loc.34>:
 	ldi	r22, Ref_Tab_Abstand	; 50
    112e:	62 e3       	ldi	r22, 0x32	; 50

00001130 <.Loc.35>:
 	sub	r22, r24		; tabres = Ref_Tab_Abstand-tabres;
    1130:	68 1b       	sub	r22, r24

00001132 <.Loc.36>:
;  // interpolate the table of factors
;  // RHmultip is the interpolated factor to compute capacity from load time with 470k
;; 	ldi	r23, 0x00	; 0
 	sub	r20, r18	; y1 - y2
    1132:	42 1b       	sub	r20, r18

00001134 <.Loc.37>:
 #if FLASHEND > 0x1fff
	sbc	r21, r19	; hi8(y1 - y2) is usually allway zero
    1134:	53 0b       	sbc	r21, r19

00001136 <.Loc.38>:
 #endif
 	mul	r22, r20	; lo8(tabres) * lo8(y1-y2)
    1136:	64 9f       	mul	r22, r20

00001138 <.Loc.39>:
 	movw	r24, r0		; r24:25 = *
    1138:	c0 01       	movw	r24, r0

0000113a <.Loc.40>:
 #if FLASHEND > 0x1fff
 	mul	r22, r21	; lo8(tabres) * hi8(y1-y2)
    113a:	65 9f       	mul	r22, r21

0000113c <.Loc.41>:
 	add	r25, r0		; r25 + lo8(*)
    113c:	90 0d       	add	r25, r0

0000113e <.Loc.42>:
 #endif
;; 	mul	r23, r20	; hi8(tabres) * lo8(y1*y2) , allways zero
;; 	add	r25, r0		; r25 + lo8(*)

 	eor	r1, r1
    113e:	11 24       	eor	r1, r1

00001140 <.Loc.43>:
 	adiw	r24, (Ref_Tab_Abstand/2)	; 25
    1140:	49 96       	adiw	r24, 0x19	; 25

00001142 <.Loc.44>:
 	ldi	r22, lo8(Ref_Tab_Abstand)	; 50
    1142:	62 e3       	ldi	r22, 0x32	; 50

00001144 <.Loc.45>:
 	ldi	r23, hi8(Ref_Tab_Abstand)	; 0
    1144:	70 e0       	ldi	r23, 0x00	; 0

00001146 <.Loc.46>:
 	ACALL	__udivmodhi4	; ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand 
    1146:	0e 94 00 38 	call	0x7000	; 0x7000 <__udivmodhi4>

0000114a <.Loc.47>:
 	add	r22, r18	; + y2
    114a:	62 0f       	add	r22, r18

0000114c <.Loc.48>:
 	adc	r23, r19
    114c:	73 1f       	adc	r23, r19

0000114e <.Loc.49>:
 	sts	RHmultip+1, r23
    114e:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <RHmultip+0x1>

00001152 <.Loc.50>:
 	sts	RHmultip, r22
    1152:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <RHmultip>

00001156 <.Loc.51>:
	ldi	r23, hi8(DEFAULT_RH_FAKT)
 	sts	RHmultip, r22
 	sts	RHmultip+1, r23
#endif 
#ifdef AUTO_CAL
	ldi	r24, lo8(RefDiff)
    1156:	80 e4       	ldi	r24, 0x40	; 64

00001158 <.Loc.52>:
	ldi	r25, hi8(RefDiff)
    1158:	93 e0       	ldi	r25, 0x03	; 3

0000115a <.Loc.53>:
	ACALL	eeprom_read_byte	; (int8_t)eeprom_read_byte((uint8_t *)&RefDiff));
    115a:	0e 94 15 39 	call	0x722a	; 0x722a <eeprom_read_byte>

0000115e <.Loc.54>:
	eor	r25, r25		; set zero for sign extend
    115e:	99 27       	eor	r25, r25

00001160 <.Loc.55>:
        sbrc	r24, 7			; minus?
    1160:	87 fd       	sbrc	r24, 7

00001162 <.Loc.56>:
	com	r25			; yes, set to 0xff
    1162:	90 95       	com	r25

00001164 <.Loc.57>:
        lds	r22, ref_mv		; ADCconfig.U_Bandgap = (ref_mv + (int8_t)eeprom_read_byte((uint8_t *)&RefDiff));
    1164:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <ref_mv>

00001168 <.Loc.58>:
        lds	r23, ref_mv+1
    1168:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <ref_mv+0x1>

0000116c <.Loc.59>:
	add	r24, r22
    116c:	86 0f       	add	r24, r22

0000116e <.Loc.60>:
	adc	r25, r23
    116e:	97 1f       	adc	r25, r23

00001170 <.Loc.61>:
        lds	r25, ref_mv+1
	add	r24, r22
        adc	r25, r23
#endif
#define U_Bandgap 2
        sts	ADCconfig+U_Bandgap+1, r25
    1170:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <ADCconfig+0x3>

00001174 <.Loc.62>:
        sts	ADCconfig+U_Bandgap, r24
    1174:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <ADCconfig+0x2>

00001178 <.Loc.63>:
	sts	adc_internal_reference+1, r25		; adc_internal_reference = ADCconfig.U_Bandgap;
    1178:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <adc_internal_reference+0x1>

0000117c <.Loc.64>:
	sts	adc_internal_reference, r24
    117c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <adc_internal_reference>

00001180 <.Loc.65>:


 	ret
    1180:	08 95       	ret

00001182 <GetRLmultip>:

 .section .text

; unsigned int GetRLmultip(unsigned int cvolt) 
GetRLmultip:
	push    r0
    1182:	0f 92       	push	r0

00001184 <.Loc.1>:
 	ldi	r18, hi8(RL_Tab_Beginn) 	; 1
    1184:	21 e0       	ldi	r18, 0x01	; 1

00001186 <.Loc.2>:
 	cpi	r24, lo8(RL_Tab_Beginn)		; 44
    1186:	8c 32       	cpi	r24, 0x2C	; 44

00001188 <.Loc.3>:
 	cpc	r25, r18
    1188:	92 07       	cpc	r25, r18

0000118a <.Loc.4>:
 	brcc	is_bigger		;if (cvolt >= RL_Tab_Beginn) 
    118a:	10 f4       	brcc	.+4      	; 0x1190 <is_bigger>

0000118c <.Loc.5>:
        ldi	r24, lo8(RL_Tab_Beginn)		; uvolt = 0 = RL_Tab_Begin - RL_Tab_Begin
    118c:	8c e2       	ldi	r24, 0x2C	; 44

0000118e <.Loc.6>:
        ldi	r25, hi8(RL_Tab_Beginn)		; limit to begin of table
    118e:	91 e0       	ldi	r25, 0x01	; 1

00001190 <is_bigger>:
is_bigger:
 	subi	r24, lo8(RL_Tab_Beginn)	;  uvolt = cvolt - RL_Tab_Beginn;
    1190:	8c 52       	subi	r24, 0x2C	; 44

00001192 <.Loc.8>:
 	sbci	r25, hi8(RL_Tab_Beginn)	; 1
    1192:	91 40       	sbci	r25, 0x01	; 1

00001194 <.Loc.9>:

 	ldi	r22, lo8(RL_Tab_Abstand)	; 25
    1194:	69 e1       	ldi	r22, 0x19	; 25

00001196 <.Loc.10>:
 	ldi	r23, hi8(RL_Tab_Abstand)	; 0
    1196:	70 e0       	ldi	r23, 0x00	; 0

00001198 <.Loc.11>:
 	ACALL	__udivmodhi4 	;tabind = uvolt / RL_Tab_Abstand;
    1198:	0e 94 00 38 	call	0x7000	; 0x7000 <__udivmodhi4>

0000119c <.Loc.12>:
;  r24:25 tabres = uvolt % RL_Tab_Abstand;  // r25 allways zero
;  tabres = RL_Tab_Abstand - tabres;
 	ldi	r25, RL_Tab_Abstand	; 25
    119c:	99 e1       	ldi	r25, 0x19	; 25

0000119e <.Loc.13>:
 	cpi	r22, ((RL_Tab_Length/RL_Tab_Abstand)-1)	; if (tabind > ((RL_Tab_Length/RL_Tab_Abstand)-1)) 
    119e:	6b 32       	cpi	r22, 0x2B	; 43

000011a0 <.Loc.14>:
 	brcs	is_lower 
    11a0:	10 f0       	brcs	.+4      	; 0x11a6 <is_lower>

000011a2 <.Loc.15>:
	mov	r25, r24		; tabres = 0 = (RL_Tab_Abstand==tabres) - tabres
    11a2:	98 2f       	mov	r25, r24

000011a4 <.Loc.16>:
 	ldi	r22, (RL_Tab_Length/RL_Tab_Abstand)-1; tabind = (RL_Tab_Length/RL_Tab_Abstand)-1;// limit to end of table
    11a4:	6b e2       	ldi	r22, 0x2B	; 43

000011a6 <is_lower>:
is_lower:
 	sub	r25, r24		; tabres = RL_Tab_Abstand - tabres;
    11a6:	98 1b       	sub	r25, r24

000011a8 <.Loc.18>:

	; r22 = tabind , r25 = tabres

	LDIZ	RLtab
    11a8:	eb eb       	ldi	r30, 0xBB	; 187
    11aa:	f2 e0       	ldi	r31, 0x02	; 2

000011ac <.Loc.19>:
	add	r30, r22		; + tabind
    11ac:	e6 0f       	add	r30, r22

000011ae <.Loc.20>:
	adc	r31, zero_reg
    11ae:	f1 1d       	adc	r31, r1

000011b0 <.Loc.21>:
	add	r30, r22		; + tabind (word access)
    11b0:	e6 0f       	add	r30, r22

000011b2 <.Loc.22>:
	adc	r31, zero_reg
    11b2:	f1 1d       	adc	r31, r1

000011b4 <.Loc.23>:

#ifdef MEM_EEPROM
        push	r25			; save tabres
    11b4:	9f 93       	push	r25

000011b6 <.Loc.24>:
	movw	r24,r30
    11b6:	cf 01       	movw	r24, r30

000011b8 <.Loc.25>:
	ACALL	eeprom_read_byte	; y1 = MEM_read_word(&RLtab[tabind]);
    11b8:	0e 94 15 39 	call	0x722a	; 0x722a <eeprom_read_byte>

000011bc <.Loc.26>:
	mov	r20, r24
    11bc:	48 2f       	mov	r20, r24

000011be <.Loc.27>:
	adiw	r30, 1			; address of high order byte
    11be:	31 96       	adiw	r30, 0x01	; 1

000011c0 <.Loc.28>:
	movw	r24,r30
    11c0:	cf 01       	movw	r24, r30

000011c2 <.Loc.29>:
	ACALL	eeprom_read_byte	; y1 = MEM_read_word(&RLtab[tabind]);
    11c2:	0e 94 15 39 	call	0x722a	; 0x722a <eeprom_read_byte>

000011c6 <.Loc.30>:
	mov	r21, r24
    11c6:	58 2f       	mov	r21, r24

000011c8 <.Loc.31>:
	adiw	r30, 1			; tabind+1
    11c8:	31 96       	adiw	r30, 0x01	; 1

000011ca <.Loc.32>:
	movw	r24,r30
    11ca:	cf 01       	movw	r24, r30

000011cc <.Loc.33>:
	ACALL	eeprom_read_byte	; y2 = MEM_read_word(&RLtab[tabind+1]);
    11cc:	0e 94 15 39 	call	0x722a	; 0x722a <eeprom_read_byte>

000011d0 <.Loc.34>:
	mov	r18, r24
    11d0:	28 2f       	mov	r18, r24

000011d2 <.Loc.35>:
	adiw	r30, 1			; address of high order byte
    11d2:	31 96       	adiw	r30, 0x01	; 1

000011d4 <.Loc.36>:
	movw	r24,r30
    11d4:	cf 01       	movw	r24, r30

000011d6 <.Loc.37>:
	ACALL	eeprom_read_byte	; y2 = MEM_read_word(&RLtab[tabind+1]);
    11d6:	0e 94 15 39 	call	0x722a	; 0x722a <eeprom_read_byte>

000011da <.Loc.38>:
	mov	r19, r24
    11da:	38 2f       	mov	r19, r24

000011dc <.Loc.39>:
        pop	r22			; restore tabres in r22
    11dc:	6f 91       	pop	r22

000011de <.Loc.40>:
 	lpm	r19, Z+
 	mov	r22, r25
#endif
;  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
;; 	ldi	r23, 0x00	; hi8(tabres) allways zero
 	sub	r20, r18	; y1 - y2
    11de:	42 1b       	sub	r20, r18

000011e0 <.Loc.41>:
 	sbc	r21, r19 	; maximum of 3466 need two registers
    11e0:	53 0b       	sbc	r21, r19

000011e2 <.Loc.42>:

 	mul	r22, r20	;lo8(tabres) * lo8(y1-y2)
    11e2:	64 9f       	mul	r22, r20

000011e4 <.Loc.43>:
 	movw	r24, r0		; r24:25 = *
    11e4:	c0 01       	movw	r24, r0

000011e6 <.Loc.44>:
 	mul	r22, r21	;lo8(tabres) * hi8(y1-y2)
    11e6:	65 9f       	mul	r22, r21

000011e8 <.Loc.45>:
 	add	r25, r0		; r25 + lo8(*)
    11e8:	90 0d       	add	r25, r0

000011ea <.Loc.46>:
;; 	mul	r23, r20	;hi8(tabres) * lo8(y1-y2) , allways zero
;; 	add	r25, r0		; r25 + lo8(*)
 	eor	r1, r1
    11ea:	11 24       	eor	r1, r1

000011ec <.Loc.47>:
 	adiw	r24, (RL_Tab_Abstand/2)		; 12
    11ec:	0c 96       	adiw	r24, 0x0c	; 12

000011ee <.Loc.48>:
 	ldi	r22, lo8(RL_Tab_Abstand)	; 25
    11ee:	69 e1       	ldi	r22, 0x19	; 25

000011f0 <.Loc.49>:
 	ldi	r23, hi8(RL_Tab_Abstand)	; 0
    11f0:	70 e0       	ldi	r23, 0x00	; 0

000011f2 <.Loc.50>:
 	ACALL	__udivmodhi4	; ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand 
    11f2:	0e 94 00 38 	call	0x7000	; 0x7000 <__udivmodhi4>

000011f6 <.Loc.51>:
 	add	r22, r18			; + y2
    11f6:	62 0f       	add	r22, r18

000011f8 <.Loc.52>:
 	adc	r23, r19
    11f8:	73 1f       	adc	r23, r19

000011fa <.Loc.53>:
 	movw	r24, r22
    11fa:	cb 01       	movw	r24, r22

000011fc <.Loc.54>:
	pop	r0
    11fc:	0f 90       	pop	r0

000011fe <.Loc.55>:
 	ret
    11fe:	08 95       	ret

00001200 <get_log>:
 .section .text

; // get_log interpolate a table with the function -1000*log(1 - (permil/1000))
; uint16_t get_log(uint16_t permil) {
get_log:
 	push	r28
    1200:	cf 93       	push	r28

00001202 <.Loc.1>:
 	push	r29
    1202:	df 93       	push	r29

00001204 <.Loc.2>:

 	ldi	r18, lo8(Log_Tab_Distance)	;0x14
    1204:	24 e1       	ldi	r18, 0x14	; 20

00001206 <.Loc.3>:
 	ldi	r19, hi8(Log_Tab_Distance)	;0x00	
    1206:	30 e0       	ldi	r19, 0x00	; 0

00001208 <.Loc.4>:
 	movw	r22, r18
    1208:	b9 01       	movw	r22, r18

0000120a <.Loc.5>:
 	call	__udivmodhi4		; tabind = permil / Log_Tab_Distance;	// index to table
    120a:	0e 94 00 38 	call	0x7000	; 0x7000 <__udivmodhi4>

0000120e <.Loc.6>:
 	movw	r26, r24
    120e:	dc 01       	movw	r26, r24

00001210 <.Loc.7>:
;  r26:27 = tabres = permil % Log_Tab_Distance;	// fraction of table distance
;  // interpolate the table of factors
;  y1 = pgm_read_word(&LogTab[tabind]);	// get the lower table value
	LDIZ	LogTab;
    1210:	e9 e7       	ldi	r30, 0x79	; 121
    1212:	f3 e0       	ldi	r31, 0x03	; 3

00001214 <.Loc.8>:
        add	r30, r22
    1214:	e6 0f       	add	r30, r22

00001216 <.Loc.9>:
        adc	r31, r23
    1216:	f7 1f       	adc	r31, r23

00001218 <.Loc.10>:
        add	r30, r22
    1218:	e6 0f       	add	r30, r22

0000121a <.Loc.11>:
	adc	r31, r23	; &LogTab[tabind]
    121a:	f7 1f       	adc	r31, r23

0000121c <.Loc.12>:
 	lpm	r28, Z+		; y1 = pgm_read_word(&LogTab[tabind]);	// get the lower table value
    121c:	c5 91       	lpm	r28, Z+

0000121e <.Loc.13>:
 	lpm	r29, Z+
    121e:	d5 91       	lpm	r29, Z+

00001220 <.Loc.14>:
 	lpm	r20, Z+		; y2 = pgm_read_word(&LogTab[tabind+1]); // get the higher table value
    1220:	45 91       	lpm	r20, Z+

00001222 <.Loc.15>:
 	lpm	r21, Z+
    1222:	55 91       	lpm	r21, Z+

00001224 <.Loc.16>:
;  result = ((y2 - y1) * tabres ) / Log_Tab_Distance + y1; // interpolate
 	sub	r20, r28	;  (y2 - y1) 
    1224:	4c 1b       	sub	r20, r28

00001226 <.Loc.17>:
	sbc	r21, r29	;  hi8(y2 - y1) 
    1226:	5d 0b       	sbc	r21, r29

00001228 <.Loc.18>:
 	mul	r20, r26	; * tabres   (maximum 19)
    1228:	4a 9f       	mul	r20, r26

0000122a <.Loc.19>:
 	movw	r24, r0		;  r24:25 =  ((y2 - y1) * tabres )
    122a:	c0 01       	movw	r24, r0

0000122c <.Loc.20>:
	mul	r20, r27	; hi8(tabres) 
    122c:	4b 9f       	mul	r20, r27

0000122e <.Loc.21>:
	add	r25, r0
    122e:	90 0d       	add	r25, r0

00001230 <.Loc.22>:
	mul	r21, r26	; hi8(y2 - Y1) 
    1230:	5a 9f       	mul	r21, r26

00001232 <.Loc.23>:
	add	r25, r0
    1232:	90 0d       	add	r25, r0

00001234 <.Loc.24>:
 	eor	r1, r1
    1234:	11 24       	eor	r1, r1

00001236 <.Loc.25>:
 	movw	r22, r18	; Log_Tab_Distance
    1236:	b9 01       	movw	r22, r18

00001238 <.Loc.26>:
 	call	__udivmodhi4	;   ((y2 - y1) * tabres ) / Log_Tab_Distance
    1238:	0e 94 00 38 	call	0x7000	; 0x7000 <__udivmodhi4>

0000123c <.Loc.27>:
 	add	r22, r28	;  result = ((y2 - y1) * tabres ) / Log_Tab_Distance + y1; // interpolate
    123c:	6c 0f       	add	r22, r28

0000123e <.Loc.28>:
 	adc	r23, r29
    123e:	7d 1f       	adc	r23, r29

00001240 <.Loc.29>:
 	movw	r24, r22	; return(result);
    1240:	cb 01       	movw	r24, r22

00001242 <.Loc.30>:
 	pop	r29
    1242:	df 91       	pop	r29

00001244 <.Loc.31>:
 	pop	r28
    1244:	cf 91       	pop	r28

00001246 <.Loc.32>:
 	ret
    1246:	08 95       	ret

00001248 <GetESR>:
       	out	_SFR_IO_ADDR(SREG), r0;
	out	_SFR_IO_ADDR(SPL), r28;
#else
 .extern __prologue_saves__
 .extern __epilogue_restores__
	ldi	r26, 30			;
    1248:	ae e1       	ldi	r26, 0x1E	; 30

0000124a <.Loc.1>:
	ldi	r27, 0			;
    124a:	b0 e0       	ldi	r27, 0x00	; 0

0000124c <.Loc.2>:
	ldi	r30, lo8(gs(Retur2))	;
    124c:	ea e2       	ldi	r30, 0x2A	; 42

0000124e <.Loc.3>:
	ldi	r31, hi8(gs(Retur2))	;
    124e:	f9 e0       	ldi	r31, 0x09	; 9

00001250 <.Loc.4>:
	jmp	__prologue_saves__ 	;
    1250:	0c 94 8a 38 	jmp	0x7114	; 0x7114 <__prologue_saves__>

00001254 <Retur2>:

#if TP_MIN > 0
	subi	r22, TP_MIN
	subi	r24, TP_MIN
#endif
	mov	SelectLowPin, r22;
    1254:	66 2e       	mov	r6, r22

00001256 <.Loc.6>:
	mov	SelectHighPin, r24;
    1256:	b8 2e       	mov	r11, r24

00001258 <.Loc.7>:
        add	r24, r22;
    1258:	86 0f       	add	r24, r22

0000125a <.Loc.8>:
	std	Y+1, r24;
    125a:	89 83       	std	Y+1, r24	; 0x01

0000125c <.Loc.9>:

	lds	r18, PartFound;		/* if (PartFound == PART_CAPACITOR) { */
    125c:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <PartFound>

00001260 <.Loc.10>:
	cpi	r18, PART_CAPACITOR;	
    1260:	28 30       	cpi	r18, 0x08	; 8

00001262 <.Loc.11>:
; 	brne	ad_35e4;
	brne	load_max;
    1262:	59 f5       	brne	.+86     	; 0x12ba <load_max>

00001264 <.Loc.12>:
	lds	r18, cap+cval_max;      /* cap_val_nF = cap.cval_max; */
    1264:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <cap+0x4>

00001268 <.Loc.13>:
	lds	r19, cap+cval_max+1;
    1268:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <cap+0x5>

0000126c <.Loc.14>:
	lds	r20, cap+cval_max+2;
    126c:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <cap+0x6>

00001270 <.Loc.15>:
	lds	r21, cap+cval_max+3;
    1270:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <cap+0x7>

00001274 <.Loc.16>:
        sbrc	r21, 7;			/* negativ bit is set */
    1274:	57 fd       	sbrc	r21, 7

00001276 <.Loc.17>:
	rjmp	set_high
    1276:	15 c0       	rjmp	.+42     	; 0x12a2 <set_high>

00001278 <.Loc.18>:
	lds	r17, cap+cpre_max;      /* prefix = cap.cpre_max; */
    1278:	10 91 4f 01 	lds	r17, 0x014F	; 0x80014f <cap+0x13>

0000127c <.Loc.19>:
	rjmp	ad_35ba;
    127c:	09 c0       	rjmp	.+18     	; 0x1290 <ad_35ba>

0000127e <ad_35ac>:

ad_35ac:
	movw	r24, r20;               /* cval /= 10;          // reduce value by factor ten */
    127e:	ca 01       	movw	r24, r20

00001280 <.Loc.21>:
	movw	r22, r18
    1280:	b9 01       	movw	r22, r18

00001282 <.Loc.22>:
	ldi	r18, 0x0A; 10
    1282:	2a e0       	ldi	r18, 0x0A	; 10

00001284 <.Loc.23>:
	mov	r19, zero_reg
    1284:	31 2d       	mov	r19, r1

00001286 <.Loc.24>:
	mov	r20, zero_reg
    1286:	41 2d       	mov	r20, r1

00001288 <.Loc.25>:
	mov	r21, zero_reg
    1288:	51 2d       	mov	r21, r1

0000128a <.Loc.26>:
	call	__udivmodsi4;           /* r18:21 = r22:25  / r18:21 */
    128a:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

0000128e <.Loc.27>:
	subi	r17, 0xFF;              /* prefix++;            // take next decimal prefix */
    128e:	1f 5f       	subi	r17, 0xFF	; 255

00001290 <ad_35ba>:

ad_35ba:
	cpi	r17, -9;                /* while (prefix < -9) { // set cval to nF unit */
    1290:	17 3f       	cpi	r17, 0xF7	; 247

00001292 <.Loc.29>:
	brlt	ad_35ac;                /*  } */
    1292:	ac f3       	brlt	.-22     	; 0x127e <ad_35ac>

00001294 <.Loc.30>:
        brne    load_max;		/* load max value for correction */
    1294:	91 f4       	brne	.+36     	; 0x12ba <load_max>

00001296 <.Loc.31>:


;	cpi	r18, lo8(900/10);       /* if (cap_val_nF < (900/10)) return(0xffff);   //capacity lower than 90 nF */
;	ldi	r22, hi8(900/10)
	cpi	r18, lo8(200/10);       /* if (cap_val_nF < (200/10)) return(0xffff);   //capacity lower than 20 nF */
    1296:	24 31       	cpi	r18, 0x14	; 20

00001298 <.Loc.32>:
	ldi	r22, hi8(200/10)
    1298:	60 e0       	ldi	r22, 0x00	; 0

0000129a <.Loc.33>:
	cpc	r19, r22
    129a:	36 07       	cpc	r19, r22

0000129c <.Loc.34>:
	cpc	r20, zero_reg
    129c:	41 05       	cpc	r20, r1

0000129e <.Loc.35>:
	cpc	r21, zero_reg
    129e:	51 05       	cpc	r21, r1

000012a0 <.Loc.36>:
	brcc	ad_35e4
    12a0:	18 f4       	brcc	.+6      	; 0x12a8 <ad_35e4>

000012a2 <set_high>:
set_high:
	ldi	r24, 0xff;
    12a2:	8f ef       	ldi	r24, 0xFF	; 255

000012a4 <.Loc.38>:
	ldi	r25, 0xff;
    12a4:	9f ef       	ldi	r25, 0xFF	; 255

000012a6 <.Loc.39>:
	rjmp	ad_exit; 
    12a6:	42 c1       	rjmp	.+644    	; 0x152c <ad_exit>

000012a8 <ad_35e4>:
ad_35e4:				/* } */
	cpi	r17, -9;		/* if ((pp > -9) || (cap_val_nF > 32000)) { */
    12a8:	17 3f       	cpi	r17, 0xF7	; 247

000012aa <.Loc.41>:
	brne	load_max;
    12aa:	39 f4       	brne	.+14     	; 0x12ba <load_max>

000012ac <.Loc.42>:
	ldi	r24, lo8(32000);
    12ac:	80 e0       	ldi	r24, 0x00	; 0

000012ae <.Loc.43>:
	cp	r18, r24
    12ae:	28 17       	cp	r18, r24

000012b0 <.Loc.44>:
        ldi	r24, hi8(32000);
    12b0:	8d e7       	ldi	r24, 0x7D	; 125

000012b2 <.Loc.45>:
	cpc	r19, r24;
    12b2:	38 07       	cpc	r19, r24

000012b4 <.Loc.46>:
;	ldi	r24, hlo8(32000);
;	cpc	r20, r24;
	cpc	r20, r1;
    12b4:	41 05       	cpc	r20, r1

000012b6 <.Loc.47>:
;	ldi	r24, hhi8(32000);
;	cpc	r21, r24;
	cpc	r20, r1;
    12b6:	41 05       	cpc	r20, r1

000012b8 <.Loc.48>:
	brcs	store_cvn;
    12b8:	10 f0       	brcs	.+4      	; 0x12be <store_cvn>

000012ba <load_max>:
load_max:
	ldi	r18, lo8(32000);		/* cap_val_nF = 65000 */
    12ba:	20 e0       	ldi	r18, 0x00	; 0

000012bc <.Loc.50>:
	ldi	r19, hi8(32000);
    12bc:	3d e7       	ldi	r19, 0x7D	; 125

000012be <store_cvn>:
;	ldi	r20, hlo8(32000);		/* upper word is allways zero */
;	ldi	r21, hhi8(32000);		/* upper word is allways zero */
store_cvn:
	std	Y+cap_val_nF, r18
    12be:	2c 8b       	std	Y+20, r18	; 0x14

000012c0 <.Loc.52>:
	std	Y+cap_val_nF+1, r19
    12c0:	3d 8b       	std	Y+21, r19	; 0x15

000012c2 <.Loc.53>:
     /* normal ADC-speed, ADC-Clock 8us */
	ldi	r25, (1<<ADEN) | (1<<ADIF) | (1<<ADIE) | AUTO_CLOCK_DIV; /* enable ADC and Interrupt */
	mov	StartADCmsk, r25;
	sts	ADCSRA, StartADCmsk; 	/*  ADCSRA = StartADCmsk;	// enable ADC and Interrupt */
#else
	ldi	r18, (1<<ADSC) | (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; /* enable and start ADC */
    12c2:	26 ed       	ldi	r18, 0xD6	; 214

000012c4 <.Loc.54>:
	mov	StartADCmsk, r18;
    12c4:	a2 2e       	mov	r10, r18

000012c6 <.Loc.55>:
#endif

#if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
	LDIZ	PinRLRHADCtab+6; 	/* LoADC = pgm_read_byte((&PinRLRHADCtab[6])+cap.ca) | TXD_MSK; */
#else
	LDIZ	PinRLRHADCtab+3; 	/* LoADC = pgm_read_byte((&PinRLRHADCtab[3])+cap.ca) | TXD_MSK; */
    12c6:	ee e4       	ldi	r30, 0x4E	; 78
    12c8:	f2 e0       	ldi	r31, 0x02	; 2

000012ca <.Loc.56>:
#endif
	add	r30, SelectLowPin;
    12ca:	e6 0d       	add	r30, r6

000012cc <.Loc.57>:
	adc	r31, zero_reg;
    12cc:	f1 1d       	adc	r31, r1

000012ce <.Loc.58>:
	lpm	r24, Z+;
    12ce:	85 91       	lpm	r24, Z+

000012d0 <.Loc.59>:
	ori	r24, TXD_MSK;
    12d0:	80 60       	ori	r24, 0x00	; 0

000012d2 <.Loc.60>:
	std	Y+LoADC, r24;
    12d2:	8e 87       	std	Y+14, r24	; 0x0e

000012d4 <.Loc.61>:

#if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
	LDIZ	PinRLRHADCtab+6; 	/* HiADC = pgm_read_byte((&PinRLRHADCtab[6])+cap.cb) | TXD_MSK; */
#else
	LDIZ	PinRLRHADCtab+3; 	/* HiADC = pgm_read_byte((&PinRLRHADCtab[3])+cap.cb) | TXD_MSK; */
    12d4:	ee e4       	ldi	r30, 0x4E	; 78
    12d6:	f2 e0       	ldi	r31, 0x02	; 2

000012d8 <.Loc.62>:
#endif
	add	r30, SelectHighPin;
    12d8:	eb 0d       	add	r30, r11

000012da <.Loc.63>:
	adc	r31, zero_reg;
    12da:	f1 1d       	adc	r31, r1

000012dc <.Loc.64>:
	lpm	r24, Z+;
    12dc:	85 91       	lpm	r24, Z+

000012de <.Loc.65>:
	ori	r24, TXD_MSK;
    12de:	80 60       	ori	r24, 0x00	; 0

000012e0 <.Loc.66>:
	std	Y+HiADC, r24;
    12e0:	8f 87       	std	Y+15, r24	; 0x0f

000012e2 <.Loc.67>:

	LDIZ	PinRLRHADCtab;	/* LoPinR_L = pgm_read_byte(&PinRLRHADCtab[cap.ca]);  //R_L mask for LowPin R_L load */
    12e2:	eb e4       	ldi	r30, 0x4B	; 75
    12e4:	f2 e0       	ldi	r31, 0x02	; 2

000012e6 <.Loc.68>:
	add	r30, SelectLowPin;
    12e6:	e6 0d       	add	r30, r6

000012e8 <.Loc.69>:
	adc	r31, zero_reg;
    12e8:	f1 1d       	adc	r31, r1

000012ea <.Loc.70>:
	lpm	LoPinR_L, Z+;
    12ea:	75 90       	lpm	r7, Z+

000012ec <.Loc.71>:

	LDIZ	PinRLRHADCtab;	/* HiPinR_L = pgm_read_byte(&PinRLRHADCtab[cap.cb]);	//R_L mask for HighPin R_L load */
    12ec:	eb e4       	ldi	r30, 0x4B	; 75
    12ee:	f2 e0       	ldi	r31, 0x02	; 2

000012f0 <.Loc.72>:
	add	r30, SelectHighPin;
    12f0:	eb 0d       	add	r30, r11

000012f2 <.Loc.73>:
	adc	r31, zero_reg;
    12f2:	f1 1d       	adc	r31, r1

000012f4 <.Loc.74>:
	lpm	HiPinR_L, Z+;
    12f4:	c5 90       	lpm	r12, Z+

000012f6 <.Loc.75>:
	or	SelectLowPin, r25;
	//  SelectHighPin = (cap.cb | (1<<REFS1) | (0<<REFS0));	// switch ADC to HighPin, Internal Ref. 
	or	SelectHighPin, r25;
#else
	//  SelectLowPin = (cap.ca | (1<<REFS1) | (1<<REFS0));	// switch ADC to LowPin, Internal Ref. 
	ldi	r25, (1<<REFS1)|(1<<REFS0);	0xC0
    12f6:	90 ec       	ldi	r25, 0xC0	; 192

000012f8 <.Loc.76>:
	or	SelectLowPin, r25;
    12f8:	69 2a       	or	r6, r25

000012fa <.Loc.77>:
	//  SelectHighPin = (cap.cb | (1<<REFS1) | (1<<REFS0));	// switch ADC to HighPin, Internal Ref. 
	or	SelectHighPin, r25;
    12fa:	b9 2a       	or	r11, r25

000012fc <.Loc.78>:
#endif


	// Measurement of ESR of capacitors AC Mode
	ldi	r24, 0x01; 	/* sumvolt0 = 1;	// set sum of LowPin voltage to 1 to prevent divide by zero */
    12fc:	81 e0       	ldi	r24, 0x01	; 1

000012fe <.Loc.79>:
	mov	r14, r24;
    12fe:	e8 2e       	mov	r14, r24

00001300 <.Loc.80>:
	mov	r15, zero_reg;
    1300:	f1 2c       	mov	r15, r1

00001302 <.Loc.81>:
	mov	r16, zero_reg;
    1302:	01 2d       	mov	r16, r1

00001304 <.Loc.82>:
	mov	r17, zero_reg;
    1304:	11 2d       	mov	r17, r1

00001306 <.Loc.83>:
	std	Y+sumvolt1, r24;	/* sumvolt1 = 1;	// clear sum of HighPin voltage with current */
    1306:	8e 83       	std	Y+6, r24	; 0x06

00001308 <.Loc.84>:
	//                                // offset is about (x*10*200)/34000 in 0.01 Ohm units
	std	Y+sumvolt1+1, zero_reg;
    1308:	1f 82       	std	Y+7, r1	; 0x07

0000130a <.Loc.85>:
	std	Y+sumvolt1+2, zero_reg;
    130a:	18 86       	std	Y+8, r1	; 0x08

0000130c <.Loc.86>:
	std	Y+sumvolt1+3, zero_reg;
    130c:	19 86       	std	Y+9, r1	; 0x09

0000130e <.Loc.87>:
	std	Y+sumvolt2, zero_reg;	/* sumvolt2 = 0;	// clear sum of HighPin voltage without current */
    130e:	1a 86       	std	Y+10, r1	; 0x0a

00001310 <.Loc.88>:
	std	Y+sumvolt2+1, zero_reg;
    1310:	1b 86       	std	Y+11, r1	; 0x0b

00001312 <.Loc.89>:
	std	Y+sumvolt2+2, zero_reg;
    1312:	1c 86       	std	Y+12, r1	; 0x0c

00001314 <.Loc.90>:
	std	Y+sumvolt2+3, zero_reg;
    1314:	1d 86       	std	Y+13, r1	; 0x0d

00001316 <.Loc.91>:
	std	Y+LowUpCount, zero_reg;
    1316:	18 8e       	std	Y+24, r1	; 0x18

00001318 <.Loc.92>:
	std	Y+HighUpCount, zero_reg;
    1318:	19 8e       	std	Y+25, r1	; 0x19

0000131a <.Loc.93>:
	std	Y+HighTooHigh, zero_reg;
    131a:	1b 8e       	std	Y+27, r1	; 0x1b

0000131c <.Loc.94>:
	std	Y+LowTooHigh, zero_reg;
    131c:	1a 8e       	std	Y+26, r1	; 0x1a

0000131e <.Loc.95>:
	call	EntladePins;	/* EntladePins();	// discharge capacitor */
    131e:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <EntladePins>

00001322 <.Loc.96>:
	ldi	r24, TXD_VAL;
    1322:	80 e0       	ldi	r24, 0x00	; 0

00001324 <.Loc.97>:
	AOUT	ADC_PORT, r24; /* ADC_PORT = TXD_VAL;	// switch ADC-Port to GND */
    1324:	88 b9       	out	0x08, r24	; 8

00001326 <.Loc.98>:
	sts	ADMUX, SelectLowPin;	/* ADMUX = SelectLowPin;	// set Mux input and Voltage Reference to internal 1.1V */
    1326:	60 92 7c 00 	sts	0x007C, r6	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

0000132a <.Loc.99>:
#ifdef NO_AREF_CAP
	call	wait100us;			/* time for voltage stabilization */
    132a:	22 de       	rcall	.-956    	; 0xf70 <wait100us>

0000132c <.Loc.100>:
#else
	call	wait10ms;    		/* time for voltage stabilization with 100nF */
#endif
	/* start voltage should be negativ */
	ldd	r19, Y+HiADC;		/* ADC_DDR = HiADC;	// switch High Pin to GND */
    132c:	3f 85       	ldd	r19, Y+15	; 0x0f

0000132e <.Loc.101>:
	AOUT	ADC_DDR, r19;		/* switch High Pin to GND */
    132e:	37 b9       	out	0x07, r19	; 7

00001330 <.Loc.102>:
	AOUT	R_PORT, LoPinR_L	/* r7 */
    1330:	75 b8       	out	0x05, r7	; 5

00001332 <.Loc.103>:
	AOUT	R_DDR, LoPinR_L		/* r7 */
    1332:	74 b8       	out	0x04, r7	; 4

00001334 <.Loc.104>:
	ldi	r21, (HALF_PULSE_LENGTH_TICS/3)
    1334:	52 e0       	ldi	r21, 0x02	; 2

00001336 <plop1>:
plop1:
	dec	r21
    1336:	5a 95       	dec	r21

00001338 <.Loc.106>:
	brne	plop1
    1338:	f1 f7       	brne	.-4      	; 0x1336 <plop1>

0000133a <.Loc.107>:
	...

0000133c <.Loc.108>:
	...

0000133e <.Loc.109>:
	nop
#endif
#if (HALF_PULSE_LENGTH_TICS % 3) > 0
	nop
#endif
	AOUT	R_DDR, zero_reg;	/* R_DDR = 0 */
    133e:	14 b8       	out	0x04, r1	; 4

00001340 <.Loc.110>:
	AOUT	R_PORT, zero_reg;	/* R_PORT = 0 */
    1340:	15 b8       	out	0x05, r1	; 5

00001342 <.Loc.111>:

	   // Measurement frequency is given by sum of ADC-Reads < 1116 Hz for normal ADC speed.
	   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after real start of conversion.
	   // Real ADC-conversion is started with the next ADC-Clock (125kHz) after setting the ADSC bit.
	eor	r13, r13;			/* for(ii=0;ii<MAX_CNT;ii++) { */
    1342:	dd 24       	eor	r13, r13

00001344 <esr_loop>:
						// That will cause too high voltage without current.
	//         adcv[0] = ADCW;		// Voltage LowPin with current
	//         ADMUX = SelectHighPin;
	      /* ********* Forward direction, connect Low side with GND *********** */
esr_loop:
	ldd	r19, Y+LoADC;
    1344:	3e 85       	ldd	r19, Y+14	; 0x0e

00001346 <.Loc.113>:
	AOUT	ADC_DDR, r19;		/* ADC_DDR = LoADC;	// switch Low-Pin to output (GND) */
    1346:	37 b9       	out	0x07, r19	; 7

00001348 <.Loc.114>:
	AOUT	R_PORT, LoPinR_L;	/* R_PORT = LoPinR_L (r7) */
    1348:	75 b8       	out	0x05, r7	; 5

0000134a <.Loc.115>:
	AOUT	R_DDR, LoPinR_L;	/* R_DDR = LoPinR_L (r7) */
    134a:	74 b8       	out	0x04, r7	; 4

0000134c <.Loc.116>:
	sts	ADMUX, SelectLowPin;		/* ADMUX = SelectLowPin; */
    134c:	60 92 7c 00 	sts	0x007C, r6	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

00001350 <.Loc.117>:

	wdr	;				/* wdt_reset(); */
    1350:	a8 95       	wdr

00001352 <.Loc.118>:
;=#=	StartADCwait			/* start ADC and wait */
	StartADCwait			/* start ADC and wait */
    1352:	a0 92 7a 00 	sts	0x007A, r10	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1356:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    135a:	86 fd       	sbrc	r24, 6
    135c:	fc cf       	rjmp	.-8      	; 0x1356 <.Loc.118+0x4>

0000135e <L0^A>:
	lds	adcv0L, ADCW;			/* adcv[0] = ADCW;	// Voltage LowPin reference */
    135e:	20 90 78 00 	lds	r2, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>

00001362 <.Loc.120>:
	lds	adcv0H, ADCW+1;
    1362:	30 90 79 00 	lds	r3, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>

00001366 <.Loc.121>:
	sts	ADMUX, SelectHighPin;		/* ADMUX = SelectHighPin; */
    1366:	b0 92 7c 00 	sts	0x007C, r11	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

0000136a <.Loc.122>:

	mov	r20, HiPinR_L
    136a:	4c 2d       	mov	r20, r12

0000136c <.Loc.123>:
	rcall	strtADC_pulse		; start ADC, generate pulse and wait 
    136c:	e3 d0       	rcall	.+454    	; 0x1534 <strtADC_pulse>

0000136e <.Loc.124>:

	lds	r18, ADCW;		/* adcv[1] = ADCW;	// Voltage HighPin with current */
    136e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>

00001372 <.Loc.125>:
	lds	r19, ADCW+1;
    1372:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>

00001376 <.Loc.126>:
	sts	ADCSRA, StartADCmsk; 	/*  ADCSRA = StartADCmsk;	// enable ADC and Interrupt */
#endif

;=======

	std	Y+adcvv1, r18;
    1376:	28 8b       	std	Y+16, r18	; 0x10

00001378 <.Loc.127>:
	std	Y+adcvv1+1, r19;
    1378:	39 8b       	std	Y+17, r19	; 0x11

0000137a <.Loc.128>:

	      /* ********* Reverse direction, connect High side with GND *********** */
	ldd	r19, Y+HiADC;		/* ADC_DDR = HiADC;	// switch High Pin to GND */
    137a:	3f 85       	ldd	r19, Y+15	; 0x0f

0000137c <.Loc.129>:
	AOUT	ADC_DDR, r19;		/* ADC_DDR = HiADC;	// switch High-Pin to output (GND) */
    137c:	37 b9       	out	0x07, r19	; 7

0000137e <.Loc.130>:
	AOUT	R_PORT, HiPinR_L;	/* R_PORT = HiPinR_L (r12);	// switch R-Port to VCC */
    137e:	c5 b8       	out	0x05, r12	; 5

00001380 <.Loc.131>:
	AOUT	R_DDR, HiPinR_L;	/* R_DDR = HiPinR_L (r12);	// switch R_L port for HighPin to output (VCC) */
    1380:	c4 b8       	out	0x04, r12	; 4

00001382 <.Loc.132>:

	wdr	;			/* wdt_reset(); */
    1382:	a8 95       	wdr

00001384 <.Loc.133>:
	sts	ADMUX, SelectHighPin;	/* ADMUX = SelectHighPin; */
    1384:	b0 92 7c 00 	sts	0x007C, r11	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

00001388 <.Loc.134>:

;=#=	StartADCwait		/* start ADC and wait */
	StartADCwait		/* start ADC and wait */
    1388:	a0 92 7a 00 	sts	0x007A, r10	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    138c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1390:	86 fd       	sbrc	r24, 6
    1392:	fc cf       	rjmp	.-8      	; 0x138c <.Loc.134+0x4>

00001394 <L0^A>:

	lds	r22, ADCW;         	/* adcv[2] = ADCW;	// Reverse Reference Voltage HighPin  */
    1394:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>

00001398 <.Loc.136>:
	lds	r23, ADCW+1;
    1398:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>

0000139c <.Loc.137>:
	sts	ADMUX, SelectLowPin;	/*  ADMUX = SelectLowPin; */
    139c:	60 92 7c 00 	sts	0x007C, r6	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

000013a0 <.Loc.138>:
	// ****** Polling mode big cap
	mov	r20, LoPinR_L
    13a0:	47 2d       	mov	r20, r7

000013a2 <.Loc.139>:
	rcall	strtADC_pulse		; start ADC, generate pulse and wait 
    13a2:	c8 d0       	rcall	.+400    	; 0x1534 <strtADC_pulse>

000013a4 <.Loc.140>:

	lds	r20, ADCW;		/* adcv[3] = ADCW;	//  Voltage LowPin with current */
    13a4:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>

000013a8 <.Loc.141>:
	lds	r21, ADCW+1;
    13a8:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>

000013ac <.Loc.142>:
#ifdef ADC_Sleep_Mode
	sts	ADCSRA, StartADCmsk; 	/*  ADCSRA = StartADCmsk;	// enable ADC and Interrupt */
#endif

	AOUT	R_DDR, zero_reg; 	/* R_DDR = 0; // switch current off */
    13ac:	14 b8       	out	0x04, r1	; 4

000013ae <.Loc.143>:

	movw	r24, r22;		/*  adcv[2] */
    13ae:	cb 01       	movw	r24, r22

000013b0 <.Loc.144>:
	add	r24, adcv0L;		/* adcv[0] + adcv[2] // add sum of both LowPin voltages with current */
    13b0:	82 0d       	add	r24, r2

000013b2 <.Loc.145>:
	adc	r25, adcv0H;
    13b2:	93 1d       	adc	r25, r3

000013b4 <.Loc.146>:

	add	r14, r24;		/* r14:17 = sumvolt0 += (adcv[0] + adcv[2]); */
    13b4:	e8 0e       	add	r14, r24

000013b6 <.Loc.147>:
	adc	r15, r25;
    13b6:	f9 1e       	adc	r15, r25

000013b8 <.Loc.148>:
	adc	r16, zero_reg;
    13b8:	01 1d       	adc	r16, r1

000013ba <.Loc.149>:
	adc	r17, zero_reg;
    13ba:	11 1d       	adc	r17, r1

000013bc <.Loc.150>:
	std	Y+sumvolt0, r14;
    13bc:	ea 82       	std	Y+2, r14	; 0x02

000013be <.Loc.151>:
	std	Y+sumvolt0+1, r15;
    13be:	fb 82       	std	Y+3, r15	; 0x03

000013c0 <.Loc.152>:
	std	Y+sumvolt0+2, r16;
    13c0:	0c 83       	std	Y+4, r16	; 0x04

000013c2 <.Loc.153>:
	std	Y+sumvolt0+3, r17;
    13c2:	1d 83       	std	Y+5, r17	; 0x05

000013c4 <.Loc.154>:
	ldd	r24, Y+adcvv1;		/* add HighPin voltages with current */
    13c4:	88 89       	ldd	r24, Y+16	; 0x10

000013c6 <.Loc.155>:
	ldd	r25, Y+adcvv1+1; 
    13c6:	99 89       	ldd	r25, Y+17	; 0x11

000013c8 <.Loc.156>:
	add	r24, r20;		/* adcv[1] + adcv[3] */
    13c8:	84 0f       	add	r24, r20

000013ca <.Loc.157>:
	adc	r25, r21;
    13ca:	95 1f       	adc	r25, r21

000013cc <.Loc.158>:
	ldd	r18, Y+sumvolt1;	/* sumvolt1 += (adcv[1] + adcv[3]); */
    13cc:	2e 81       	ldd	r18, Y+6	; 0x06

000013ce <.Loc.159>:
	ldd	r19, Y+sumvolt1+1;
    13ce:	3f 81       	ldd	r19, Y+7	; 0x07

000013d0 <.Loc.160>:
	ldd	r22, Y+sumvolt1+2;
    13d0:	68 85       	ldd	r22, Y+8	; 0x08

000013d2 <.Loc.161>:
	ldd	r23, Y+sumvolt1+3;
    13d2:	79 85       	ldd	r23, Y+9	; 0x09

000013d4 <.Loc.162>:
	add	r18, r24;
    13d4:	28 0f       	add	r18, r24

000013d6 <.Loc.163>:
	adc	r19, r25;
    13d6:	39 1f       	adc	r19, r25

000013d8 <.Loc.164>:
	adc	r22, zero_reg;
    13d8:	61 1d       	adc	r22, r1

000013da <.Loc.165>:
	adc	r23, zero_reg;
    13da:	71 1d       	adc	r23, r1

000013dc <.Loc.166>:
	std	Y+sumvolt1, r18;
    13dc:	2e 83       	std	Y+6, r18	; 0x06

000013de <.Loc.167>:
	std	Y+sumvolt1+1, r19;
    13de:	3f 83       	std	Y+7, r19	; 0x07

000013e0 <.Loc.168>:
	std	Y+sumvolt1+2, r22;
    13e0:	68 87       	std	Y+8, r22	; 0x08

000013e2 <.Loc.169>:
	std	Y+sumvolt1+3, r23;
    13e2:	79 87       	std	Y+9, r23	; 0x09

000013e4 <.Loc.170>:

/*===================================================================================================*/
/*      Range Check for voltages  */
  	/* Y+adcvv1 is still the voltage of forward direction, r20:21 the voltage of reverse direction */
	ldi	r18, lo8(50);
    13e4:	22 e3       	ldi	r18, 0x32	; 50

000013e6 <.Loc.171>:
	cp	r18, r20;
    13e6:	24 17       	cp	r18, r20

000013e8 <.Loc.172>:
	cpc	zero_reg, r21;
    13e8:	15 06       	cpc	r1, r21

000013ea <.Loc.173>:
	brcs	is_ok1;		/* r20:21 >= 50 */
    13ea:	48 f0       	brcs	.+18     	; 0x13fe <is_ok1>

000013ec <.Loc.174>:
	AOUT	R_PORT, LoPinR_L;	/* R_PORT = LoPinR_L (r7);  */
    13ec:	75 b8       	out	0x05, r7	; 5

000013ee <.Loc.175>:
	AOUT	R_DDR, LoPinR_L;	/* R_DDR = LoPinR_L (r7);	// switch LowPin with 680 Ohm to VCC */
    13ee:	74 b8       	out	0x04, r7	; 4

000013f0 <.Loc.176>:
	call	wait1us;			/* additional charge the capacitor */
    13f0:	c9 dd       	rcall	.-1134   	; 0xf84 <wait1us>

000013f2 <.Loc.177>:
	AOUT	R_DDR, zero_reg; 	// switch current off
    13f2:	14 b8       	out	0x04, r1	; 4

000013f4 <.Loc.178>:
	AOUT	R_PORT, zero_reg; 
    13f4:	15 b8       	out	0x05, r1	; 5

000013f6 <.Loc.179>:
	ldd	r24, Y+LowUpCount; 	/* count additional load pulses at Low side */
    13f6:	88 8d       	ldd	r24, Y+24	; 0x18

000013f8 <.Loc.180>:
	inc	r24;
    13f8:	83 95       	inc	r24

000013fa <.Loc.181>:
	std	Y+LowUpCount, r24;
    13fa:	88 8f       	std	Y+24, r24	; 0x18

000013fc <.Loc.182>:
	rjmp	is_ok1b;
    13fc:	07 c0       	rjmp	.+14     	; 0x140c <is_ok1b>

000013fe <is_ok1>:
is_ok1:
	cpi	r20, lo8(1000);
    13fe:	48 3e       	cpi	r20, 0xE8	; 232

00001400 <.Loc.184>:
        ldi	r23, hi8(1000);
    1400:	73 e0       	ldi	r23, 0x03	; 3

00001402 <.Loc.185>:
	cpc	r21, r23;
    1402:	57 07       	cpc	r21, r23

00001404 <.Loc.186>:
        brcs	is_ok1b;			/* voltage reverse direction < 1000 */
    1404:	18 f0       	brcs	.+6      	; 0x140c <is_ok1b>

00001406 <.Loc.187>:
	ldd	r24, Y+LowTooHigh; 	/* count  pulses with too high voltage at Low side */
    1406:	8a 8d       	ldd	r24, Y+26	; 0x1a

00001408 <.Loc.188>:
	inc	r24;
    1408:	83 95       	inc	r24

0000140a <.Loc.189>:
	std	Y+LowTooHigh, r24;
    140a:	8a 8f       	std	Y+26, r24	; 0x1a

0000140c <is_ok1b>:
is_ok1b:
	ldd	r24, Y+adcvv1;
    140c:	88 89       	ldd	r24, Y+16	; 0x10

0000140e <.Loc.191>:
	ldd	r25, Y+adcvv1+1;
    140e:	99 89       	ldd	r25, Y+17	; 0x11

00001410 <.Loc.192>:
	cp	r18, r24;
    1410:	28 17       	cp	r18, r24

00001412 <.Loc.193>:
	cpc	zero_reg, r25;	/* adcvv1 >= 50 */
    1412:	19 06       	cpc	r1, r25

00001414 <.Loc.194>:
	brcs	is_ok2;
    1414:	58 f0       	brcs	.+22     	; 0x142c <is_ok2>

00001416 <.Loc.195>:
	ldd	r19, Y+LoADC;
    1416:	3e 85       	ldd	r19, Y+14	; 0x0e

00001418 <.Loc.196>:
	AOUT	ADC_DDR, r19;		/* ADC_DDR = LoADC;	// switch Low-Pin to output (GND) */
    1418:	37 b9       	out	0x07, r19	; 7

0000141a <.Loc.197>:
	AOUT	R_PORT, HiPinR_L;	/* R_PORT = HiPinR_L (r12);	// switch R-Port to VCC */
    141a:	c5 b8       	out	0x05, r12	; 5

0000141c <.Loc.198>:
	AOUT	R_DDR, HiPinR_L;	/* R_DDR = HiPinR_L (r12);	// switch R_L port for HighPin to output (VCC) */
    141c:	c4 b8       	out	0x04, r12	; 4

0000141e <.Loc.199>:
	call	wait1us;			/* additional charge the capacitor */
    141e:	b2 dd       	rcall	.-1180   	; 0xf84 <wait1us>

00001420 <.Loc.200>:
;##	DelayBigCap;			/* wait the time defined by macro */
	AOUT	R_DDR, zero_reg;	/* R_DDR = 0; // switch current off,  SH is 1.5 ADC clock behind real start */
    1420:	14 b8       	out	0x04, r1	; 4

00001422 <.Loc.201>:
	AOUT	R_PORT, zero_reg;	/* R_PORT = 0; */
    1422:	15 b8       	out	0x05, r1	; 5

00001424 <.Loc.202>:
	ldd	r24, Y+HighUpCount;	/* count additional load pulses at High side */
    1424:	89 8d       	ldd	r24, Y+25	; 0x19

00001426 <.Loc.203>:
	inc	r24;
    1426:	83 95       	inc	r24

00001428 <.Loc.204>:
	std	Y+HighUpCount, r24;
    1428:	89 8f       	std	Y+25, r24	; 0x19

0000142a <.Loc.205>:
	rjmp	is_ok2b;
    142a:	07 c0       	rjmp	.+14     	; 0x143a <is_ok2b>

0000142c <is_ok2>:
is_ok2:
	cpi	r24, lo8(1000);
    142c:	88 3e       	cpi	r24, 0xE8	; 232

0000142e <.Loc.207>:
        ldi	r23, hi8(1000);
    142e:	73 e0       	ldi	r23, 0x03	; 3

00001430 <.Loc.208>:
	cpc	r25, r23;
    1430:	97 07       	cpc	r25, r23

00001432 <.Loc.209>:
        brcs	is_ok2b;			/* voltage forward direction < 1000 */
    1432:	18 f0       	brcs	.+6      	; 0x143a <is_ok2b>

00001434 <.Loc.210>:
	ldd	r24, Y+HighTooHigh; 	/* count  pulses with too high voltage at High side */
    1434:	8b 8d       	ldd	r24, Y+27	; 0x1b

00001436 <.Loc.211>:
	inc	r24;
    1436:	83 95       	inc	r24

00001438 <.Loc.212>:
	std	Y+HighTooHigh, r24;
    1438:	8b 8f       	std	Y+27, r24	; 0x1b

0000143a <is_ok2b>:
is_ok2b:
/*===================================================================================================*/
	inc	r13;			/* for(    ;ii<MAX_CNT;ii++)  */
    143a:	d3 94       	inc	r13

0000143c <.Loc.214>:
	mov	r21, r13;
    143c:	5d 2d       	mov	r21, r13

0000143e <.Loc.215>:
	cpi	r21, MAX_CNT;
    143e:	5f 3f       	cpi	r21, 0xFF	; 255

00001440 <.Loc.216>:
	breq	ad_38ac;
    1440:	49 f0       	breq	.+18     	; 0x1454 <ad_38ac>

00001442 <.Loc.217>:
#if FLASHEND > 0x3fff
  /* use additional 470k only with processors with more than 16k */
        cpi	r21, MAX_CNT/2;
    1442:	5f 37       	cpi	r21, 0x7F	; 127

00001444 <.Loc.218>:
        brne	jesr_loop
    1444:	31 f4       	brne	.+12     	; 0x1452 <jesr_loop>

00001446 <.Loc.219>:
	add	r30, r21;
	adc	r31, zero_reg;
	lpm	r21, Z+;
	add	LoPinR_L, r21		; enable also the 470k resistor
 #else
	mov	r21, HiPinR_L
    1446:	5c 2d       	mov	r21, r12

00001448 <.Loc.220>:
	add	r21, r21	; quick and dirty: usually is double HiPinR_H
    1448:	55 0f       	add	r21, r21

0000144a <.Loc.221>:
	add	HiPinR_L, r21
    144a:	c5 0e       	add	r12, r21

0000144c <.Loc.222>:
	mov	r21, LoPinR_L
    144c:	57 2d       	mov	r21, r7

0000144e <.Loc.223>:
	add	r21, r21	; quick and dirty: usually is double LoPinR_H
    144e:	55 0f       	add	r21, r21

00001450 <.Loc.224>:
	add	LoPinR_L, r21
    1450:	75 0e       	add	r7, r21

00001452 <jesr_loop>:
 #endif
jesr_loop:
#endif
	rjmp	esr_loop;		/* } // end for */
    1452:	78 cf       	rjmp	.-272    	; 0x1344 <esr_loop>

00001454 <ad_38ac>:

#if RRpinMI == PIN_RM
	ldi	r18, lo8(PIN_RM*10);
	ldi	r19, hi8(PIN_RM*10);
#else
	lds	r4, RRpinMI;		/*  pin_rmi */
    1454:	40 90 17 01 	lds	r4, 0x0117	; 0x800117 <pin_rmi>

00001458 <.Loc.227>:
	lds	r5, RRpinMI+1;
    1458:	50 90 18 01 	lds	r5, 0x0118	; 0x800118 <pin_rmi+0x1>

0000145c <.Loc.228>:
	add	r4, r4;		RRpinMI*2
    145c:	44 0c       	add	r4, r4

0000145e <.Loc.229>:
	adc	r5, r5;
    145e:	55 1c       	adc	r5, r5

00001460 <.Loc.230>:
	movw	r18, r4;
    1460:	92 01       	movw	r18, r4

00001462 <.Loc.231>:
	ldi	r30, 4;
    1462:	e4 e0       	ldi	r30, 0x04	; 4

00001464 <ad_2r>:
ad_2r:
	add	r18, r4;		+ 4*(2*RRpinMI)
    1464:	24 0d       	add	r18, r4

00001466 <.Loc.233>:
	adc	r19, r5;
    1466:	35 1d       	adc	r19, r5

00001468 <.Loc.234>:
	dec	r30;
    1468:	ea 95       	dec	r30

0000146a <.Loc.235>:
	brne	ad_2r;			add next (2*RRpinMI)
    146a:	e1 f7       	brne	.-8      	; 0x1464 <ad_2r>

0000146c <.Loc.236>:
#endif
	movw	r4, r18;		/* r4:5 = 10 * RRpinMI */
    146c:	29 01       	movw	r4, r18

0000146e <.Loc.237>:
	movw	r10, r14;		/* r10:13 = r14:17 = sumvolt0 */
    146e:	57 01       	movw	r10, r14

00001470 <.Loc.238>:
	movw	r12, r16;
    1470:	68 01       	movw	r12, r16

00001472 <.Loc.239>:

	ldd	r6, Y+sumvolt1;
    1472:	6e 80       	ldd	r6, Y+6	; 0x06

00001474 <.Loc.240>:
	ldd	r7, Y+sumvolt1+1;
    1474:	7f 80       	ldd	r7, Y+7	; 0x07

00001476 <.Loc.241>:
	ldd	r8, Y+sumvolt1+2;
    1476:	88 84       	ldd	r8, Y+8	; 0x08

00001478 <.Loc.242>:
	ldd	r9, Y+sumvolt1+3;
    1478:	99 84       	ldd	r9, Y+9	; 0x09

0000147a <.Loc.243>:
/* ############################################################ */
	lds	r18, PartFound;		/* if (PartFound == PART_CAPACITOR) { */
    147a:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <PartFound>

0000147e <.Loc.244>:
	cpi	r18, PART_CAPACITOR;	
    147e:	28 30       	cpi	r18, 0x08	; 8

00001480 <.Loc.245>:
 	brne	no_sub;			/* it is not a capacitor */
    1480:	c1 f4       	brne	.+48     	; 0x14b2 <no_sub>

00001482 <.Loc.246>:
/* Aproximation of 5000*(1 - exp(13.5e-6/(cap_val_nF*1.e-9*(0.1*(PIN_RM+PIN_RP+R_L_VAL)))) - 2500*(1 - exp(-27e-6/(cap_val_nF*1.e-9*(0.1*(PIN_RM+PIN_RP+R_L_VAL))))) */
/*  is done by ((6744116/(PIN_RM+PIN_RP+R_L_VAL))*(6744116/(PIN_RM+PIN_RP+R_L_VAL))) / (cap_val_nF * (cap_val_nF + (137180/(PIN_RM+PIN_RP+R_L_VAL)))) */
/*  is done by 872520 / (cap_val_nF * (cap_val_nF + 19)) */
; #define FAKTOR_ESR (9537620/(PIN_RM+PIN_RP+R_L_VAL))

	ldd	r22, Y+cap_val_nF;	/* sumvolt1 -= (1745098UL*MAX_CNT) / (cap_val_nF * (cap_val_nF + 19)); */
    1482:	6c 89       	ldd	r22, Y+20	; 0x14

00001484 <.Loc.247>:
	ldd	r23, Y+cap_val_nF+1;
    1484:	7d 89       	ldd	r23, Y+21	; 0x15

00001486 <.Loc.248>:
;	ldd	r24, Y+cap_val_nF+2;
	mov	r24, r1			/* upper bits of cap_val_nF are allway zero */
    1486:	81 2d       	mov	r24, r1

00001488 <.Loc.249>:
;	ldd	r25, Y+cap_val_nF+3;
	mov	r25, r1			/* upper bits of cap_val_nF are allway zero */
    1488:	91 2d       	mov	r25, r1

0000148a <.Loc.250>:
;#define FAKTOR_ESR (780000/(PIN_RM+PIN_RP+R_L_VAL))	/* 127 */
 #else
;#define FAKTOR_ESR (920000/(PIN_RM+PIN_RP+R_L_VAL))	/* 127 */
;#define CAP_OFFSET (433200/(PIN_RM+PIN_RP+R_L_VAL))	/* 60 nF */
 #endif
      	subi	r22, lo8(CAP_OFFSET); 0xED; 237
    148a:	65 50       	subi	r22, 0x05	; 5

0000148c <.Loc.251>:
      	sbci	r23, hi8(CAP_OFFSET); 0xFF; 255
    148c:	70 40       	sbci	r23, 0x00	; 0

0000148e <.Loc.252>:
      	sbci	r24, hlo8(CAP_OFFSET); 0xFF; 255
    148e:	80 40       	sbci	r24, 0x00	; 0

00001490 <.Loc.253>:
      	sbci	r25, hhi8(CAP_OFFSET); 0xFF; 255
    1490:	90 40       	sbci	r25, 0x00	; 0

00001492 <.Loc.254>:
	movw	r18, r22;		/* r18:21 = r22:25 = (cap_val_nF-60); */
    1492:	9b 01       	movw	r18, r22

00001494 <.Loc.255>:
	movw	r20, r24;
    1494:	ac 01       	movw	r20, r24

00001496 <.Loc.256>:
	call	__mulsi3;		/* (cap_val_nF - 60) * (cap_val_nF - 60) */
    1496:	0e 94 e5 37 	call	0x6fca	; 0x6fca <__mulsi3>

0000149a <.Loc.257>:

       	movw	r18, r22;
    149a:	9b 01       	movw	r18, r22

0000149c <.Loc.258>:
       	movw	r20, r24;
    149c:	ac 01       	movw	r20, r24

0000149e <.Loc.259>:
       	ldi	r22, lo8(FAKTOR_ESR*FAKTOR_ESR*MAX_CNT); 0x36; 54
    149e:	60 e7       	ldi	r22, 0x70	; 112

000014a0 <.Loc.260>:
       	ldi	r23, hi8(FAKTOR_ESR*FAKTOR_ESR*MAX_CNT); 0x29; 41
    14a0:	79 e7       	ldi	r23, 0x79	; 121

000014a2 <.Loc.261>:
       	ldi	r24, hlo8(FAKTOR_ESR*FAKTOR_ESR*MAX_CNT); 0x86; 134
    14a2:	86 e1       	ldi	r24, 0x16	; 22

000014a4 <.Loc.262>:
       	ldi	r25, hhi8(FAKTOR_ESR*FAKTOR_ESR*MAX_CNT); 0x1A; 26
    14a4:	90 e0       	ldi	r25, 0x00	; 0

000014a6 <.Loc.263>:
	call	__udivmodsi4;
    14a6:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

000014aa <.Loc.264>:
	sub	r6, r18
    14aa:	62 1a       	sub	r6, r18

000014ac <.Loc.265>:
	sbc	r7, r19
    14ac:	73 0a       	sbc	r7, r19

000014ae <.Loc.266>:
	sbc	r8, r20
    14ae:	84 0a       	sbc	r8, r20

000014b0 <.Loc.267>:
	sbc	r9, r21
    14b0:	95 0a       	sbc	r9, r21

000014b2 <no_sub>:
no_sub:				/* } */
/* ############################################################ */

	cp	r10, r6;		/* if (sumvolt1 > sumvolt0) {  */
    14b2:	a6 14       	cp	r10, r6

000014b4 <.Loc.269>:
	cpc	r11, r7;
    14b4:	b7 04       	cpc	r11, r7

000014b6 <.Loc.270>:
	cpc	r12, r8;
    14b6:	c8 04       	cpc	r12, r8

000014b8 <.Loc.271>:
	cpc	r13, r9;
    14b8:	d9 04       	cpc	r13, r9

000014ba <.Loc.272>:
	brcc	ad_396c;
    14ba:	28 f4       	brcc	.+10     	; 0x14c6 <ad_396c>

000014bc <.Loc.273>:
	sub	r6, r10;		/* sumvolt1 -= sumvolt0;	// difference HighPin - LowPin Voltage with current */
    14bc:	6a 18       	sub	r6, r10

000014be <.Loc.274>:
	sbc	r7, r11;
    14be:	7b 08       	sbc	r7, r11

000014c0 <.Loc.275>:
	sbc	r8, r12;
    14c0:	8c 08       	sbc	r8, r12

000014c2 <.Loc.276>:
	sbc	r9, r13;
    14c2:	9d 08       	sbc	r9, r13

000014c4 <.Loc.277>:
	rjmp	ad_3972;		/* } else { */
    14c4:	03 c0       	rjmp	.+6      	; 0x14cc <ad_3972>

000014c6 <ad_396c>:
ad_396c:
	eor	r6, r6;			/* sumvolt1 = 0; */
    14c6:	66 24       	eor	r6, r6

000014c8 <.Loc.279>:
	eor	r7, r7
    14c8:	77 24       	eor	r7, r7

000014ca <.Loc.280>:
	movw	r8, r6
    14ca:	43 01       	movw	r8, r6

000014cc <ad_3972>:
	ldi	r20, '#';
	ldi	r18, 4	;
	call	DisplayValue16;
	call	wait2s
#endif
	movw	r22, r4
    14cc:	b2 01       	movw	r22, r4

000014ce <.Loc.282>:
	ldi	r24, 0x00;
    14ce:	80 e0       	ldi	r24, 0x00	; 0

000014d0 <.Loc.283>:
	ldi	r25, 0x00;	/*  r22:25 = 10 * (unsigned long)RRpinMI)  */
    14d0:	90 e0       	ldi	r25, 0x00	; 0

000014d2 <.Loc.284>:
	      // mean voltage at the capacitor is higher with current
	      // sumvolt0 is the sum of voltages at LowPin, caused by output resistance of Port
	      // RRpinMI is the port output resistance in 0.1 Ohm units.
	      // we scale up the difference voltage with 10 to get 0.01 Ohm units of ESR
		/* esrvalue = (sumvolt1 * 10 * (unsigned long)RRpinMI) / sumvolt0; */
	movw	r18, r6;		/* r18:21 = r6:9 = sumvolt1 */
    14d2:	93 01       	movw	r18, r6

000014d4 <.Loc.285>:
	movw	r20, r8;
    14d4:	a4 01       	movw	r20, r8

000014d6 <.Loc.286>:
	call	__mulsi3;		/* r22:25 = r22:25 * r18:21 */
    14d6:	0e 94 e5 37 	call	0x6fca	; 0x6fca <__mulsi3>

000014da <.Loc.287>:
	movw	r18, r10;	/* r18:21 = r10:13 = sumvolt0 */
    14da:	95 01       	movw	r18, r10

000014dc <.Loc.288>:
	movw	r20, r12;
    14dc:	a6 01       	movw	r20, r12

000014de <.Loc.289>:
	call	__udivmodsi4;		/* r18:21 = r22:25  / r18:21 */
    14de:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

000014e2 <.Loc.290>:
	ldi	r24, lo8(EE_ESR_ZEROtab);	/* esr0 = (int8_t)eeprom_read_byte(&EE_ESR_ZEROtab[lopin+hipin]); */
    14e2:	86 e1       	ldi	r24, 0x16	; 22

000014e4 <.Loc.291>:
	ldi	r25, hi8(EE_ESR_ZEROtab);
    14e4:	93 e0       	ldi	r25, 0x03	; 3

000014e6 <.Loc.292>:
        ldd	r23, Y+1;
    14e6:	79 81       	ldd	r23, Y+1	; 0x01

000014e8 <.Loc.293>:
        add	r24, r23;
    14e8:	87 0f       	add	r24, r23

000014ea <.Loc.294>:
	adc	r25, zero_reg;
    14ea:	91 1d       	adc	r25, r1

000014ec <.Loc.295>:
	call	eeprom_read_byte;
    14ec:	0e 94 15 39 	call	0x722a	; 0x722a <eeprom_read_byte>

000014f0 <.Loc.296>:
	mov	r6, r24;
    14f0:	68 2e       	mov	r6, r24

000014f2 <.Loc.297>:
	movw	r24,r18;	/* r24:25 = r18:19 = esrvalue */
    14f2:	c9 01       	movw	r24, r18

000014f4 <.Loc.298>:
	ldi	r22, 16;
    14f4:	60 e1       	ldi	r22, 0x10	; 16

000014f6 <.Loc.299>:
	ldi	r23, 0;
    14f6:	70 e0       	ldi	r23, 0x00	; 0

000014f8 <.Loc.300>:
	call	__udivmodhi4	/* r22:23 = r24:25 / r22:23 */
    14f8:	0e 94 00 38 	call	0x7000	; 0x7000 <__udivmodhi4>

000014fc <.Loc.301>:
	add	r18, r22;	/* esrvalue += esrvalue / 16; */
    14fc:	26 0f       	add	r18, r22

000014fe <.Loc.302>:
	adc	r19, r23;
    14fe:	37 1f       	adc	r19, r23

00001500 <.Loc.303>:
	movw	r24,r18;	/* esrvalue */
    1500:	c9 01       	movw	r24, r18

00001502 <.Loc.304>:
	cp	r6, r24;		/* if (esrvalue > esr0) esrvalue -= esr0; */
    1502:	68 16       	cp	r6, r24

00001504 <.Loc.305>:
	cpc	zero_reg, r25;
    1504:	19 06       	cpc	r1, r25

00001506 <.Loc.306>:
	brcc	esr_too_less;
    1506:	18 f4       	brcc	.+6      	; 0x150e <esr_too_less>

00001508 <.Loc.307>:
	sub	r24, r6;		/* - esr0 */ 
    1508:	86 19       	sub	r24, r6

0000150a <.Loc.308>:
	sbc	r25, zero_reg;
    150a:	91 09       	sbc	r25, r1

0000150c <.Loc.309>:
	rjmp	ad_exit;
    150c:	0f c0       	rjmp	.+30     	; 0x152c <ad_exit>

0000150e <esr_too_less>:
esr_too_less:
#ifdef AUTO_CAL
        subi	r24, lo8(-R_LIMIT_TO_UNCALIBRATED);		/* + 0.20 Ohm */
    150e:	8c 5e       	subi	r24, 0xEC	; 236

00001510 <.Loc.311>:
        sbci	r25, hi8(-R_LIMIT_TO_UNCALIBRATED);		/* esrvalue + 20 */
    1510:	9f 4f       	sbci	r25, 0xFF	; 255

00001512 <.Loc.312>:
	cp	r24, r6;		/* if ((esrvalue+20) < esr0) ; */
    1512:	86 15       	cp	r24, r6

00001514 <.Loc.313>:
	cpc	r25, zero_reg;
    1514:	91 05       	cpc	r25, r1

00001516 <.Loc.314>:
	brcc	esr_too_less2;
    1516:	40 f4       	brcc	.+16     	; 0x1528 <esr_too_less2>

00001518 <.Loc.315>:
	ldd	r24, Y+cap_val_nF;	/* mark only, if cap_val_nF > 4500 */
    1518:	8c 89       	ldd	r24, Y+20	; 0x14

0000151a <.Loc.316>:
	ldd     r25, Y+cap_val_nF+1;
    151a:	9d 89       	ldd	r25, Y+21	; 0x15

0000151c <.Loc.317>:
;	ldd	r26, Y+cap_val_nF+2;	/* the upper bits (cap_val_nF+2|3) are always zero */ 
	cpi	r24, lo8(4500);
    151c:	84 39       	cpi	r24, 0x94	; 148

0000151e <.Loc.318>:
	ldi	r24, hi8(4500);
    151e:	81 e1       	ldi	r24, 0x11	; 17

00001520 <.Loc.319>:
	cpc	r25, r24;
    1520:	98 07       	cpc	r25, r24

00001522 <.Loc.320>:
	brcs	esr_too_less2;
    1522:	10 f0       	brcs	.+4      	; 0x1528 <esr_too_less2>

00001524 <.Loc.321>:
	call	mark_as_uncalibrated;
    1524:	0e 94 71 13 	call	0x26e2	; 0x26e2 <mark_as_uncalibrated>

00001528 <esr_too_less2>:
/*	ldi	r24,'<'; */
/*	call	lcd_data; */
esr_too_less2:
#endif
	mov	r24, zero_reg;
    1528:	81 2d       	mov	r24, r1

0000152a <.Loc.323>:
	mov	r25, zero_reg;
    152a:	91 2d       	mov	r25, r1

0000152c <ad_exit>:
	pop	r4;
	pop	r3;
	pop	r2;
	ret;
#else
	adiw	r28, 30
    152c:	6e 96       	adiw	r28, 0x1e	; 30

0000152e <.Loc.325>:
	ldi	r30, 18
    152e:	e2 e1       	ldi	r30, 0x12	; 18

00001530 <.Loc.326>:
	jmp	__epilogue_restores__
    1530:	0c 94 a6 38 	jmp	0x714c	; 0x714c <__epilogue_restores__>

00001534 <strtADC_pulse>:
    delay to pin high: lds,sbrc,sts and out Instructions are 7 clock tics */
  #define PIN_HIGH_DELAY (6+OUT_DELAY + 3 + (F_CPU_HZ/4000000))
 #endif
 #define WAST_TICS (((TICS_PER_ADC_CLOCK*5)/2) - HALF_PULSE_LENGTH_TICS - PIN_HIGH_DELAY)
#else
	sts	TCCR1B, r1		; stop counter1
    1534:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

00001538 <.Loc.328>:
	sts	TCCR1A, r1		; TCCR1A = 0 , normal port operation
    1538:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>

0000153c <.Loc.329>:
	sts	TIMSK1, r1		; disable all timer1 interrupts
    153c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>

00001540 <.Loc.330>:
	sts	OCR1BH, r1		; OCR!B = 0
    1540:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>

00001544 <.Loc.331>:
	sts	OCR1BL, r1
    1544:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>

00001548 <.Loc.332>:
	ldi	r21, (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1)
    1548:	57 e0       	ldi	r21, 0x07	; 7

0000154a <.Loc.333>:
	AOUT	TIFR1, r21			; clear flags
    154a:	56 bb       	out	0x16, r21	; 22

0000154c <.Loc.334>:
	ldi	r21, 0xff
    154c:	5f ef       	ldi	r21, 0xFF	; 255

0000154e <.Loc.335>:
	sts	TCNT1H, r21		; TCNT1 = -1
    154e:	50 93 85 00 	sts	0x0085, r21	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>

00001552 <.Loc.336>:
	sts	TCNT1L, r21
    1552:	50 93 84 00 	sts	0x0084, r21	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>

00001556 <.Loc.337>:
	ldi	r21, (1<<ADTS2) | (1<<ADTS0)	; Start ADC with counter1 compare B
    1556:	55 e0       	ldi	r21, 0x05	; 5

00001558 <.Loc.338>:
	sts	ADCSRB, r21
    1558:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

0000155c <.Loc.339>:
	ldi	r21, (1<<ADEN) | (1<<ADATE) | (1<<ADIF) | AUTO_CLOCK_DIV;	/* enable ADC */
    155c:	56 eb       	ldi	r21, 0xB6	; 182

0000155e <.Loc.340>:
	sts	ADCSRA, r21;		/* ADCSRA = (1<<ADEN) | (1<<ADSC) | (1<<ADIF) | AUTO_CLOCK_DIV; // enable ADC */
    155e:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

00001562 <.Loc.341>:

	ldi	r21, (1<<CS10) 
    1562:	51 e0       	ldi	r21, 0x01	; 1

00001564 <.Loc.342>:
	sts	TCCR1B, r21		; Start Counter 1 with full speed
    1564:	50 93 81 00 	sts	0x0081, r21	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

00001568 <.Loc.343>:
 #define PIN_HIGH_DELAY (OUT_DELAY - 5 + (F_CPU_HZ/4000000))
 #define WAST_TICS ((TICS_PER_ADC_CLOCK*2) - HALF_PULSE_LENGTH_TICS - PIN_HIGH_DELAY)
#endif
; additional delay to the start of current pulse
	ldi	r21, (WAST_TICS/3)
    1568:	58 e2       	ldi	r21, 0x28	; 40

0000156a <wlop1>:
wlop1:
	dec	r21
    156a:	5a 95       	dec	r21

0000156c <.Loc.345>:
	brne	wlop1
    156c:	f1 f7       	brne	.-4      	; 0x156a <wlop1>

0000156e <.Loc.346>:
	...

00001570 <.Loc.347>:
	nop
#endif
#if (WAST_TICS % 3) > 0
	nop
#endif
	AOUT	R_PORT, r20;		/* R_PORT = HiPinR_L (r12);	// switch R-Port to VCC */
    1570:	45 b9       	out	0x05, r20	; 5

00001572 <.Loc.348>:
	AOUT	R_DDR, r20;		/* R_DDR = HiPinR_L (r12);	// switch R_L port for HighPin to output (VCC) */
    1572:	44 b9       	out	0x04, r20	; 4

00001574 <.Loc.349>:
;	AOUT	R_PORT, LoPinR_L;	/* R_PORT = LoPinR_L (r7) ; */
;	AOUT	R_DDR, LoPinR_L;	/* R_DDR = LoPinR_L (r7) ;	// switch LowPin with 680 Ohm to VCC */
#define FULL_PULSE_LENGTH_TICS ((HALF_PULSE_LENGTH_TICS*2)+(MHZ_CPU/14))
	ldi	r21, (FULL_PULSE_LENGTH_TICS/3)
    1574:	55 e0       	ldi	r21, 0x05	; 5

00001576 <plop2>:
plop2:
	dec	r21
    1576:	5a 95       	dec	r21

00001578 <.Loc.351>:
	brne	plop2
    1578:	f1 f7       	brne	.-4      	; 0x1576 <plop2>

0000157a <.Loc.352>:
	...

0000157c <.Loc.353>:
	nop
#endif
#if (FULL_PULSE_LENGTH_TICS % 3) > 0
	nop
#endif
	AOUT	R_DDR, zero_reg;	/* R_DDR = 0; // switch current off,  SH is 1.5 ADC clock behind real start */
    157c:	14 b8       	out	0x04, r1	; 4

0000157e <.Loc.354>:
	AOUT	R_PORT, zero_reg;	/* R_PORT = 0; */
    157e:	15 b8       	out	0x05, r1	; 5

00001580 <.Loc.355>:
#ifndef WITHOUT_CNT_START
	sts	TCCR1B, r1		; stop counter1
    1580:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

00001584 <wadfin2>:
#endif

wadfin2:
	lds	r24, ADCSRA;		/* while (ADCSRA&(1<<ADSC));	// wait for conversion finished */
    1584:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

00001588 <.Loc.357>:
	sbrs	r24, ADIF;
    1588:	84 ff       	sbrs	r24, 4

0000158a <.Loc.358>:
	rjmp	wadfin2;
    158a:	fc cf       	rjmp	.-8      	; 0x1584 <wadfin2>

0000158c <.Loc.359>:
	sts	ADCSRA, r24		; clear flags
    158c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

00001590 <.Loc.360>:
	ret
    1590:	08 95       	ret

00001592 <lcd_spaces>:
   lcd_data(temp + '1' + TP_OFFSET - TP_MIN);
}

/* ******************************************************************************* */
// send space characters to LCD
void lcd_spaces(int8_t nn) {
    1592:	cf 93       	push	r28

00001594 <.LCFI0>:
    1594:	c8 2f       	mov	r28, r24

00001596 <.L2>:
   while (nn > 0) {
    1596:	1c 16       	cp	r1, r28
    1598:	14 f0       	brlt	.+4      	; 0x159e <.L3>

0000159a <.Loc.4>:
     lcd_space();	// output one space to LCD and UART
     nn--;
   }
}
    159a:	cf 91       	pop	r28

0000159c <.LVL2>:
    159c:	08 95       	ret

0000159e <.L3>:
     lcd_space();	// output one space to LCD and UART
    159e:	e4 db       	rcall	.-2104   	; 0xd68 <lcd_space>

000015a0 <.LVL4>:
     nn--;
    15a0:	c1 50       	subi	r28, 0x01	; 1

000015a2 <.Loc.8>:
    15a2:	f9 cf       	rjmp	.-14     	; 0x1596 <.L2>

000015a4 <lcd_set_cursor>:
/* ************************************************************************************** */
/* Set the character position to x,y , where x specifies the character number in a text line. */
/* The y position is the page address (8 line units).                                     */
/* For most controllers the y position must be increased by (Height + 7) / 8 for the next text line */
void lcd_set_cursor(uint8_t y, uint8_t x) {
    _lcd_column = x;
    15a4:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <_lcd_column>

000015a8 <.Loc.12>:
#if (LCD_GRAPHIC_TYPE != 0)
   //move to the specified position (depends on used font)
   _page = y;
    15a8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_page>

000015ac <.Loc.14>:
   lcd_text_line = y / PAGES_PER_LINE;
    15ac:	86 95       	lsr	r24

000015ae <.LVL7>:
    15ae:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd_text_line>

000015b2 <.Loc.17>:
    // The pixel memory is greater as the display window.
    // For example the SPL501 controller has 132x65 dot matrix memory
    // LCD_ST7565_H_OFFSET specifies the offset of the 128 pixel of the display window.
   _xpos = (x * FONT_H_SPACE);
    15b2:	87 e0       	ldi	r24, 0x07	; 7
    15b4:	68 9f       	mul	r22, r24
    15b6:	60 2d       	mov	r22, r0
    15b8:	11 24       	eor	r1, r1

000015ba <.LVL8>:
    15ba:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_xpos>

000015be <.Loc.20>:
 #endif
   } else {
     lcd_command((uint8_t)(CMD_SetDDRAMAddress + LCD_Row1 + x));
   }
#endif
}
    15be:	08 95       	ret

000015c0 <lcd_line1>:
   lcd_text_line = 0;
    15c0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd_text_line>

000015c4 <.Loc.24>:
   lcd_set_cursor(0 * PAGES_PER_LINE,0);
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	ed cf       	rjmp	.-38     	; 0x15a4 <lcd_set_cursor>

000015ca <.LVL9>:
}
    15ca:	08 95       	ret

000015cc <lcd_line2>:
   lcd_text_line = 1;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd_text_line>

000015d2 <.Loc.29>:
   lcd_set_cursor(1 * PAGES_PER_LINE,0);
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	82 e0       	ldi	r24, 0x02	; 2
    15d6:	e6 cf       	rjmp	.-52     	; 0x15a4 <lcd_set_cursor>

000015d8 <.LVL10>:
}
    15d8:	08 95       	ret

000015da <lcd_line3>:
   lcd_text_line = 2;
    15da:	82 e0       	ldi	r24, 0x02	; 2
    15dc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd_text_line>

000015e0 <.Loc.34>:
   lcd_set_cursor(2 * PAGES_PER_LINE,0);
    15e0:	60 e0       	ldi	r22, 0x00	; 0
    15e2:	84 e0       	ldi	r24, 0x04	; 4
    15e4:	df cf       	rjmp	.-66     	; 0x15a4 <lcd_set_cursor>

000015e6 <.LVL11>:
}
    15e6:	08 95       	ret

000015e8 <lcd_line4>:
   lcd_text_line = 3;
    15e8:	83 e0       	ldi	r24, 0x03	; 3
    15ea:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd_text_line>

000015ee <.Loc.39>:
   lcd_set_cursor(3 * PAGES_PER_LINE,0);
    15ee:	60 e0       	ldi	r22, 0x00	; 0
    15f0:	86 e0       	ldi	r24, 0x06	; 6
    15f2:	d8 cf       	rjmp	.-80     	; 0x15a4 <lcd_set_cursor>

000015f4 <.LVL12>:
}
    15f4:	08 95       	ret

000015f6 <lcd_save_position>:

#if FLASHEND > 0x1fff
/* ************************************************************************************** */
uint8_t lcd_save_position(void) {
 last_text_column = _lcd_column;
    15f6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_lcd_column>
    15fa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <last_text_column>

000015fe <.Loc.44>:
 last_text_line = lcd_text_line;
    15fe:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd_text_line>
    1602:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <last_text_line>

00001606 <.Loc.46>:
 return(last_text_line);
}
    1606:	08 95       	ret

00001608 <lcd_restore_position>:
/* ************************************************************************************** */
void lcd_restore_position(void) {
 lcd_set_cursor((uint8_t)last_text_line * PAGES_PER_LINE, (uint8_t)(last_text_column));
    1608:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <last_text_line>
    160c:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <last_text_column>
    1610:	88 0f       	add	r24, r24
    1612:	c8 cf       	rjmp	.-112    	; 0x15a4 <lcd_set_cursor>

00001614 <.LVL13>:
}
    1614:	08 95       	ret

00001616 <lcd_command>:
 wdt_reset();
} /* end lcd_data() */
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
    1616:	68 2f       	mov	r22, r24

00001618 <.Loc.61>:
	_lcd_hw_write(0x00,temp1);
    1618:	80 e0       	ldi	r24, 0x00	; 0

0000161a <.LVL19>:
    161a:	54 cb       	rjmp	.-2392   	; 0xcc4 <_lcd_hw_write>

0000161c <.LVL20>:
#if ((LCD_ST_TYPE == 7565) || (LCD_ST_TYPE == 1306) || (LCD_ST_TYPE == 7108) || (LCD_ST_TYPE == 7920) || (LCD_ST_TYPE == 8812) || (LCD_ST_TYPE == 8814) || (LCD_ST_TYPE == 7735) || (LCD_ST_TYPE == 9163) || (LCD_ST_TYPE == 9341) || (LCD_ST_TYPE == 1327))
 ;
#else
	wait50us();		// wait at least 50us after every instruction for character LCD
#endif
}
    161c:	08 95       	ret

0000161e <lcd_powersave>:
#endif
}	/* end lcd_init */
 
#if ((LCD_ST_TYPE == 7565) || (LCD_ST_TYPE == 1306) || (LCR_ST_TYPE == 1327) || (LCD_ST_TYPE == 7108))
void lcd_powersave(void) {
     lcd_command(CMD_DISPLAY_OFF);
    161e:	8e ea       	ldi	r24, 0xAE	; 174
    1620:	fa df       	rcall	.-12     	; 0x1616 <lcd_command>

00001622 <.LVL21>:
 #if ((LCD_ST_TYPE == 7565) || (LCD_ST_TYPE == 1306))
     lcd_command(CMD_SET_ALLPTS_ON); // Enter power save mode
    1622:	85 ea       	ldi	r24, 0xA5	; 165
    1624:	f8 cf       	rjmp	.-16     	; 0x1616 <lcd_command>

00001626 <.LVL22>:
 #endif
}
    1626:	08 95       	ret

00001628 <lcd_clear>:
#endif

/* ******************************************************************************* */
// send the command to clear the display 
 
void lcd_clear(void) {
    1628:	cf 93       	push	r28

0000162a <.LCFI2>:
    162a:	df 93       	push	r29

0000162c <.LCFI3>:
   
#if ((LCD_ST_TYPE == 7565) || (LCD_ST_TYPE == 1306))
   unsigned char p;
   unsigned char count;

   for (p = 0; p < (SCREEN_HEIGHT / 8); p++) {
    162c:	c0 e0       	ldi	r28, 0x00	; 0

0000162e <.L16>:
     lcd_command(CMD_SET_COLUMN_UPPER);		// set horizontal position to 0
    162e:	80 e1       	ldi	r24, 0x10	; 16
    1630:	f2 df       	rcall	.-28     	; 0x1616 <lcd_command>

00001632 <.LVL25>:
     lcd_command(CMD_SET_COLUMN_LOWER);
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	f0 df       	rcall	.-32     	; 0x1616 <lcd_command>

00001636 <.LVL26>:
     lcd_command(CMD_SET_PAGE | (0x0f & p));	// set page 0 to 7
    1636:	8c 2f       	mov	r24, r28
    1638:	80 6b       	ori	r24, 0xB0	; 176
    163a:	ed df       	rcall	.-38     	; 0x1616 <lcd_command>

0000163c <.LVL27>:
    163c:	d4 e8       	ldi	r29, 0x84	; 132

0000163e <.L15>:
     for (count = 0; count < 132; count++)
       lcd_write_data(0);
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	40 db       	rcall	.-2432   	; 0xcc4 <_lcd_hw_write>

00001644 <.LVL29>:
     for (count = 0; count < 132; count++)
    1644:	da 95       	dec	r29

00001646 <.LVL30>:
    1646:	d9 f7       	brne	.-10     	; 0x163e <.L15>

00001648 <.Loc.85>:
   for (p = 0; p < (SCREEN_HEIGHT / 8); p++) {
    1648:	cf 5f       	subi	r28, 0xFF	; 255

0000164a <.Loc.87>:
    164a:	c8 30       	cpi	r28, 0x08	; 8
    164c:	81 f7       	brne	.-32     	; 0x162e <.L16>

0000164e <.Loc.88>:
     }
#else
   lcd_command(CMD_CLEAR_DISPLAY);
   wait_about10ms();
#endif
   lcd_line1();			// set cursor to Line1 Column 1, (only for OLED-Display)
    164e:	b8 df       	rcall	.-144    	; 0x15c0 <lcd_line1>

00001650 <.LVL32>:
}  /* end lcd_clear() */
    1650:	df 91       	pop	r29

00001652 <.LVL33>:
    1652:	cf 91       	pop	r28

00001654 <.LVL34>:
    1654:	08 95       	ret

00001656 <lcd_init>:
   HW_LCD_RES_PORT &= ~_BV(HW_LCD_RES_PIN); // RESET LCD-Display
    1656:	58 98       	cbi	0x0b, 0	; 11

00001658 <.Loc.95>:
   HW_LCD_EN_PORT  &= ~_BV(HW_LCD_EN_PIN);
    1658:	5a 98       	cbi	0x0b, 2	; 11

0000165a <.Loc.97>:
   HW_LCD_B0_PORT  &= ~_BV(HW_LCD_B0_PIN);
    165a:	5b 98       	cbi	0x0b, 3	; 11

0000165c <.Loc.100>:
   HW_LCD_CE_PORT  &= ~_BV(HW_LCD_CE_PIN);  // LCD CE to low
    165c:	5d 98       	cbi	0x0b, 5	; 11

0000165e <.Loc.101>:
   HW_LCD_RES_DDR  |= _BV(HW_LCD_RES_PIN); // LCD RESET is Output
    165e:	50 9a       	sbi	0x0a, 0	; 10

00001660 <.Loc.103>:
   HW_LCD_EN_DDR   |= _BV(HW_LCD_EN_PIN);  // LCD SCL is Output
    1660:	52 9a       	sbi	0x0a, 2	; 10

00001662 <.Loc.105>:
   HW_LCD_B0_DDR   |= _BV(HW_LCD_B0_PIN);  // LCD SI is Output
    1662:	53 9a       	sbi	0x0a, 3	; 10

00001664 <.Loc.107>:
   HW_LCD_CE_DDR   |= _BV(HW_LCD_CE_PIN);  // LCD CE is Output
    1664:	55 9a       	sbi	0x0a, 5	; 10

00001666 <.Loc.109>:
   wait10us();
    1666:	89 dc       	rcall	.-1774   	; 0xf7a <wait10us>

00001668 <.LVL35>:
   HW_LCD_CE_PORT  |= _BV(HW_LCD_CE_PIN);   // set CS to 1, unselected
    1668:	5d 9a       	sbi	0x0b, 5	; 11

0000166a <.Loc.112>:
   HW_LCD_CE_DDR   |= _BV(HW_LCD_CE_PIN);  // LCD CS is Output
    166a:	55 9a       	sbi	0x0a, 5	; 10

0000166c <.Loc.114>:
   HW_LCD_RS_PORT  &= ~_BV(HW_LCD_RS_PIN);
    166c:	59 98       	cbi	0x0b, 1	; 11

0000166e <.Loc.116>:
   HW_LCD_RS_DDR   |= _BV(HW_LCD_RS_PIN);  // LCD RS (SCE) is Output
    166e:	51 9a       	sbi	0x0a, 1	; 10

00001670 <.Loc.118>:
   wait_about100ms(); // Set LCD for 100 ms into RESET
    1670:	84 e1       	ldi	r24, 0x14	; 20
    1672:	8b dc       	rcall	.-1770   	; 0xf8a <sleep_5ms>

00001674 <.LVL36>:
   HW_LCD_RES_PORT |= _BV(HW_LCD_RES_PIN);	// switch RES to VCC
    1674:	58 9a       	sbi	0x0b, 0	; 11

00001676 <.Loc.121>:
   wait_about100ms();  // Wait for 100 ms after RESET
    1676:	84 e1       	ldi	r24, 0x14	; 20
    1678:	88 dc       	rcall	.-1776   	; 0xf8a <sleep_5ms>

0000167a <.LVL37>:
   lcd_command(CMD_DISPLAY_OFF);		// display off
    167a:	8e ea       	ldi	r24, 0xAE	; 174
    167c:	cc df       	rcall	.-104    	; 0x1616 <lcd_command>

0000167e <.LVL38>:
   lcd_command(CMD_INTERNAL_RESET);		// 0xe2
    167e:	82 ee       	ldi	r24, 0xE2	; 226
    1680:	ca df       	rcall	.-108    	; 0x1616 <lcd_command>

00001682 <.LVL39>:
   lcd_command(CMD_SET_BIAS_9);			// 0xa3
    1682:	82 ea       	ldi	r24, 0xA2	; 162
    1684:	c8 df       	rcall	.-112    	; 0x1616 <lcd_command>

00001686 <.LVL40>:
   lcd_command(CMD_SET_ADC_NORMAL);		// 0xa0
    1686:	80 ea       	ldi	r24, 0xA0	; 160
    1688:	c6 df       	rcall	.-116    	; 0x1616 <lcd_command>

0000168a <.LVL41>:
   lcd_command(CMD_SET_COM_NORMAL);		// 0xc0
    168a:	80 ec       	ldi	r24, 0xC0	; 192
    168c:	c4 df       	rcall	.-120    	; 0x1616 <lcd_command>

0000168e <.LVL42>:
   lcd_command(CMD_SET_POWER_CONTROL | 7);	// 0x28 BOOSTER ON | V_REGULATOR ON | V_FOLLOWER ON
    168e:	8f e2       	ldi	r24, 0x2F	; 47
    1690:	c2 df       	rcall	.-124    	; 0x1616 <lcd_command>

00001692 <.LVL43>:
   lcd_command(CMD_SET_RESISTOR_RATIO | (7 & LCD_ST7565_RESISTOR_RATIO));	// 0x20
    1692:	84 e2       	ldi	r24, 0x24	; 36
    1694:	c0 df       	rcall	.-128    	; 0x1616 <lcd_command>

00001696 <.LVL44>:
   lcd_command(CMD_SET_VOLUME_FIRST);		// 0x81 set  volume command
    1696:	81 e8       	ldi	r24, 0x81	; 129
    1698:	be df       	rcall	.-132    	; 0x1616 <lcd_command>

0000169a <.LVL45>:
   lcd_command(eeprom_read_byte(&EE_Volume_Value) & 0x3f);	//set volume value of EEprom
    169a:	85 e1       	ldi	r24, 0x15	; 21
    169c:	93 e0       	ldi	r25, 0x03	; 3
    169e:	0e 94 15 39 	call	0x722a	; 0x722a <eeprom_read_byte>

000016a2 <.LVL46>:
    16a2:	8f 73       	andi	r24, 0x3F	; 63
    16a4:	b8 df       	rcall	.-144    	; 0x1616 <lcd_command>

000016a6 <.LVL47>:
   lcd_command(CMD_SET_DISP_START_LINE | (LCD_ST7565_Y_START & 0x3f));	// 0x40
    16a6:	80 e4       	ldi	r24, 0x40	; 64
    16a8:	b6 df       	rcall	.-148    	; 0x1616 <lcd_command>

000016aa <.LVL48>:
   lcd_command(CMD_SET_ALLPTS_NORMAL);		// 0xa4
    16aa:	84 ea       	ldi	r24, 0xA4	; 164
    16ac:	b4 df       	rcall	.-152    	; 0x1616 <lcd_command>

000016ae <.LVL49>:
   lcd_command(CMD_SET_DISP_NORMAL);		// 0xa6 not reverse
    16ae:	86 ea       	ldi	r24, 0xA6	; 166
    16b0:	b2 df       	rcall	.-156    	; 0x1616 <lcd_command>

000016b2 <.LVL50>:
   lcd_clear();
    16b2:	ba df       	rcall	.-140    	; 0x1628 <lcd_clear>

000016b4 <.LVL51>:
   lcd_command(CMD_DISPLAY_ON);			// 0xaf
    16b4:	8f ea       	ldi	r24, 0xAF	; 175
    16b6:	af df       	rcall	.-162    	; 0x1616 <lcd_command>

000016b8 <.LVL52>:
   lcd_set_cursor(0,0);
    16b8:	60 e0       	ldi	r22, 0x00	; 0
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	73 cf       	rjmp	.-282    	; 0x15a4 <lcd_set_cursor>

000016be <.LVL53>:
}	/* end lcd_init */
    16be:	08 95       	ret

000016c0 <lcd_clear_line>:
}

/* ******************************************************************************* */
void lcd_clear_line(void) {
 // writes spaces up to LCD_LINE_LENGTH to LCD-Display, Cursor can be positioned to any column
    lcd_spaces(LCD_LINE_LENGTH - _lcd_column);
    16c0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_lcd_column>

000016c4 <.Loc.145>:
    16c4:	92 e1       	ldi	r25, 0x12	; 18
    16c6:	98 1b       	sub	r25, r24
    16c8:	89 2f       	mov	r24, r25
    16ca:	63 cf       	rjmp	.-314    	; 0x1592 <lcd_spaces>

000016cc <.LVL55>:
}
    16cc:	08 95       	ret

000016ce <lcd_next_line>:
void lcd_next_line(uint8_t xx) {
    16ce:	cf 93       	push	r28

000016d0 <.LCFI4>:
    16d0:	c8 2f       	mov	r28, r24

000016d2 <.Loc.149>:
   lcd_clear_line();
    16d2:	f6 df       	rcall	.-20     	; 0x16c0 <lcd_clear_line>

000016d4 <.LVL57>:
   lcd_text_line ++;
    16d4:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <lcd_text_line>
    16d8:	9f 5f       	subi	r25, 0xFF	; 255

000016da <.Loc.152>:
   if (lcd_text_line > (LCD_LINES - 1))  {
    16da:	80 e0       	ldi	r24, 0x00	; 0

000016dc <.Loc.153>:
    16dc:	94 30       	cpi	r25, 0x04	; 4
    16de:	10 f0       	brcs	.+4      	; 0x16e4 <.L23>
    16e0:	93 e0       	ldi	r25, 0x03	; 3
    16e2:	81 e0       	ldi	r24, 0x01	; 1

000016e4 <.L23>:
      lcd_text_line = (LCD_LINES - 1);
    16e4:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <lcd_text_line>

000016e8 <.Loc.155>:
      last_line_used = 1;
    16e8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <last_line_used>

000016ec <.Loc.156>:
   lcd_set_cursor((uint8_t)(lcd_text_line * PAGES_PER_LINE), xx);
    16ec:	6c 2f       	mov	r22, r28
    16ee:	89 2f       	mov	r24, r25
    16f0:	88 0f       	add	r24, r24
    16f2:	58 df       	rcall	.-336    	; 0x15a4 <lcd_set_cursor>

000016f4 <.LVL58>:
}
    16f4:	cf 91       	pop	r28

000016f6 <.LVL59>:
    16f6:	08 95       	ret

000016f8 <lcd_next_line_wait>:
   lcd_next_line(xx);
    16f8:	ea df       	rcall	.-44     	; 0x16ce <lcd_next_line>

000016fa <.LVL61>:
   wait_for_key_5s_line2();		// wait 5s and clear last line
    16fa:	71 c3       	rjmp	.+1762   	; 0x1dde <wait_for_key_5s_line2>

000016fc <.LVL62>:
}
    16fc:	08 95       	ret

000016fe <lcd_clear_line1>:

#ifdef LCD_CLEAR
void lcd_clear_line1(void) {
    lcd_line1();
    16fe:	60 df       	rcall	.-320    	; 0x15c0 <lcd_line1>

00001700 <.LVL63>:
    lcd_clear_line();
    1700:	df df       	rcall	.-66     	; 0x16c0 <lcd_clear_line>

00001702 <.LVL64>:
    lcd_line1();
    1702:	5e cf       	rjmp	.-324    	; 0x15c0 <lcd_line1>

00001704 <.LVL65>:
}
    1704:	08 95       	ret

00001706 <lcd_clear_line2>:
void lcd_clear_line2(void) {
    lcd_line2();
    1706:	62 df       	rcall	.-316    	; 0x15cc <lcd_line2>

00001708 <.LVL66>:
    lcd_clear_line();
    1708:	db df       	rcall	.-74     	; 0x16c0 <lcd_clear_line>

0000170a <.LVL67>:
    lcd_line2();
    170a:	60 cf       	rjmp	.-320    	; 0x15cc <lcd_line2>

0000170c <.LVL68>:
}
    170c:	08 95       	ret

0000170e <reverse_byte>:
#endif

/* ******************************************************************************* */
#if (LCD_GRAPHIC_TYPE != 0)
unsigned char reverse_byte(unsigned char b)
{
    170e:	58 2f       	mov	r21, r24

00001710 <.LVL70>:
    1710:	28 e0       	ldi	r18, 0x08	; 8
    1712:	30 e0       	ldi	r19, 0x00	; 0

00001714 <.Loc.182>:
   unsigned char result = 0;
   unsigned char bitin;
   unsigned char bitout;

   for (bitin = 1, bitout = 0x80; bitin != 0; bitin <<= 1, bitout >>= 1) 
    1714:	90 e8       	ldi	r25, 0x80	; 128

00001716 <.Loc.183>:
    1716:	41 e0       	ldi	r20, 0x01	; 1

00001718 <.Loc.184>:
   unsigned char result = 0;
    1718:	80 e0       	ldi	r24, 0x00	; 0

0000171a <.L30>:
      if (b & bitin)
    171a:	65 2f       	mov	r22, r21
    171c:	64 23       	and	r22, r20

0000171e <.Loc.187>:
    171e:	61 11       	cpse	r22, r1

00001720 <.Loc.188>:
         result |= bitout;
    1720:	89 2b       	or	r24, r25

00001722 <.Loc.190>:
   for (bitin = 1, bitout = 0x80; bitin != 0; bitin <<= 1, bitout >>= 1) 
    1722:	44 0f       	add	r20, r20

00001724 <.Loc.192>:
    1724:	96 95       	lsr	r25

00001726 <.Loc.193>:
    1726:	21 50       	subi	r18, 0x01	; 1
    1728:	30 40       	sbci	r19, 0x00	; 0
    172a:	b9 f7       	brne	.-18     	; 0x171a <.L30>

0000172c <.Loc.194>:

   return result;
}
    172c:	08 95       	ret

0000172e <lcd_set_pixels>:
/* width and height specifies the dimension of the pixel field.                    */
/* The different controller types uses different ways of loading the pixels.       */
/* For the ST7920 controller the changes are only made in a memory field (RAM).    */
/* ******************************************************************************* */
void lcd_set_pixels(const unsigned char *pdata, unsigned char x, unsigned char y,
unsigned char options, unsigned char width, unsigned char height) {
    172e:	a4 e0       	ldi	r26, 0x04	; 4
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	ed e9       	ldi	r30, 0x9D	; 157
    1734:	fb e0       	ldi	r31, 0x0B	; 11
    1736:	0c 94 8e 38 	jmp	0x711c	; 0x711c <.Loc.4>

0000173a <.L1^B1>:
    173a:	6c 01       	movw	r12, r24
    173c:	49 83       	std	Y+1, r20	; 0x01

0000173e <.Loc.198>:
/* ------------------------------------------------------------------------------- */
#if ((LCD_ST_TYPE == 7565) || (LCD_ST_TYPE == 1306) || (LCD_ST_TYPE == 7108) || (LCD_ST_TYPE == 8812) || (LCD_ST_TYPE == 8814))
   if (((x+width) > SCREEN_WIDTH) || ((y+height) > SCREEN_HEIGHT))
    173e:	10 e0       	ldi	r17, 0x00	; 0
    1740:	c8 01       	movw	r24, r16

00001742 <.LVL76>:
    1742:	86 0f       	add	r24, r22
    1744:	91 1d       	adc	r25, r1

00001746 <.Loc.201>:
    1746:	81 38       	cpi	r24, 0x81	; 129
    1748:	91 05       	cpc	r25, r1
    174a:	dc f5       	brge	.+118    	; 0x17c2 <.L35>

0000174c <.Loc.202>:
    174c:	4e 0d       	add	r20, r14
    174e:	55 27       	eor	r21, r21
    1750:	55 1f       	adc	r21, r21

00001752 <.LVL77>:
    1752:	ca 01       	movw	r24, r20

00001754 <.Loc.204>:
    1754:	41 34       	cpi	r20, 0x41	; 65
    1756:	51 05       	cpc	r21, r1
    1758:	a4 f5       	brge	.+104    	; 0x17c2 <.L35>

0000175a <.Loc.205>:
   unsigned char offset;
   unsigned char page;
   unsigned char pagemax;
   unsigned char xx;

   page = y >> 3;		// page of screen has 8 pixel lines each
    175a:	59 81       	ldd	r21, Y+1	; 0x01
    175c:	56 95       	lsr	r21
    175e:	56 95       	lsr	r21
    1760:	56 95       	lsr	r21
    1762:	5c 83       	std	Y+4, r21	; 0x04

00001764 <.LVL78>:
   pagemax = (y + height - 1) >> 3;
    1764:	01 97       	sbiw	r24, 0x01	; 1

00001766 <.Loc.213>:
    1766:	33 e0       	ldi	r19, 0x03	; 3

00001768 <.L1^B2>:
    1768:	95 95       	asr	r25
    176a:	87 95       	ror	r24
    176c:	3a 95       	dec	r19
    176e:	e1 f7       	brne	.-8      	; 0x1768 <.L1^B2>

00001770 <.LVL79>:

   if ((options & OPT_VREVERSE) == OPT_VREVERSE)
    1770:	e2 2f       	mov	r30, r18
    1772:	e2 70       	andi	r30, 0x02	; 2
    1774:	6e 2e       	mov	r6, r30

00001776 <.Loc.215>:
    1776:	e1 15       	cp	r30, r1
    1778:	69 f0       	breq	.+26     	; 0x1794 <.L37>

0000177a <.Loc.216>:
      pdata += (pagemax - page) * width;
    177a:	48 2f       	mov	r20, r24
    177c:	45 1b       	sub	r20, r21
    177e:	55 0b       	sbc	r21, r21
    1780:	fa 01       	movw	r30, r20

00001782 <.Loc.218>:
    1782:	e0 9f       	mul	r30, r16
    1784:	a0 01       	movw	r20, r0
    1786:	e1 9f       	mul	r30, r17
    1788:	50 0d       	add	r21, r0
    178a:	f0 9f       	mul	r31, r16
    178c:	50 0d       	add	r21, r0
    178e:	11 24       	eor	r1, r1

00001790 <.Loc.219>:
    1790:	c4 0e       	add	r12, r20
    1792:	d5 1e       	adc	r13, r21

00001794 <.L37>:

   if (pagemax >= (SCREEN_HEIGHT >> 3))
    1794:	8b 83       	std	Y+3, r24	; 0x03
    1796:	88 30       	cpi	r24, 0x08	; 8
    1798:	10 f0       	brcs	.+4      	; 0x179e <.L38>

0000179a <.Loc.222>:
    179a:	47 e0       	ldi	r20, 0x07	; 7
    179c:	4b 83       	std	Y+3, r20	; 0x03

0000179e <.L38>:
      }
      lcd_command(CMD_SET_COLUMN_ADDR | (0x3f & xx ));
  #elif (LCD_ST_TYPE == 8812)
      lcd_command(CMD_SET_COLUMN | (0x7f & xx));
  #else
      lcd_command(CMD_SET_COLUMN_UPPER | (0x0f & (xx >> 4)));
    179e:	86 2f       	mov	r24, r22

000017a0 <.LVL81>:
    17a0:	82 95       	swap	r24
    17a2:	8f 70       	andi	r24, 0x0F	; 15
    17a4:	80 61       	ori	r24, 0x10	; 16
    17a6:	89 83       	std	Y+1, r24	; 0x01

000017a8 <.LVL82>:
      lcd_command(CMD_SET_COLUMN_LOWER | (0x0f & xx));
    17a8:	6f 70       	andi	r22, 0x0F	; 15

000017aa <.LVL83>:
    17aa:	6a 83       	std	Y+2, r22	; 0x02

000017ac <.LBB2>:
         }
  #endif
  #if (LCD_ST7565_H_FLIP == 1)
         if (!((options & OPT_HREVERSE) == OPT_HREVERSE))
  #else
         if ((options & OPT_HREVERSE) == OPT_HREVERSE)
    17ac:	21 70       	andi	r18, 0x01	; 1

000017ae <.LVL84>:
    17ae:	72 2e       	mov	r7, r18

000017b0 <.L39>:
   for (; page <= pagemax; page++)
    17b0:	4b 81       	ldd	r20, Y+3	; 0x03
    17b2:	5c 81       	ldd	r21, Y+4	; 0x04
    17b4:	45 17       	cp	r20, r21
    17b6:	48 f4       	brcc	.+18     	; 0x17ca <.L46>

000017b8 <.Loc.231>:
   } /* end for page */
   // Restore previous cursor position
  #if (LCD_ST7565_V_FLIP == 1)
   lcd_command(CMD_SET_PAGE | (((SCREEN_HEIGHT / 8) - 1) - _page));
  #else
   lcd_command(CMD_SET_PAGE | (0x0f & _page));
    17b8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_page>
    17bc:	8f 70       	andi	r24, 0x0F	; 15
    17be:	80 6b       	ori	r24, 0xB0	; 176
    17c0:	2a df       	rcall	.-428    	; 0x1616 <lcd_command>

000017c2 <.L35>:
         pdata += width;
      }
   } /* end for page */
/* ------------------------------------------------------------------------------- */
#endif /* (LCD_ST_TYPE == 7565 || 1306 || 7108 || 7920 || 8812 || 8814 ... */
}
    17c2:	24 96       	adiw	r28, 0x04	; 4
    17c4:	ee e0       	ldi	r30, 0x0E	; 14
    17c6:	0c 94 aa 38 	jmp	0x7154	; 0x7154 <.Loc.4>

000017ca <.L46>:
      lcd_command(CMD_SET_PAGE | page);
    17ca:	8c 81       	ldd	r24, Y+4	; 0x04
    17cc:	80 6b       	ori	r24, 0xB0	; 176
    17ce:	23 df       	rcall	.-442    	; 0x1616 <lcd_command>

000017d0 <.LVL88>:
      lcd_command(CMD_SET_COLUMN_UPPER | (0x0f & (xx >> 4)));
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	21 df       	rcall	.-446    	; 0x1616 <lcd_command>

000017d4 <.LVL89>:
      lcd_command(CMD_SET_COLUMN_LOWER | (0x0f & xx));
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	1f df       	rcall	.-450    	; 0x1616 <lcd_command>

000017d8 <.LVL90>:
      for (offset = 0; offset < width; offset++)
    17d8:	56 01       	movw	r10, r12
    17da:	a0 0e       	add	r10, r16
    17dc:	b1 1e       	adc	r11, r17
    17de:	75 01       	movw	r14, r10
    17e0:	46 01       	movw	r8, r12

000017e2 <.L40>:
    17e2:	ce 14       	cp	r12, r14
    17e4:	df 04       	cpc	r13, r15
    17e6:	51 f4       	brne	.+20     	; 0x17fc <.L44>

000017e8 <.Loc.240>:
      if ((options & OPT_VREVERSE) == OPT_VREVERSE) {
    17e8:	61 14       	cp	r6, r1
    17ea:	19 f0       	breq	.+6      	; 0x17f2 <.L45>

000017ec <.Loc.242>:
         pdata -= width;
    17ec:	56 01       	movw	r10, r12
    17ee:	a0 1a       	sub	r10, r16
    17f0:	b1 0a       	sbc	r11, r17

000017f2 <.L45>:
   for (; page <= pagemax; page++)
    17f2:	3c 81       	ldd	r19, Y+4	; 0x04
    17f4:	3f 5f       	subi	r19, 0xFF	; 255
    17f6:	3c 83       	std	Y+4, r19	; 0x04

000017f8 <.LVL93>:
    17f8:	65 01       	movw	r12, r10

000017fa <.LVL94>:
    17fa:	da cf       	rjmp	.-76     	; 0x17b0 <.L39>

000017fc <.L44>:
         if ((options & OPT_HREVERSE) == OPT_HREVERSE)
    17fc:	c7 01       	movw	r24, r14
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	7c 01       	movw	r14, r24

00001802 <.LBB3>:
            { byte = pgm_read_byte(pdata + width - offset - 1);
    1802:	fc 01       	movw	r30, r24

00001804 <.LBE3>:
         if ((options & OPT_HREVERSE) == OPT_HREVERSE)
    1804:	71 10       	cpse	r7, r1
    1806:	01 c0       	rjmp	.+2      	; 0x180a <.L56>

00001808 <.LBB4>:
            byte = pgm_read_byte(pdata + offset);
    1808:	f4 01       	movw	r30, r8

0000180a <.L56>:
    180a:	84 91       	lpm	r24, Z

0000180c <.LBE4>:
         if ((options & OPT_VREVERSE) == OPT_VREVERSE)
    180c:	61 10       	cpse	r6, r1

0000180e <.Loc.260>:
            { byte = reverse_byte(byte);
    180e:	7f df       	rcall	.-258    	; 0x170e <reverse_byte>

00001810 <.LVL99>:
         lcd_write_data(byte);
    1810:	68 2f       	mov	r22, r24
    1812:	81 e0       	ldi	r24, 0x01	; 1

00001814 <.LVL100>:
    1814:	57 da       	rcall	.-2898   	; 0xcc4 <_lcd_hw_write>

00001816 <.LBE5>:
      for (offset = 0; offset < width; offset++)
    1816:	ff ef       	ldi	r31, 0xFF	; 255
    1818:	8f 1a       	sub	r8, r31
    181a:	9f 0a       	sbc	r9, r31

0000181c <.LVL102>:
    181c:	e2 cf       	rjmp	.-60     	; 0x17e2 <.L40>

0000181e <lcd_big_icon>:
void lcd_big_icon(unsigned char temp1) {
    181e:	ef 92       	push	r14

00001820 <.LCFI6>:
    1820:	0f 93       	push	r16

00001822 <.LCFI7>:
    1822:	38 2f       	mov	r19, r24

00001824 <.Loc.271>:
 pfont = (uint8_t *) bigfont[temp1 & 0x3f];	// first byte of character data
    1824:	8f 73       	andi	r24, 0x3F	; 63

00001826 <.LVL104>:
    1826:	20 e6       	ldi	r18, 0x60	; 96
    1828:	82 9f       	mul	r24, r18
    182a:	c0 01       	movw	r24, r0
    182c:	11 24       	eor	r1, r1
    182e:	81 52       	subi	r24, 0x21	; 33
    1830:	9c 4f       	sbci	r25, 0xFC	; 252

00001832 <.LVL105>:
 if ((temp1 & 0x40) == 0) icon_xx += (SCREEN_WIDTH / (ONE_B/4)); // right side
    1832:	28 e0       	ldi	r18, 0x08	; 8
    1834:	36 ff       	sbrs	r19, 6
    1836:	28 e4       	ldi	r18, 0x48	; 72

00001838 <.Loc.278>:
 icon_xx =  TP_WIDTH;		// left side 
    1838:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <icon_xx>

0000183c <.Loc.279>:
 icon_yy = 0;
    183c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <icon_yy>

00001840 <.Loc.281>:
 if ((temp1 & 0x80) == 0) {
    1840:	37 fd       	sbrc	r19, 7
    1842:	06 c0       	rjmp	.+12     	; 0x1850 <.L59>

00001844 <.Loc.283>:
   icon_yy = HALF_SCREEN_HEIGHT;	// lower half of display
    1844:	30 e2       	ldi	r19, 0x20	; 32

00001846 <.LVL106>:
    1846:	30 93 00 01 	sts	0x0100, r19	; 0x800100 <icon_yy>

0000184a <.Loc.286>:
   icon_xx +=  (SCREEN_WIDTH / (ONE_B/4))  - ICON_WIDTH - TP_WIDTH - TP_WIDTH - DIODE_WIDTH;
    184a:	2d 5e       	subi	r18, 0xED	; 237
    184c:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <icon_xx>

00001850 <.L59>:
 lcd_set_pixels( pfont, icon_xx, icon_yy, 0, ICON_WIDTH, ICON_HEIGHT);	// write the pixel data of the Icon
    1850:	20 e2       	ldi	r18, 0x20	; 32
    1852:	e2 2e       	mov	r14, r18
    1854:	08 e1       	ldi	r16, 0x18	; 24
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <icon_yy>
    185c:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <icon_xx>
    1860:	66 df       	rcall	.-308    	; 0x172e <lcd_set_pixels>

00001862 <.LVL107>:
} /* end lcd_big_icon() */
    1862:	0f 91       	pop	r16
    1864:	ef 90       	pop	r14
    1866:	08 95       	ret

00001868 <lcd_update_icon_opt>:
void lcd_update_icon_opt(const unsigned char *ubitmap, unsigned char options) {
    1868:	ef 92       	push	r14

0000186a <.LCFI8>:
    186a:	0f 93       	push	r16

0000186c <.LCFI9>:
    186c:	dc 01       	movw	r26, r24
    186e:	26 2f       	mov	r18, r22

00001870 <.LBB6>:
 xx = icon_xx + pgm_read_byte(&ubitmap[0]);	// first byte = offset x to left (upper) corner of the Icon
    1870:	fc 01       	movw	r30, r24
    1872:	64 91       	lpm	r22, Z

00001874 <.LBB7>:
 yy = icon_yy + pgm_read_byte(&ubitmap[1]);	// second byte = offset y to (left) upper corner of the Icon
    1874:	31 96       	adiw	r30, 0x01	; 1

00001876 <.LVL111>:
    1876:	44 91       	lpm	r20, Z

00001878 <.LBB8>:
 ww =  pgm_read_byte(&ubitmap[2]);		// the width of the bitfield
    1878:	31 96       	adiw	r30, 0x01	; 1

0000187a <.LVL113>:
    187a:	04 91       	lpm	r16, Z

0000187c <.LBB9>:
 hh =  pgm_read_byte(&ubitmap[3]);		// the height of the bitfield (must be multiple of 8 for ST7565)
    187c:	31 96       	adiw	r30, 0x01	; 1

0000187e <.LVL115>:
    187e:	e4 90       	lpm	r14, Z

00001880 <.LBE9>:
 yy = icon_yy + pgm_read_byte(&ubitmap[1]);	// second byte = offset y to (left) upper corner of the Icon
    1880:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <icon_yy>

00001884 <.LVL117>:
    1884:	48 0f       	add	r20, r24

00001886 <.LVL118>:
 xx = icon_xx + pgm_read_byte(&ubitmap[0]);	// first byte = offset x to left (upper) corner of the Icon
    1886:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <icon_xx>
    188a:	68 0f       	add	r22, r24

0000188c <.LVL119>:
 lcd_set_pixels( pfont, xx, yy, options, ww, hh);	// update the icon at the specified position with specified size
    188c:	cd 01       	movw	r24, r26
    188e:	04 96       	adiw	r24, 0x04	; 4

00001890 <.LVL120>:
    1890:	4e df       	rcall	.-356    	; 0x172e <lcd_set_pixels>

00001892 <.LVL121>:
} /* end lcd_update_icon_opt() */
    1892:	0f 91       	pop	r16

00001894 <.LVL122>:
    1894:	ef 90       	pop	r14

00001896 <.LVL123>:
    1896:	08 95       	ret

00001898 <lcd_update_icon>:
 lcd_update_icon_opt(ubitmap, 0);	// call with no special option
    1898:	60 e0       	ldi	r22, 0x00	; 0
    189a:	e6 cf       	rjmp	.-52     	; 0x1868 <lcd_update_icon_opt>

0000189c <.LVL125>:
}
    189c:	08 95       	ret

0000189e <lcd_data>:
void lcd_data(unsigned char temp1) {
    189e:	ef 92       	push	r14

000018a0 <.LCFI10>:
    18a0:	0f 93       	push	r16

000018a2 <.LCFI11>:
_lcd_column++;
    18a2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_lcd_column>
    18a6:	9f 5f       	subi	r25, 0xFF	; 255
    18a8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_lcd_column>

000018ac <.Loc.339>:
  pfont = (uint8_t *)sfont + (SFONT_WIDTH * PAGES_PER_LINE * temp1);	// first byte of character data
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0

000018b0 <.Loc.342>:
  lcd_set_pixels( pfont, _xpos, _page*8, 0, (unsigned char)SFONT_WIDTH, (unsigned char)(PAGES_PER_LINE*8));
    18b0:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <_page>
    18b4:	44 0f       	add	r20, r20
    18b6:	44 0f       	add	r20, r20
    18b8:	44 0f       	add	r20, r20
    18ba:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <_xpos>

000018be <.Loc.343>:
 if (temp1 < 12) {
    18be:	8c 30       	cpi	r24, 0x0C	; 12
    18c0:	b0 f4       	brcc	.+44     	; 0x18ee <.L64>

000018c2 <.Loc.344>:
  pfont = (uint8_t *)sfont + (SFONT_WIDTH * PAGES_PER_LINE * temp1);	// first byte of character data
    18c2:	5e e0       	ldi	r21, 0x0E	; 14
    18c4:	52 9f       	mul	r21, r18
    18c6:	c0 01       	movw	r24, r0
    18c8:	53 9f       	mul	r21, r19
    18ca:	90 0d       	add	r25, r0
    18cc:	11 24       	eor	r1, r1

000018ce <.LVL128>:
  lcd_set_pixels( pfont, _xpos, _page*8, 0, (unsigned char)SFONT_WIDTH, (unsigned char)(PAGES_PER_LINE*8));
    18ce:	30 e1       	ldi	r19, 0x10	; 16
    18d0:	e3 2e       	mov	r14, r19
    18d2:	07 e0       	ldi	r16, 0x07	; 7
    18d4:	20 e0       	ldi	r18, 0x00	; 0

000018d6 <.LVL129>:
    18d6:	81 5e       	subi	r24, 0xE1	; 225
    18d8:	93 4f       	sbci	r25, 0xF3	; 243
    18da:	29 df       	rcall	.-430    	; 0x172e <lcd_set_pixels>

000018dc <.LVL130>:
 _xpos += FONT_H_SPACE;		// move pointer to the next character position
    18dc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_xpos>
    18e0:	89 5f       	subi	r24, 0xF9	; 249

000018e2 <.L65>:
    18e2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_xpos>

000018e6 <.Loc.352>:
 wdt_reset();
    18e6:	a8 95       	wdr

000018e8 <.Loc.353>:
} /* end lcd_data() */
    18e8:	0f 91       	pop	r16
    18ea:	ef 90       	pop	r14
    18ec:	08 95       	ret

000018ee <.L64>:
  pfont = (uint8_t *)nfont + ((FONT_WIDTH-1) * PAGES_PER_LINE * (temp1-12-16));	// first byte of character data
    18ee:	2c 51       	subi	r18, 0x1C	; 28
    18f0:	31 09       	sbc	r19, r1

000018f2 <.LVL133>:
    18f2:	5c e0       	ldi	r21, 0x0C	; 12
    18f4:	52 9f       	mul	r21, r18
    18f6:	c0 01       	movw	r24, r0
    18f8:	53 9f       	mul	r21, r19
    18fa:	90 0d       	add	r25, r0
    18fc:	11 24       	eor	r1, r1

000018fe <.LVL134>:
  lcd_set_pixels( pfont, _xpos, _page*8, 0, (unsigned char)(FONT_WIDTH-1), (unsigned char)(PAGES_PER_LINE*8));
    18fe:	20 e1       	ldi	r18, 0x10	; 16
    1900:	e2 2e       	mov	r14, r18

00001902 <.Loc.359>:
    1902:	06 e0       	ldi	r16, 0x06	; 6
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	81 58       	subi	r24, 0x81	; 129
    1908:	99 4f       	sbci	r25, 0xF9	; 249
    190a:	11 df       	rcall	.-478    	; 0x172e <lcd_set_pixels>

0000190c <.LVL136>:
 _xpos += (FONT_WIDTH-1);		// move pointer to the next character position
    190c:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <_xpos>
    1910:	6a 5f       	subi	r22, 0xFA	; 250
    1912:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_xpos>

00001916 <.Loc.362>:
  lcd_set_pixels( &nfont[((unsigned char)(' '-12-16))][0], _xpos, _page*8, 0, (unsigned char)(FONT_H_SPACE-(FONT_WIDTH-1)), (unsigned char)(PAGES_PER_LINE*8));
    1916:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <_page>
    191a:	44 0f       	add	r20, r20
    191c:	44 0f       	add	r20, r20
    191e:	44 0f       	add	r20, r20
    1920:	01 e0       	ldi	r16, 0x01	; 1
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	8f ea       	ldi	r24, 0xAF	; 175
    1926:	96 e0       	ldi	r25, 0x06	; 6
    1928:	02 df       	rcall	.-508    	; 0x172e <lcd_set_pixels>

0000192a <.LVL137>:
  _xpos += (FONT_H_SPACE-(FONT_WIDTH-1));
    192a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_xpos>
    192e:	8f 5f       	subi	r24, 0xFF	; 255
    1930:	d8 cf       	rjmp	.-80     	; 0x18e2 <.L65>

00001932 <lcd_testpin>:
   lcd_data(temp + '1' + TP_OFFSET - TP_MIN);
    1932:	8f 5c       	subi	r24, 0xCF	; 207

00001934 <.LVL139>:
    1934:	b4 cf       	rjmp	.-152    	; 0x189e <lcd_data>

00001936 <.LVL140>:
}
    1936:	08 95       	ret

00001938 <lcd_string>:
void lcd_string(char *data) {
    1938:	cf 93       	push	r28

0000193a <.LCFI12>:
    193a:	df 93       	push	r29

0000193c <.LCFI13>:
    193c:	ec 01       	movw	r28, r24

0000193e <.L68>:
    while(*data) {
    193e:	89 91       	ld	r24, Y+

00001940 <.LVL143>:
    1940:	81 11       	cpse	r24, r1
    1942:	03 c0       	rjmp	.+6      	; 0x194a <.L69>

00001944 <.Loc.374>:
}
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28

00001948 <.LVL144>:
    1948:	08 95       	ret

0000194a <.L69>:
        lcd_data(*data);
    194a:	a9 df       	rcall	.-174    	; 0x189e <lcd_data>

0000194c <.LVL146>:
        data++;
    194c:	f8 cf       	rjmp	.-16     	; 0x193e <.L68>

0000194e <lcd_fix_string>:
void lcd_fix_string(const unsigned char *data) {
    194e:	cf 93       	push	r28

00001950 <.LCFI16>:
    1950:	df 93       	push	r29

00001952 <.LCFI17>:
    1952:	ec 01       	movw	r28, r24

00001954 <.L76>:
      cc = MEM_read_byte(data);
    1954:	ce 01       	movw	r24, r28
    1956:	0e 94 15 39 	call	0x722a	; 0x722a <eeprom_read_byte>

0000195a <.LVL156>:
      if (cc==0)  {
    195a:	81 15       	cp	r24, r1
    195c:	19 f0       	breq	.+6      	; 0x1964 <.L77>

0000195e <.Loc.406>:
      lcd_data(cc);
    195e:	9f df       	rcall	.-194    	; 0x189e <lcd_data>

00001960 <.LVL157>:
      data++;
    1960:	21 96       	adiw	r28, 0x01	; 1

00001962 <.Loc.409>:
      cc = MEM_read_byte(data);
    1962:	f8 cf       	rjmp	.-16     	; 0x1954 <.L76>

00001964 <.L77>:
}
    1964:	df 91       	pop	r29
    1966:	cf 91       	pop	r28

00001968 <.LVL160>:
    1968:	08 95       	ret

0000196a <lcd_pgm_bitmap>:
{
    196a:	ef 92       	push	r14

0000196c <.LCFI18>:
    196c:	0f 93       	push	r16

0000196e <.LBB11>:
 dx = (unsigned char)pgm_read_byte(&pbitmap[0]);	// width of the bitmap
    196e:	fc 01       	movw	r30, r24
    1970:	04 91       	lpm	r16, Z

00001972 <.LBB12>:
 dy = (unsigned char)pgm_read_byte(&pbitmap[1]);	// height of the bitmap
    1972:	31 96       	adiw	r30, 0x01	; 1

00001974 <.LVL164>:
    1974:	e4 90       	lpm	r14, Z

00001976 <.LBE12>:
 lcd_set_pixels( (const unsigned char *)(pbitmap+2), x, y, options, dx, dy);
    1976:	02 96       	adiw	r24, 0x02	; 2

00001978 <.LVL166>:
    1978:	da de       	rcall	.-588    	; 0x172e <lcd_set_pixels>

0000197a <.LVL167>:
}
    197a:	0f 91       	pop	r16

0000197c <.LVL168>:
    197c:	ef 90       	pop	r14

0000197e <.LVL169>:
    197e:	08 95       	ret

00001980 <lcd_show_Cg>:
/* ******************************************************************************* */
void lcd_show_Cg(void) {
    1980:	0f 93       	push	r16

00001982 <.LCFI20>:
       lcd_MEM_string(GateCap_str);             //"Cg="
    1982:	80 e8       	ldi	r24, 0x80	; 128
    1984:	91 e0       	ldi	r25, 0x01	; 1
    1986:	e3 df       	rcall	.-58     	; 0x194e <lcd_fix_string>

00001988 <.LVL170>:
#if FLASHEND > 0x1fff
       if (cap.cpre < -3) {
    1988:	40 91 4e 01 	lds	r20, 0x014E	; 0x80014e <cap+0x12>

0000198c <.Loc.439>:
    198c:	4d 3f       	cpi	r20, 0xFD	; 253
    198e:	6c f4       	brge	.+26     	; 0x19aa <.L80>

00001990 <.Loc.440>:
          DisplayValue(cap.cval,cap.cpre,'F',3);
    1990:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <cap>
    1994:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <cap+0x1>
    1998:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <cap+0x2>
    199c:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <cap+0x3>
    19a0:	03 e0       	ldi	r16, 0x03	; 3
    19a2:	26 e4       	ldi	r18, 0x46	; 70
    19a4:	19 d0       	rcall	.+50     	; 0x19d8 <DisplayValue>

000019a6 <.L79>:
          lcd_data('?');
       }
#else
       DisplayValue(cap.cval,cap.cpre,'F',3);
#endif
}
    19a6:	0f 91       	pop	r16
    19a8:	08 95       	ret

000019aa <.L80>:
          lcd_data('?');
    19aa:	8f e3       	ldi	r24, 0x3F	; 63
    19ac:	78 df       	rcall	.-272    	; 0x189e <lcd_data>

000019ae <.LVL172>:
}
    19ae:	fb cf       	rjmp	.-10     	; 0x19a6 <.L79>

000019b0 <lcd_show_rds>:
#ifdef SHOW_R_DS
void lcd_show_rds(uint8_t xpos)
{
       if ((PartMode&0x0f) == PART_MODE_MOS) {     /* kein JFET or IGBT */
    19b0:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <PartMode>
    19b4:	9f 70       	andi	r25, 0x0F	; 15
    19b6:	92 30       	cpi	r25, 0x02	; 2
    19b8:	71 f4       	brne	.+28     	; 0x19d6 <.L82>

000019ba <.Loc.447>:
          lcd_next_line_wait(xpos);
    19ba:	9e de       	rcall	.-708    	; 0x16f8 <lcd_next_line_wait>

000019bc <.LVL174>:
          lcd_MEM_string(RDS_str);		// "RDS=
    19bc:	84 e6       	ldi	r24, 0x64	; 100
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	c6 df       	rcall	.-116    	; 0x194e <lcd_fix_string>

000019c2 <.LVL175>:
          DisplayValue16(_trans->uBE,-1,LCD_CHAR_OMEGA,2);	// Drain-Source resistance
    19c2:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    19c6:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    19ca:	22 e0       	ldi	r18, 0x02	; 2
    19cc:	4d e1       	ldi	r20, 0x1D	; 29
    19ce:	6f ef       	ldi	r22, 0xFF	; 255
    19d0:	84 81       	ldd	r24, Z+4	; 0x04
    19d2:	95 81       	ldd	r25, Z+5	; 0x05
    19d4:	06 c1       	rjmp	.+524    	; 0x1be2 <DisplayValue16>

000019d6 <.L82>:
       }
}
    19d6:	08 95       	ret

000019d8 <DisplayValue>:
 *  Flag 0x10 for output with leading zeros
 *  Flag 0x20 for '+' Output, if not '-' 
 */

void DisplayValue(signed long signedValue, int8_t Exponent, unsigned char Unit, uint8_t xdigits)
{
    19d8:	4f 92       	push	r4

000019da <.LCFI0>:
    19da:	5f 92       	push	r5

000019dc <.LCFI1>:
    19dc:	6f 92       	push	r6

000019de <.LCFI2>:
    19de:	7f 92       	push	r7

000019e0 <.LCFI3>:
    19e0:	9f 92       	push	r9

000019e2 <.LCFI4>:
    19e2:	af 92       	push	r10

000019e4 <.LCFI5>:
    19e4:	bf 92       	push	r11

000019e6 <.LCFI6>:
    19e6:	cf 92       	push	r12

000019e8 <.LCFI7>:
    19e8:	df 92       	push	r13

000019ea <.LCFI8>:
    19ea:	ef 92       	push	r14

000019ec <.LCFI9>:
    19ec:	ff 92       	push	r15

000019ee <.LCFI10>:
    19ee:	0f 93       	push	r16

000019f0 <.LCFI11>:
    19f0:	1f 93       	push	r17

000019f2 <.LCFI12>:
    19f2:	cf 93       	push	r28

000019f4 <.LCFI13>:
    19f4:	df 93       	push	r29

000019f6 <.LCFI14>:
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62

000019fa <.LCFI15>:
    19fa:	2e 97       	sbiw	r28, 0x0e	; 14

000019fc <.LCFI16>:
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	6b 01       	movw	r12, r22
    1a08:	7c 01       	movw	r14, r24
    1a0a:	94 2e       	mov	r9, r20
    1a0c:	b2 2e       	mov	r11, r18

00001a0e <.LVL1>:
  uint8_t           Length;		/* string length */
  uint8_t	    Rshift;		/* right shift of significant bits with leading '0' */


  unsigned long Value=signedValue;
  digits = xdigits & 0x0f;
    1a0e:	20 2f       	mov	r18, r16

00001a10 <.LVL2>:
    1a10:	2f 70       	andi	r18, 0x0F	; 15
    1a12:	a2 2e       	mov	r10, r18

00001a14 <.LVL3>:
  for(Prefix=0;Prefix<6;Prefix++) OutBuffer[Prefix] = '0';
    1a14:	80 e3       	ldi	r24, 0x30	; 48
    1a16:	89 83       	std	Y+1, r24	; 0x01

00001a18 <.LVL4>:
    1a18:	8a 83       	std	Y+2, r24	; 0x02

00001a1a <.LVL5>:
    1a1a:	8b 83       	std	Y+3, r24	; 0x03

00001a1c <.LVL6>:
    1a1c:	8c 83       	std	Y+4, r24	; 0x04

00001a1e <.LVL7>:
    1a1e:	8d 83       	std	Y+5, r24	; 0x05

00001a20 <.LVL8>:
    1a20:	8e 83       	std	Y+6, r24	; 0x06

00001a22 <.LVL9>:

#if FLASHEND > 0x1fff
  if (signedValue<0) {
    1a22:	f7 fe       	sbrs	r15, 7
    1a24:	43 c0       	rjmp	.+134    	; 0x1aac <.L2>

00001a26 <.Loc.42>:
     lcd_minus();		// lcd_data('-');
    1a26:	a2 d9       	rcall	.-3260   	; 0xd6c <lcd_minus>

00001a28 <.LVL10>:
     Value=-signedValue;
    1a28:	66 27       	eor	r22, r22
    1a2a:	77 27       	eor	r23, r23
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	6c 19       	sub	r22, r12
    1a30:	7d 09       	sbc	r23, r13
    1a32:	8e 09       	sbc	r24, r14
    1a34:	9f 09       	sbc	r25, r15

00001a36 <.L3>:
     if ((xdigits & 0x20) != 0) lcd_data('+');
  }
#endif

  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
    1a36:	23 e0       	ldi	r18, 0x03	; 3

00001a38 <.Loc.48>:
    1a38:	f8 ee       	ldi	r31, 0xE8	; 232
    1a3a:	cf 2e       	mov	r12, r31
    1a3c:	f3 e0       	ldi	r31, 0x03	; 3
    1a3e:	df 2e       	mov	r13, r31
    1a40:	e1 2c       	mov	r14, r1
    1a42:	f1 2c       	mov	r15, r1

00001a44 <.Loc.49>:
    1a44:	a2 16       	cp	r10, r18
    1a46:	61 f1       	breq	.+88     	; 0x1aa0 <.L5>

00001a48 <.Loc.50>:
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
    1a48:	24 e0       	ldi	r18, 0x04	; 4

00001a4a <.Loc.52>:
    1a4a:	e0 e1       	ldi	r30, 0x10	; 16
    1a4c:	ce 2e       	mov	r12, r30
    1a4e:	e7 e2       	ldi	r30, 0x27	; 39
    1a50:	de 2e       	mov	r13, r30
    1a52:	e1 2c       	mov	r14, r1
    1a54:	f1 2c       	mov	r15, r1

00001a56 <.Loc.53>:
    1a56:	a2 16       	cp	r10, r18
    1a58:	19 f1       	breq	.+70     	; 0x1aa0 <.L5>

00001a5a <.Loc.54>:
#ifdef LONG_OUTPUT
  if (digits == 5) Limit = 100000;	/* scale value down to 5 digits */
    1a5a:	25 e0       	ldi	r18, 0x05	; 5

00001a5c <.Loc.56>:
    1a5c:	50 ea       	ldi	r21, 0xA0	; 160
    1a5e:	c5 2e       	mov	r12, r21
    1a60:	56 e8       	ldi	r21, 0x86	; 134
    1a62:	d5 2e       	mov	r13, r21
    1a64:	ee 24       	eor	r14, r14
    1a66:	e3 94       	inc	r14
    1a68:	f1 2c       	mov	r15, r1

00001a6a <.Loc.57>:
    1a6a:	a2 16       	cp	r10, r18
    1a6c:	c9 f0       	breq	.+50     	; 0x1aa0 <.L5>

00001a6e <.Loc.58>:
  if (digits == 6) Limit = 1000000;	/* scale value down to 6 digits */
    1a6e:	26 e0       	ldi	r18, 0x06	; 6

00001a70 <.Loc.60>:
    1a70:	40 e4       	ldi	r20, 0x40	; 64
    1a72:	c4 2e       	mov	r12, r20
    1a74:	42 e4       	ldi	r20, 0x42	; 66
    1a76:	d4 2e       	mov	r13, r20
    1a78:	4f e0       	ldi	r20, 0x0F	; 15
    1a7a:	e4 2e       	mov	r14, r20
    1a7c:	f1 2c       	mov	r15, r1

00001a7e <.Loc.61>:
    1a7e:	a2 16       	cp	r10, r18
    1a80:	79 f0       	breq	.+30     	; 0x1aa0 <.L5>

00001a82 <.Loc.62>:
  if (digits == 7) Limit = 10000000;	/* scale value down to 7 digits */
    1a82:	27 e0       	ldi	r18, 0x07	; 7
    1a84:	a4 e6       	ldi	r26, 0x64	; 100
    1a86:	ca 2e       	mov	r12, r26
    1a88:	d1 2c       	mov	r13, r1
    1a8a:	e1 2c       	mov	r14, r1
    1a8c:	f1 2c       	mov	r15, r1
    1a8e:	a2 12       	cpse	r10, r18
    1a90:	07 c0       	rjmp	.+14     	; 0x1aa0 <.L5>

00001a92 <.Loc.64>:
    1a92:	30 e8       	ldi	r19, 0x80	; 128
    1a94:	c3 2e       	mov	r12, r19
    1a96:	36 e9       	ldi	r19, 0x96	; 150
    1a98:	d3 2e       	mov	r13, r19
    1a9a:	38 e9       	ldi	r19, 0x98	; 152
    1a9c:	e3 2e       	mov	r14, r19
    1a9e:	f1 2c       	mov	r15, r1

00001aa0 <.L5>:

  while (Value >= Limit)
  {
    Value += 5;				/* for automatic rounding */
    // perhaps TODO: the above is not really correct, can do double rounding (2000.45 -> 2000.5 -> 2001)
    Value = Value / 10;			/* scale down by 10^1 */
    1aa0:	2a e0       	ldi	r18, 0x0A	; 10
    1aa2:	42 2e       	mov	r4, r18
    1aa4:	51 2c       	mov	r5, r1
    1aa6:	61 2c       	mov	r6, r1
    1aa8:	71 2c       	mov	r7, r1
    1aaa:	12 c0       	rjmp	.+36     	; 0x1ad0 <.L6>

00001aac <.L2>:
     if ((xdigits & 0x20) != 0) lcd_data('+');
    1aac:	05 ff       	sbrs	r16, 5
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <.L4>

00001ab0 <.Loc.68>:
    1ab0:	8b e2       	ldi	r24, 0x2B	; 43
    1ab2:	f5 de       	rcall	.-534    	; 0x189e <lcd_data>

00001ab4 <.L4>:
  unsigned long Value=signedValue;
    1ab4:	c7 01       	movw	r24, r14
    1ab6:	b6 01       	movw	r22, r12
    1ab8:	be cf       	rjmp	.-132    	; 0x1a36 <.L3>

00001aba <.L7>:
    Value += 5;				/* for automatic rounding */
    1aba:	6b 5f       	subi	r22, 0xFB	; 251
    1abc:	7f 4f       	sbci	r23, 0xFF	; 255
    1abe:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac0:	9f 4f       	sbci	r25, 0xFF	; 255

00001ac2 <.Loc.72>:
    Value = Value / 10;			/* scale down by 10^1 */
    1ac2:	a3 01       	movw	r20, r6
    1ac4:	92 01       	movw	r18, r4
    1ac6:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00001aca <.LVL17>:
    1aca:	ca 01       	movw	r24, r20
    1acc:	b9 01       	movw	r22, r18

00001ace <.LVL18>:
    Exponent++;				/* increase exponent by 1 */
    1ace:	93 94       	inc	r9

00001ad0 <.L6>:
  while (Value >= Limit)
    1ad0:	6c 15       	cp	r22, r12
    1ad2:	7d 05       	cpc	r23, r13
    1ad4:	8e 05       	cpc	r24, r14
    1ad6:	9f 05       	cpc	r25, r15
    1ad8:	80 f7       	brcc	.-32     	; 0x1aba <.L7>

00001ada <.Loc.78>:
    }
#endif
  // the following is much more concise
  // also removes the limits checking, since limit errors should never happen, and if they do, they'd show _incorrect_ results;
  // showing a garbage prefix character seems preferable to something correct-looking but off by some power of 10
  Index = ((unsigned char)(Exponent+17))/3;
    1ada:	11 e1       	ldi	r17, 0x11	; 17
    1adc:	19 0d       	add	r17, r9

00001ade <.Loc.80>:
    1ade:	2b ea       	ldi	r18, 0xAB	; 171
    1ae0:	12 9f       	mul	r17, r18
    1ae2:	11 2d       	mov	r17, r1
    1ae4:	11 24       	eor	r1, r1
    1ae6:	16 95       	lsr	r17

00001ae8 <.LVL20>:
  Offset = ((unsigned char)(6-Exponent))%3;
    1ae8:	36 e0       	ldi	r19, 0x06	; 6
    1aea:	39 19       	sub	r19, r9

00001aec <.Loc.83>:
    1aec:	32 9f       	mul	r19, r18
    1aee:	21 2d       	mov	r18, r1
    1af0:	11 24       	eor	r1, r1
    1af2:	d2 2e       	mov	r13, r18
    1af4:	d6 94       	lsr	r13
    1af6:	2e 7f       	andi	r18, 0xFE	; 254
    1af8:	2d 0d       	add	r18, r13
    1afa:	d3 2e       	mov	r13, r19
    1afc:	d2 1a       	sub	r13, r18

00001afe <.LBB6>:
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
    1afe:	7e 01       	movw	r14, r28
    1b00:	27 e0       	ldi	r18, 0x07	; 7
    1b02:	e2 0e       	add	r14, r18
    1b04:	f1 1c       	adc	r15, r1
    1b06:	2a e0       	ldi	r18, 0x0A	; 10
    1b08:	a7 01       	movw	r20, r14
    1b0a:	0e 94 c1 38 	call	0x7182	; 0x7182 <__ultoa_ncheck>

00001b0e <.LBE6>:
  ultoa(Value, &OutBuffer[6], 10);	// sprintf(&OutBuffer[6],"%ld%c",Value,(char)0);
#else
  utoa((uint16_t)Value, &OutBuffer[6], 10);	// sprintf(&OutBuffer[6],"%d%c",Value,(char)0);
#endif

  Length = strlen(&OutBuffer[6]);
    1b0e:	f7 01       	movw	r30, r14

00001b10 <.L0^B1>:
    1b10:	01 90       	ld	r0, Z+
    1b12:	00 20       	and	r0, r0
    1b14:	e9 f7       	brne	.-6      	; 0x1b10 <.L0^B1>
    1b16:	31 97       	sbiw	r30, 0x01	; 1
    1b18:	cf 01       	movw	r24, r30
    1b1a:	8e 19       	sub	r24, r14
    1b1c:	9f 09       	sbc	r25, r15
    1b1e:	7c 01       	movw	r14, r24

00001b20 <.Loc.94>:
    1b20:	c8 2e       	mov	r12, r24

00001b22 <.LVL23>:

#ifdef LONG_OUTPUT
 #ifdef NO_NANO
  if ((Length > (4+Offset))  && (Index != 0))
 #else
  if (Length > (4+Offset)) 
    1b22:	84 e0       	ldi	r24, 0x04	; 4
    1b24:	8d 0d       	add	r24, r13

00001b26 <.Loc.97>:
    1b26:	8e 15       	cp	r24, r14
    1b28:	1f 04       	cpc	r1, r15
    1b2a:	1c f4       	brge	.+6      	; 0x1b32 <.L8>

00001b2c <.Loc.98>:
 #endif
    {
      Index++;			/* take next prefix for better readable string */
    1b2c:	1f 5f       	subi	r17, 0xFF	; 255

00001b2e <.Loc.100>:
      Offset += 3;		/* decimal point 3 to the left */
    1b2e:	93 e0       	ldi	r25, 0x03	; 3
    1b30:	d9 0e       	add	r13, r25

00001b32 <.L8>:
      Index++;				/* use mikro instead of nano */
      Offset += 3;			/* can be 3,4 or 5 */
    }
#endif

  Prefix = MEM_read_byte((unsigned char *)(&PrefixTab[Index]));   /* look up prefix in table */
    1b32:	81 2f       	mov	r24, r17
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	84 5d       	subi	r24, 0xD4	; 212
    1b38:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3a:	0e 94 15 39 	call	0x722a	; 0x722a <eeprom_read_byte>

00001b3e <.LVL26>:
    1b3e:	98 2e       	mov	r9, r24

00001b40 <.LVL27>:

   */


  /* position of dot */
  if (((xdigits & 0x10) != 0) && (digits > Length)) {
    1b40:	00 71       	andi	r16, 0x10	; 16

00001b42 <.LVL28>:
    1b42:	01 15       	cp	r16, r1
    1b44:	29 f0       	breq	.+10     	; 0x1b50 <.L9>

00001b46 <.Loc.106>:
     Rshift = (digits - Length);	// use previous filled '0' characters
    1b46:	0a 2d       	mov	r16, r10
    1b48:	0e 19       	sub	r16, r14

00001b4a <.Loc.107>:
  if (((xdigits & 0x10) != 0) && (digits > Length)) {
    1b4a:	ca 14       	cp	r12, r10
    1b4c:	08 f0       	brcs	.+2      	; 0x1b50 <.L9>

00001b4e <.Loc.108>:
  } else {
     Rshift = 0;
    1b4e:	00 e0       	ldi	r16, 0x00	; 0

00001b50 <.L9>:
  }

  Exponent = (Length + Rshift) - Offset;		/* calculate position */
    1b50:	ce 2c       	mov	r12, r14
    1b52:	cd 18       	sub	r12, r13
    1b54:	c0 0e       	add	r12, r16

00001b56 <.LVL30>:

  if (Exponent <= 0)			/* we have to prepend "0." */
    1b56:	1c 14       	cp	r1, r12
    1b58:	24 f0       	brlt	.+8      	; 0x1b62 <.L10>

00001b5a <.Loc.113>:
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
    1b5a:	8e e2       	ldi	r24, 0x2E	; 46
    1b5c:	a0 de       	rcall	.-704    	; 0x189e <lcd_data>

00001b5e <.LVL31>:
      }
#else
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
#endif
#else
    Rshift = Offset - Length;
    1b5e:	0d 2d       	mov	r16, r13

00001b60 <.LVL32>:
    1b60:	0e 19       	sub	r16, r14

00001b62 <.L10>:
#endif
  }



  if (Offset == 0) Exponent = -8;	/* disable dot if not needed */
    1b62:	d1 10       	cpse	r13, r1
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <.L11>

00001b66 <.Loc.119>:
    1b66:	88 ef       	ldi	r24, 0xF8	; 248
    1b68:	c8 2e       	mov	r12, r24

00001b6a <.L11>:

//  Exponent--;


  /* display value and add dot if requested */
  Index = 0;
    1b6a:	a1 2c       	mov	r10, r1

00001b6c <.LVL35>:
  while (Index < (Length+Rshift))		/* loop through string */
    1b6c:	10 e0       	ldi	r17, 0x00	; 0
    1b6e:	e0 0e       	add	r14, r16
    1b70:	f1 1e       	adc	r15, r17

00001b72 <.LVL36>:
  {
    lcd_data(OutBuffer[Index+6-Rshift]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
    1b72:	0c 2c       	mov	r0, r12
    1b74:	00 0c       	add	r0, r0
    1b76:	dd 08       	sbc	r13, r13

00001b78 <.L12>:
  while (Index < (Length+Rshift))		/* loop through string */
    1b78:	ea 2d       	mov	r30, r10
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	ae 14       	cp	r10, r14
    1b7e:	1f 04       	cpc	r1, r15
    1b80:	f4 f0       	brlt	.+60     	; 0x1bbe <.L14>

00001b82 <.Loc.126>:



  /* display prefix and unit */

  if (Prefix != 0) {
    1b82:	91 14       	cp	r9, r1
    1b84:	11 f0       	breq	.+4      	; 0x1b8a <.L15>

00001b86 <.Loc.128>:
     lcd_data(Prefix);
    1b86:	89 2d       	mov	r24, r9
    1b88:	8a de       	rcall	.-748    	; 0x189e <lcd_data>

00001b8a <.L15>:
  }

  if (Unit != 0) {
    1b8a:	b1 14       	cp	r11, r1
    1b8c:	11 f0       	breq	.+4      	; 0x1b92 <.L1>

00001b8e <.Loc.131>:
      lcd_data(Unit);
    1b8e:	8b 2d       	mov	r24, r11
    1b90:	86 de       	rcall	.-756    	; 0x189e <lcd_data>

00001b92 <.L1>:
  }
  return;
}
    1b92:	2e 96       	adiw	r28, 0x0e	; 14
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	1f 91       	pop	r17
    1ba4:	0f 91       	pop	r16

00001ba6 <.LVL40>:
    1ba6:	ff 90       	pop	r15
    1ba8:	ef 90       	pop	r14
    1baa:	df 90       	pop	r13

00001bac <.LVL41>:
    1bac:	cf 90       	pop	r12

00001bae <.LVL42>:
    1bae:	bf 90       	pop	r11

00001bb0 <.LVL43>:
    1bb0:	af 90       	pop	r10

00001bb2 <.LVL44>:
    1bb2:	9f 90       	pop	r9

00001bb4 <.LVL45>:
    1bb4:	7f 90       	pop	r7
    1bb6:	6f 90       	pop	r6
    1bb8:	5f 90       	pop	r5
    1bba:	4f 90       	pop	r4
    1bbc:	08 95       	ret

00001bbe <.L14>:
    lcd_data(OutBuffer[Index+6-Rshift]);		/* display char */
    1bbe:	36 96       	adiw	r30, 0x06	; 6
    1bc0:	e0 1b       	sub	r30, r16
    1bc2:	f1 0b       	sbc	r31, r17

00001bc4 <.Loc.142>:
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	8c 0f       	add	r24, r28
    1bca:	9d 1f       	adc	r25, r29
    1bcc:	e8 0f       	add	r30, r24
    1bce:	f9 1f       	adc	r31, r25

00001bd0 <.Loc.143>:
    1bd0:	80 81       	ld	r24, Z
    1bd2:	65 de       	rcall	.-822    	; 0x189e <lcd_data>

00001bd4 <.LVL47>:
    Index++;				/* next one */
    1bd4:	a3 94       	inc	r10

00001bd6 <.Loc.146>:
    if (Index == Exponent) {
    1bd6:	ac 14       	cp	r10, r12
    1bd8:	1d 04       	cpc	r1, r13
    1bda:	71 f6       	brne	.-100    	; 0x1b78 <.L12>

00001bdc <.Loc.148>:
      lcd_data('.');			/* display dot */
    1bdc:	8e e2       	ldi	r24, 0x2E	; 46
    1bde:	5f de       	rcall	.-834    	; 0x189e <lcd_data>

00001be0 <.LVL49>:
    1be0:	cb cf       	rjmp	.-106    	; 0x1b78 <.L12>

00001be2 <DisplayValue16>:

void DisplayValue16(uint16_t Value, int8_t Exponent, unsigned char Unit, uint8_t digits)
{
    1be2:	0f 93       	push	r16

00001be4 <.LCFI17>:
    1be4:	36 2f       	mov	r19, r22
    1be6:	02 2f       	mov	r16, r18

00001be8 <.Loc.151>:
 DisplayValue((signed long)Value, Exponent, Unit, digits);
    1be8:	bc 01       	movw	r22, r24

00001bea <.LVL51>:
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	90 e0       	ldi	r25, 0x00	; 0

00001bee <.LVL52>:
    1bee:	24 2f       	mov	r18, r20

00001bf0 <.LVL53>:
    1bf0:	43 2f       	mov	r20, r19

00001bf2 <.LVL54>:
    1bf2:	f2 de       	rcall	.-540    	; 0x19d8 <DisplayValue>

00001bf4 <.LVL55>:
}
    1bf4:	0f 91       	pop	r16

00001bf6 <.LVL56>:
    1bf6:	08 95       	ret

00001bf8 <Display_mV>:

void Display_mV(uint16_t xx, uint8_t ll) {
    1bf8:	0f 93       	push	r16

00001bfa <.LCFI18>:
    1bfa:	06 2f       	mov	r16, r22

00001bfc <.Loc.160>:
 DisplayValue((long)xx,-3,'V',ll);
    1bfc:	bc 01       	movw	r22, r24

00001bfe <.LVL58>:
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	90 e0       	ldi	r25, 0x00	; 0

00001c02 <.LVL59>:
    1c02:	26 e5       	ldi	r18, 0x56	; 86
    1c04:	4d ef       	ldi	r20, 0xFD	; 253
    1c06:	e8 de       	rcall	.-560    	; 0x19d8 <DisplayValue>

00001c08 <.LVL60>:
}
    1c08:	0f 91       	pop	r16

00001c0a <.LVL61>:
    1c0a:	08 95       	ret

00001c0c <Display_Hz>:
#if defined(WITH_MENU) || defined(WITH_XTAL)
void Display_Hz(unsigned long xx, uint8_t dd) {
    1c0c:	0f 93       	push	r16

00001c0e <.LCFI19>:
    1c0e:	04 2f       	mov	r16, r20

00001c10 <.Loc.167>:
 DisplayValue(xx,0,'H',dd);
    1c10:	28 e4       	ldi	r18, 0x48	; 72
    1c12:	40 e0       	ldi	r20, 0x00	; 0

00001c14 <.LVL63>:
    1c14:	e1 de       	rcall	.-574    	; 0x19d8 <DisplayValue>

00001c16 <.LVL64>:
 lcd_data('z');
    1c16:	8a e7       	ldi	r24, 0x7A	; 122
    1c18:	42 de       	rcall	.-892    	; 0x189e <lcd_data>

00001c1a <.LVL65>:
 lcd_space();
    1c1a:	a6 d8       	rcall	.-3764   	; 0xd68 <lcd_space>

00001c1c <.LVL66>:
}
    1c1c:	0f 91       	pop	r16

00001c1e <.LVL67>:
    1c1e:	08 95       	ret

00001c20 <lcd_draw_pin>:

void lcd_draw_pin(unsigned char index, char dx, char dy)
{
   const unsigned char *pbmp;

   pbmp = (const unsigned char *)pgm_read_word(&bmp_number[index]);
    1c20:	e8 2f       	mov	r30, r24
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	ee 0f       	add	r30, r30
    1c26:	ff 1f       	adc	r31, r31

00001c28 <.LVL1>:
    1c28:	e0 57       	subi	r30, 0x70	; 112
    1c2a:	fe 4f       	sbci	r31, 0xFE	; 254

00001c2c <.LVL2>:
    1c2c:	85 91       	lpm	r24, Z+
    1c2e:	94 91       	lpm	r25, Z

00001c30 <.LBE2>:
   lcd_pgm_bitmap(pbmp, icon_xx + dx, icon_yy + dy, 0);
    1c30:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <icon_yy>
    1c34:	42 0f       	add	r20, r18

00001c36 <.LVL4>:
    1c36:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <icon_xx>
    1c3a:	62 0f       	add	r22, r18

00001c3c <.LVL5>:
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	95 ce       	rjmp	.-726    	; 0x196a <lcd_pgm_bitmap>

00001c40 <.LVL6>:
}
    1c40:	08 95       	ret

00001c42 <lcd_draw_trans_pins>:

//*****************************************************************************
// Draw the transistor pin numbers of transistor _trans to the last icon location
// only the position of the base pin is selectable
void lcd_draw_trans_pins( char dxb, char dyb)
{
    1c42:	cf 93       	push	r28

00001c44 <.LCFI0>:
    1c44:	df 93       	push	r29

00001c46 <.LCFI1>:
    1c46:	c8 2f       	mov	r28, r24
    1c48:	d6 2f       	mov	r29, r22

00001c4a <.Loc.15>:
//   const unsigned char *pbmp;

   lcd_draw_pin(_trans->e, 30, 24);	// relative to icon position
    1c4a:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    1c4e:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    1c52:	48 e1       	ldi	r20, 0x18	; 24
    1c54:	6e e1       	ldi	r22, 0x1E	; 30

00001c56 <.LVL8>:
    1c56:	86 85       	ldd	r24, Z+14	; 0x0e

00001c58 <.LVL9>:
    1c58:	e3 df       	rcall	.-58     	; 0x1c20 <lcd_draw_pin>

00001c5a <.LVL10>:
   lcd_draw_pin(_trans->b, dxb, dyb);	// relative to icon position
    1c5a:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    1c5e:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    1c62:	4d 2f       	mov	r20, r29
    1c64:	6c 2f       	mov	r22, r28
    1c66:	84 85       	ldd	r24, Z+12	; 0x0c
    1c68:	db df       	rcall	.-74     	; 0x1c20 <lcd_draw_pin>

00001c6a <.LVL11>:
   lcd_draw_pin(_trans->c, 30, 0);	// relative to icon position
    1c6a:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    1c6e:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    1c72:	40 e0       	ldi	r20, 0x00	; 0
    1c74:	6e e1       	ldi	r22, 0x1E	; 30
    1c76:	85 85       	ldd	r24, Z+13	; 0x0d
    1c78:	d3 df       	rcall	.-90     	; 0x1c20 <lcd_draw_pin>

00001c7a <.LVL12>:
}
    1c7a:	df 91       	pop	r29

00001c7c <.LVL13>:
    1c7c:	cf 91       	pop	r28

00001c7e <.LVL14>:
    1c7e:	08 95       	ret

00001c80 <check_rotary>:
 #if WITH_ROTARY_SWITCH != 4
  // normal rotary encoder with two switches
  uint8_t new_state;
  uint8_t old_ind;
  new_state = 0;		// reset to A and B switch at low level
  if ((ROTARY_A_REG & (1<<ROTARY_A_PIN)) != 0)  new_state = 1;	// switch A is high
    1c80:	89 b1       	in	r24, 0x09	; 9

00001c82 <.Loc.6>:
    1c82:	83 fb       	bst	r24, 3
    1c84:	88 27       	eor	r24, r24
    1c86:	80 f9       	bld	r24, 0

00001c88 <.LVL1>:
  if ((ROTARY_B_REG & (1<<ROTARY_B_PIN)) != 0)  new_state |= 2;	// switch B is high
    1c88:	49 99       	sbic	0x09, 1	; 9

00001c8a <.Loc.10>:
    1c8a:	82 60       	ori	r24, 0x02	; 2

00001c8c <.Loc.11>:
  if (rotary.ind > ROT_MSK) {	// index is out of range, initialize
    1c8c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rotary+0x4>
    1c90:	94 30       	cpi	r25, 0x04	; 4
    1c92:	50 f0       	brcs	.+20     	; 0x1ca8 <.L3>

00001c94 <.Loc.13>:
//    rotary.state[0] = new_state;
    rotary.state[0] = '>' - '0';
    1c94:	9e e0       	ldi	r25, 0x0E	; 14
    1c96:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <rotary>

00001c9a <.Loc.15>:
    rotary.state[1] = new_state;
    1c9a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <rotary+0x1>

00001c9e <.Loc.17>:
//    for (rotary.ind=2; rotary.ind<16;rotary.ind++) rotary.state[rotary.ind] = ' ' - '0';
    rotary.count = 0;	// reset counter to zero
    1c9e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rotary+0x5>

00001ca2 <.Loc.19>:
    rotary.ind = 1;	// set initial index to 1
    1ca2:	91 e0       	ldi	r25, 0x01	; 1
    1ca4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rotary+0x4>

00001ca8 <.L3>:
  }
  if (rotary.state[rotary.ind] != new_state) {
    1ca8:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <rotary+0x4>
    1cac:	ae 2f       	mov	r26, r30
    1cae:	b0 e0       	ldi	r27, 0x00	; 0

00001cb0 <.Loc.23>:
    1cb0:	a3 5f       	subi	r26, 0xF3	; 243
    1cb2:	be 4f       	sbci	r27, 0xFE	; 254
    1cb4:	2c 91       	ld	r18, X

00001cb6 <.Loc.24>:
    1cb6:	28 17       	cp	r18, r24
    1cb8:	c1 f0       	breq	.+48     	; 0x1cea <.L4>

00001cba <.LVL3>:
     // There are three states to monitor, the new_state, the last rotary.state[rotary.ind] and
     // the state before rotary.state[old_ind] .
     old_ind = (rotary.ind + ROT_MSK) & ROT_MSK;	// the index of the state before rotary.ind
  #if WITH_ROTARY_SWITCH != 3
     // type 1, 2 and 5
     if ((new_state == 0) && (rotary.state[rotary.ind] == 2) && (rotary.state[old_ind] == 3)) {
    1cba:	81 11       	cpse	r24, r1
    1cbc:	0e c0       	rjmp	.+28     	; 0x1cda <.L5>

00001cbe <.Loc.28>:
        // 320 +
        rotary.count++;
    1cbe:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rotary+0x5>

00001cc2 <.Loc.29>:
     old_ind = (rotary.ind + ROT_MSK) & ROT_MSK;	// the index of the state before rotary.ind
    1cc2:	a3 e0       	ldi	r26, 0x03	; 3
    1cc4:	ae 0f       	add	r26, r30

00001cc6 <.LVL4>:
    1cc6:	a3 70       	andi	r26, 0x03	; 3

00001cc8 <.LVL5>:
     if ((new_state == 0) && (rotary.state[rotary.ind] == 2) && (rotary.state[old_ind] == 3)) {
    1cc8:	22 30       	cpi	r18, 0x02	; 2
    1cca:	b1 f4       	brne	.+44     	; 0x1cf8 <.L6>

00001ccc <.Loc.32>:
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	a3 5f       	subi	r26, 0xF3	; 243
    1cd0:	be 4f       	sbci	r27, 0xFE	; 254

00001cd2 <.Loc.33>:
    1cd2:	2c 91       	ld	r18, X

00001cd4 <.Loc.34>:
        rotary.count++;
    1cd4:	9f 5f       	subi	r25, 0xFF	; 255

00001cd6 <.Loc.35>:
     if ((new_state == 0) && (rotary.state[rotary.ind] == 2) && (rotary.state[old_ind] == 3)) {
    1cd6:	23 30       	cpi	r18, 0x03	; 3
    1cd8:	c1 f0       	breq	.+48     	; 0x1d0a <.L11>

00001cda <.L5>:
        // 102 -
        rotary.count--;
     }
  #endif
    
     rotary.ind = (rotary.ind + 1) & ROT_MSK;	// update to next entry
    1cda:	ef 5f       	subi	r30, 0xFF	; 255

00001cdc <.LVL6>:
    1cdc:	e3 70       	andi	r30, 0x03	; 3

00001cde <.Loc.39>:
    1cde:	e0 93 11 01 	sts	0x0111, r30	; 0x800111 <rotary+0x4>

00001ce2 <.Loc.40>:
     rotary.state[rotary.ind] = new_state;	// save the new state to the history
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0

00001ce4 <.Loc.42>:
    1ce4:	e3 5f       	subi	r30, 0xF3	; 243
    1ce6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce8:	80 83       	st	Z, r24

00001cea <.L4>:
  if ((ROTARY_B_REG & (1<<ROTARY_B_PIN)) != 0)  rotary.b_state += 1;	// switch B is high
  if (rotary.b_state == 0x80) {
     rotary.count = -1;		// set counter to -1
  }
 #endif	/* WITH_ROTARY_SWITCH == 4 */
  if (rotary.count >= 0) {
    1cea:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rotary+0x5>

00001cee <.LVL9>:
     rotary.incre = rotary.count;	// absolute value of count
  } else {
     rotary.incre = -rotary.count;	// absolute value of count
    1cee:	87 fd       	sbrc	r24, 7
    1cf0:	81 95       	neg	r24

00001cf2 <.Loc.46>:
     rotary.incre = rotary.count;	// absolute value of count
    1cf2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rotary+0x6>

00001cf6 <.Loc.47>:
  }
}  /* end check_rotary() */
    1cf6:	08 95       	ret

00001cf8 <.L6>:
     if ((new_state == 0) && (rotary.state[rotary.ind] == 1) && (rotary.state[old_ind] == 3)) {
    1cf8:	21 30       	cpi	r18, 0x01	; 1
    1cfa:	79 f7       	brne	.-34     	; 0x1cda <.L5>

00001cfc <.Loc.50>:
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	a3 5f       	subi	r26, 0xF3	; 243
    1d00:	be 4f       	sbci	r27, 0xFE	; 254

00001d02 <.Loc.51>:
    1d02:	2c 91       	ld	r18, X
    1d04:	23 30       	cpi	r18, 0x03	; 3
    1d06:	49 f7       	brne	.-46     	; 0x1cda <.L5>

00001d08 <.Loc.52>:
        rotary.count--;
    1d08:	91 50       	subi	r25, 0x01	; 1

00001d0a <.L11>:
    1d0a:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <rotary+0x5>
    1d0e:	e5 cf       	rjmp	.-54     	; 0x1cda <.L5>

00001d10 <wait_for_key_ms>:
uint8_t wait_for_key_ms(int max_time) {
    1d10:	a0 e0       	ldi	r26, 0x00	; 0
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	ee e8       	ldi	r30, 0x8E	; 142
    1d16:	fe e0       	ldi	r31, 0x0E	; 14
    1d18:	0c 94 94 38 	jmp	0x7128	; 0x7128 <.Loc.10>

00001d1c <.L1^B1>:
    1d1c:	e8 2e       	mov	r14, r24
    1d1e:	d9 2e       	mov	r13, r25

00001d20 <.Loc.56>:
  ROTARY_A_DDR &= ~(1<<ROTARY_A_PIN);	// switch A to input
    1d20:	53 98       	cbi	0x0a, 3	; 10

00001d22 <.Loc.63>:
  ROTARY_B_DDR &= ~(1<<ROTARY_B_PIN);	// switch B to input
    1d22:	51 98       	cbi	0x0a, 1	; 10

00001d24 <.Loc.65>:
  wait1ms();
    1d24:	20 d9       	rcall	.-3520   	; 0xf66 <wait1ms>

00001d26 <.LVL12>:
  rotary.count = 0;			// clear count, but don't clear the state history
    1d26:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rotary+0x5>

00001d2a <.Loc.68>:
  rotary.state[(rotary.ind+ROT_MSK-2)&ROT_MSK] = ' ' - '0';  // for debugging
    1d2a:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <rotary+0x4>
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0

00001d30 <.Loc.70>:
    1d30:	31 96       	adiw	r30, 0x01	; 1

00001d32 <.Loc.71>:
    1d32:	e3 70       	andi	r30, 0x03	; 3
    1d34:	ff 27       	eor	r31, r31

00001d36 <.Loc.72>:
    1d36:	e3 5f       	subi	r30, 0xF3	; 243
    1d38:	fe 4f       	sbci	r31, 0xFE	; 254
    1d3a:	80 ef       	ldi	r24, 0xF0	; 240
    1d3c:	80 83       	st	Z, r24

00001d3e <.LVL13>:
    1d3e:	d5 e6       	ldi	r29, 0x65	; 101

00001d40 <.L13>:
uint8_t wait_for_key_ms(int max_time) {
    1d40:	c9 e1       	ldi	r28, 0x19	; 25

00001d42 <.L16>:
        check_rotary();		// check for change of switch state of the rotary encoder
    1d42:	9e df       	rcall	.-196    	; 0x1c80 <check_rotary>

00001d44 <.LVL16>:
        if ((RST_PIN_REG & (1<<RST_PIN)) != 0)  break; // key is released
    1d44:	4f 9b       	sbis	0x09, 7	; 9
    1d46:	35 c0       	rjmp	.+106    	; 0x1db2 <.L14>

00001d48 <.L17>:
     if (wait_time > 20) wait_time = 0;		// reset time window
    1d48:	ce 2d       	mov	r28, r14
    1d4a:	dd 2d       	mov	r29, r13
    1d4c:	f1 2c       	mov	r15, r1
    1d4e:	15 e5       	ldi	r17, 0x55	; 85
    1d50:	00 e0       	ldi	r16, 0x00	; 0

00001d52 <.L15>:
  while (count_time >= 0) {
    1d52:	d7 fd       	sbrc	r29, 7
    1d54:	39 c0       	rjmp	.+114    	; 0x1dc8 <.L12>
    1d56:	82 e3       	ldi	r24, 0x32	; 50
    1d58:	c8 2e       	mov	r12, r24

00001d5a <.L18>:
        check_rotary();		// check for change of switch state of the rotary encoder
    1d5a:	92 df       	rcall	.-220    	; 0x1c80 <check_rotary>

00001d5c <.LVL20>:
        WaitRotary();		// wait the predefined time, total 10ms
    1d5c:	08 d9       	rcall	.-3568   	; 0xf6e <wait200us>

00001d5e <.LVL21>:
     for (ww=0; ww < (WWend*2) ;ww++) {
    1d5e:	ca 94       	dec	r12

00001d60 <.LVL22>:
    1d60:	e1 f7       	brne	.-8      	; 0x1d5a <.L18>

00001d62 <.Loc.91>:
     key_pressed += key_pressed;	// multiply with 2 is shift to left
    1d62:	11 0f       	add	r17, r17

00001d64 <.Loc.93>:
     if ((RST_PIN_REG & (1<<RST_PIN)) == 0) key_pressed++; // append a 1
    1d64:	4f 9b       	sbis	0x09, 7	; 9

00001d66 <.Loc.95>:
    1d66:	1f 5f       	subi	r17, 0xFF	; 255

00001d68 <.Loc.97>:
     key_pressed &= 0x3f;
    1d68:	1f 73       	andi	r17, 0x3F	; 63

00001d6a <.Loc.100>:
     if(key_pressed == 0x3f) {
    1d6a:	1f 33       	cpi	r17, 0x3F	; 63
    1d6c:	99 f5       	brne	.+102    	; 0x1dd4 <.L20>

00001d6e <.Loc.101>:
        if (key_cs == 0) {
    1d6e:	01 11       	cpse	r16, r1
    1d70:	28 c0       	rjmp	.+80     	; 0x1dc2 <.L39>

00001d72 <.Loc.103>:
           count_time = max_time;	// begin new time period
    1d72:	ce 2d       	mov	r28, r14

00001d74 <.LVL26>:
    1d74:	dd 2d       	mov	r29, r13
    1d76:	05 e0       	ldi	r16, 0x05	; 5

00001d78 <.L23>:
     wdt_reset();
    1d78:	a8 95       	wdr

00001d7a <.Loc.106>:
     if (count_time > 0) {		// count only, if counter > 0
    1d7a:	1c 16       	cp	r1, r28
    1d7c:	1d 06       	cpc	r1, r29
    1d7e:	24 f4       	brge	.+8      	; 0x1d88 <.L25>

00001d80 <.Loc.108>:
        if (count_time == 0) count_time = -1;	// never count to zero, zero is endless!
    1d80:	2a 97       	sbiw	r28, 0x0a	; 10

00001d82 <.LVL28>:
    1d82:	11 f4       	brne	.+4      	; 0x1d88 <.L25>

00001d84 <.Loc.111>:
    1d84:	cf ef       	ldi	r28, 0xFF	; 255
    1d86:	df ef       	ldi	r29, 0xFF	; 255

00001d88 <.L25>:
     if (rotary.incre != 0) {
    1d88:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rotary+0x6>
    1d8c:	81 15       	cp	r24, r1
    1d8e:	09 f3       	breq	.-62     	; 0x1d52 <.L15>

00001d90 <.Loc.114>:
        wait_time++;	// start time window of 200ms
    1d90:	f3 94       	inc	r15

00001d92 <.Loc.116>:
        if (rotary_switch_present == 0) {
    1d92:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <rotary_switch_present>
    1d96:	81 11       	cpse	r24, r1
    1d98:	03 c0       	rjmp	.+6      	; 0x1da0 <.L27>

00001d9a <.Loc.118>:
           rotary_switch_present = 1;		// set flag for rotary switch detected
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <rotary_switch_present>

00001da0 <.L27>:
     if ((wait_time > 20) && (rotary.count != 0)) break;
    1da0:	85 e1       	ldi	r24, 0x15	; 21
    1da2:	f8 12       	cpse	r15, r24
    1da4:	d6 cf       	rjmp	.-84     	; 0x1d52 <.L15>

00001da6 <.Loc.122>:
    1da6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rotary+0x5>
    1daa:	81 11       	cpse	r24, r1
    1dac:	0d c0       	rjmp	.+26     	; 0x1dc8 <.L12>

00001dae <.Loc.123>:
     if (wait_time > 20) wait_time = 0;		// reset time window
    1dae:	f1 2c       	mov	r15, r1

00001db0 <.LVL31>:
    1db0:	d0 cf       	rjmp	.-96     	; 0x1d52 <.L15>

00001db2 <.L14>:
        WaitRotary();		// wait the predefined time
    1db2:	dd d8       	rcall	.-3654   	; 0xf6e <wait200us>

00001db4 <.LVL33>:
     for (ww=0; ww < WWend; ww++) {
    1db4:	ca 95       	dec	r28

00001db6 <.LVL34>:
    1db6:	09 f0       	breq	.+2      	; 0x1dba <.LBE6>

00001db8 <L0^A>:
    1db8:	c4 cf       	rjmp	.-120    	; 0x1d42 <.L16>

00001dba <.LBE6>:
  while (kk >= 0)  { /* wait up to 500ms until key is released */
    1dba:	da 95       	dec	r29

00001dbc <.LVL36>:
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <L0^A+0x2>

00001dbe <L0^A>:
    1dbe:	c4 cf       	rjmp	.-120    	; 0x1d48 <.L17>
    1dc0:	bf cf       	rjmp	.-130    	; 0x1d40 <.L13>

00001dc2 <.L39>:
        key_cs++;			// count the time, the key is hold down
    1dc2:	0f 5f       	subi	r16, 0xFF	; 255

00001dc4 <.Loc.137>:
        if (key_cs >= MAX_CS) break;
    1dc4:	08 3c       	cpi	r16, 0xC8	; 200
    1dc6:	c0 f2       	brcs	.-80     	; 0x1d78 <.L23>

00001dc8 <.L12>:
}  /* end wait_for_key_5ms(  ) */
    1dc8:	80 2f       	mov	r24, r16
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62

00001dce <.LVL40>:
    1dce:	e8 e0       	ldi	r30, 0x08	; 8
    1dd0:	0c 94 b0 38 	jmp	0x7160	; 0x7160 <.Loc.10>

00001dd4 <.L20>:
        if ((key_pressed == 0) && (key_cs != 0)) break;	// return, if key is released again
    1dd4:	11 11       	cpse	r17, r1
    1dd6:	d0 cf       	rjmp	.-96     	; 0x1d78 <.L23>

00001dd8 <.Loc.144>:
    1dd8:	01 15       	cp	r16, r1
    1dda:	71 f2       	breq	.-100    	; 0x1d78 <.L23>

00001ddc <.LBE8>:
    1ddc:	f5 cf       	rjmp	.-22     	; 0x1dc8 <.L12>

00001dde <wait_for_key_5s_line2>:
#ifdef WAIT_LINE2_CLEAR
/* *********************************************************** */
/* wait 5 seconds or previous key press, then clear last line  of LCD and */
/* set the cursor to the beginning of last line */
/* *********************************************************** */
void wait_for_key_5s_line2(void) {
    1dde:	cf 93       	push	r28

00001de0 <.LCFI1>:
  uint8_t current_line;
  current_line = lcd_save_position();
    1de0:	0a dc       	rcall	.-2028   	; 0x15f6 <lcd_save_position>

00001de2 <.LVL42>:
    1de2:	c8 2f       	mov	r28, r24

00001de4 <.LVL43>:
  if (last_line_used != 0) {
    1de4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <last_line_used>

00001de8 <.LVL44>:
    1de8:	81 15       	cp	r24, r1
    1dea:	01 f1       	breq	.+64     	; 0x1e2c <.L40>

00001dec <.Loc.152>:
  if ((last_line_used == 1) && (current_line == (LCD_LINES-1))) {
    1dec:	81 30       	cpi	r24, 0x01	; 1
    1dee:	51 f4       	brne	.+20     	; 0x1e04 <.L44>

00001df0 <.Loc.154>:
    1df0:	c3 30       	cpi	r28, 0x03	; 3
    1df2:	41 f4       	brne	.+16     	; 0x1e04 <.L44>

00001df4 <.Loc.155>:
     // add a + sign at the last location of screen
     lcd_set_cursor(((LCD_LINES - 1) * PAGES_PER_LINE), (LCD_LINE_LENGTH - 1));
    1df4:	61 e1       	ldi	r22, 0x11	; 17
    1df6:	86 e0       	ldi	r24, 0x06	; 6
    1df8:	d5 db       	rcall	.-2134   	; 0x15a4 <lcd_set_cursor>

00001dfa <.LVL45>:
     lcd_data('+');
    1dfa:	8b e2       	ldi	r24, 0x2B	; 43
    1dfc:	50 dd       	rcall	.-1376   	; 0x189e <lcd_data>

00001dfe <.LVL46>:
     lcd_set_cursor(((LCD_LINES - 1) * PAGES_PER_LINE), (LCD_LINE_LENGTH - 1));
    1dfe:	61 e1       	ldi	r22, 0x11	; 17
    1e00:	86 e0       	ldi	r24, 0x06	; 6
    1e02:	d0 db       	rcall	.-2144   	; 0x15a4 <lcd_set_cursor>

00001e04 <.L44>:
  };
 #ifdef WITH_ROTARY_SWITCH
  do {
     if (wait_for_key_ms(SHORT_WAIT_TIME) > 0) break;
    1e04:	80 e4       	ldi	r24, 0x40	; 64
    1e06:	9f e1       	ldi	r25, 0x1F	; 31
    1e08:	83 df       	rcall	.-250    	; 0x1d10 <wait_for_key_ms>

00001e0a <.LVL48>:
    1e0a:	81 11       	cpse	r24, r1
    1e0c:	04 c0       	rjmp	.+8      	; 0x1e16 <.L43>

00001e0e <.Loc.163>:
     // continue waiting, if the key is not pressed, but rotary switch is rotated
  } while (rotary.incre > 0);
    1e0e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rotary+0x6>
    1e12:	81 11       	cpse	r24, r1
    1e14:	f7 cf       	rjmp	.-18     	; 0x1e04 <.L44>

00001e16 <.L43>:
 #else
  wait_for_key_ms(SHORT_WAIT_TIME);	// wait until time is elapsed or key is pressed
 #endif
  if ((current_line == (LCD_LINES - 1)) && (last_line_used == 1)) {
    1e16:	c3 30       	cpi	r28, 0x03	; 3
    1e18:	41 f4       	brne	.+16     	; 0x1e2a <.L45>

00001e1a <.Loc.166>:
    1e1a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <last_line_used>
    1e1e:	81 30       	cpi	r24, 0x01	; 1
    1e20:	21 f4       	brne	.+8      	; 0x1e2a <.L45>

00001e22 <.Loc.167>:
     lcd_set_cursor((LCD_LINES-1) * PAGES_PER_LINE,0);
    1e22:	60 e0       	ldi	r22, 0x00	; 0
    1e24:	86 e0       	ldi	r24, 0x06	; 6
    1e26:	be db       	rcall	.-2180   	; 0x15a4 <lcd_set_cursor>

00001e28 <.LVL49>:
     lcd_clear_line();		// clear the whole line
    1e28:	4b dc       	rcall	.-1898   	; 0x16c0 <lcd_clear_line>

00001e2a <.L45>:
  }
  lcd_restore_position();
    1e2a:	ee db       	rcall	.-2084   	; 0x1608 <lcd_restore_position>

00001e2c <.L40>:
  }  /* end if last_line_used */
}  /* end wait_for_key_5s_line2() */
    1e2c:	cf 91       	pop	r28

00001e2e <.LVL52>:
    1e2e:	08 95       	ret

00001e30 <__vector_7>:
	#define MAIN_C
	#include "Transistortester.h"

	#ifndef INHIBIT_SLEEP_MODE
	  // prepare sleep mode
	  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
    1e30:	18 95       	reti

00001e32 <__vector_21>:
	#endif
        #if !defined(INHIBIT_SLEEP_MODE) || defined(SamplingADC)
	  // ADC_vect is always required by samplingADC()
	  EMPTY_INTERRUPT(ADC_vect);
    1e32:	18 95       	reti

00001e34 <search_vak_diode>:

// function search_vak_diode try to find a diode, which has no side connected to the transistor base
// returns 20, if no diode found
uint8_t search_vak_diode() {
    uint8_t ii;
    for (ii=0; ii<NumOfDiodes; ii++) {
    1e34:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <NumOfDiodes>

00001e38 <.Loc.8>:
			if ((diodes.Anode[ii] == _trans->b)
    1e38:	a0 91 62 01 	lds	r26, 0x0162	; 0x800162 <_trans>
    1e3c:	b0 91 63 01 	lds	r27, 0x0163	; 0x800163 <_trans+0x1>
    1e40:	e6 e8       	ldi	r30, 0x86	; 134
    1e42:	f1 e0       	ldi	r31, 0x01	; 1

00001e44 <.Loc.9>:
    for (ii=0; ii<NumOfDiodes; ii++) {
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0

00001e48 <.L4>:
    1e48:	82 2f       	mov	r24, r18

00001e4a <.LVL2>:
    1e4a:	24 17       	cp	r18, r20
    1e4c:	b0 f4       	brcc	.+44     	; 0x1e7a <.L9>

00001e4e <.Loc.12>:
			if ((diodes.Anode[ii] == _trans->b)
    1e4e:	51 91       	ld	r21, Z+

00001e50 <.Loc.14>:
    1e50:	1c 96       	adiw	r26, 0x0c	; 12
    1e52:	9c 91       	ld	r25, X
    1e54:	1c 97       	sbiw	r26, 0x0c	; 12

00001e56 <.Loc.15>:
    1e56:	59 17       	cp	r21, r25
    1e58:	19 f0       	breq	.+6      	; 0x1e60 <.L5>

00001e5a <.Loc.16>:
					|| (diodes.Cathode[ii] == _trans->b))
    1e5a:	55 81       	ldd	r21, Z+5	; 0x05
    1e5c:	95 13       	cpse	r25, r21
    1e5e:	03 c0       	rjmp	.+6      	; 0x1e66 <.L6>

00001e60 <.L5>:
    for (ii=0; ii<NumOfDiodes; ii++) {
    1e60:	2f 5f       	subi	r18, 0xFF	; 255
    1e62:	3f 4f       	sbci	r19, 0xFF	; 255

00001e64 <.LVL4>:
    1e64:	f1 cf       	rjmp	.-30     	; 0x1e48 <.L4>

00001e66 <.L6>:
				continue;
       // no side of the diode is connected to the base, this must be the protection diode   
       if (diodes.Voltage[ii] > 1000) break; // Voltage is too high for protection diode
    1e66:	22 0f       	add	r18, r18
    1e68:	33 1f       	adc	r19, r19

00001e6a <.LVL5>:
    1e6a:	f9 01       	movw	r30, r18
    1e6c:	ee 56       	subi	r30, 0x6E	; 110
    1e6e:	fe 4f       	sbci	r31, 0xFE	; 254

00001e70 <.Loc.24>:
    1e70:	20 81       	ld	r18, Z
    1e72:	31 81       	ldd	r19, Z+1	; 0x01
    1e74:	29 3e       	cpi	r18, 0xE9	; 233
    1e76:	33 40       	sbci	r19, 0x03	; 3
    1e78:	08 f0       	brcs	.+2      	; 0x1e7c <.L3>

00001e7a <.L9>:
       return ii;
    }
    return 20;
    1e7a:	84 e1       	ldi	r24, 0x14	; 20

00001e7c <.L3>:
}
    1e7c:	08 95       	ret

00001e7e <init_parts>:

/* init_parts initialize all parts to nothing found */
void init_parts(void) {
  PartFound = PART_NONE;	// no part found
    1e7e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <PartFound>

00001e82 <.Loc.30>:
  NumOfDiodes = 0;		// Number of diodes = 0
    1e82:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <NumOfDiodes>

00001e86 <.Loc.32>:
  ptrans.count = 0;		// Number of found P type transistors
    1e86:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <ptrans+0xf>

00001e8a <.Loc.34>:
  ntrans.count = 0;		// Number of found N type transistors
    1e8a:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <ntrans+0xf>

00001e8e <.Loc.36>:
  PartMode = PART_MODE_NONE;
    1e8e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <PartMode>

00001e92 <.Loc.38>:
  WithReference = 0;		// no precision reference voltage
    1e92:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <WithReference>

00001e96 <.Loc.40>:
  ResistorsFound = 0;		// no resistors found
    1e96:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <ResistorsFound>

00001e9a <.Loc.42>:
  ResistorChecked[0] = 0;
    1e9a:	e4 ea       	ldi	r30, 0xA4	; 164
    1e9c:	f1 e0       	ldi	r31, 0x01	; 1
    1e9e:	10 82       	st	Z, r1

00001ea0 <.Loc.44>:
  ResistorChecked[1] = 0;
    1ea0:	11 82       	std	Z+1, r1	; 0x01

00001ea2 <.Loc.46>:
  ResistorChecked[2] = 0;
    1ea2:	12 82       	std	Z+2, r1	; 0x02

00001ea4 <.Loc.48>:
  cap.ca = TP1;
    1ea4:	ec e3       	ldi	r30, 0x3C	; 60
    1ea6:	f1 e0       	ldi	r31, 0x01	; 1
    1ea8:	10 8a       	std	Z+16, r1	; 0x10

00001eaa <.Loc.50>:
  cap.cb = TP3;
    1eaa:	82 e0       	ldi	r24, 0x02	; 2
    1eac:	81 8b       	std	Z+17, r24	; 0x11

00001eae <.Loc.52>:
#if FLASHEND > 0x1fff
  inductor_lpre = 0;		// mark as zero
    1eae:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <inductor_lpre>

00001eb2 <.Loc.54>:
  cap.v_loss = 0;		// set Vloss to zero
    1eb2:	17 86       	std	Z+15, r1	; 0x0f
    1eb4:	16 86       	std	Z+14, r1	; 0x0e

00001eb6 <.Loc.56>:
#endif
  cap.cval_max = 0;		// set max to zero
    1eb6:	14 82       	std	Z+4, r1	; 0x04
    1eb8:	15 82       	std	Z+5, r1	; 0x05
    1eba:	16 82       	std	Z+6, r1	; 0x06
    1ebc:	17 82       	std	Z+7, r1	; 0x07

00001ebe <.Loc.58>:
  cap.cpre_max = -15;	// set max to fF unit
    1ebe:	81 ef       	ldi	r24, 0xF1	; 241
    1ec0:	83 8b       	std	Z+19, r24	; 0x13

00001ec2 <.Loc.60>:
}
    1ec2:	08 95       	ret

00001ec4 <switch_tester_off>:
  uart_putc('F');	// MAURO
  uart_putc('F');	// MAURO
  uart_newline();	// MAURO
 #endif
 #if ((LCD_ST_TYPE == 7565) || (LCD_ST_TYPE == 1306))
  lcd_powersave();			// set graphical display to power save mode
    1ec4:	ac db       	rcall	.-2216   	; 0x161e <lcd_powersave>

00001ec6 <.LVL6>:
 #endif
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    1ec6:	5e 98       	cbi	0x0b, 6	; 11

00001ec8 <.Loc.65>:
  wait2s();
    1ec8:	3d d8       	rcall	.-3974   	; 0xf44 <wait2s>

00001eca <.LVL7>:
  wait_for_key_ms(0); //never ending loop 
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	20 cf       	rjmp	.-448    	; 0x1d10 <wait_for_key_ms>

00001ed0 <.LVL8>:
}
    1ed0:	08 95       	ret

00001ed2 <ShortedProbes>:
 *  - 0 if not shorted
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
    1ed2:	1f 93       	push	r17

00001ed4 <.LCFI0>:
    1ed4:	cf 93       	push	r28

00001ed6 <.LCFI1>:
    1ed6:	df 93       	push	r29

00001ed8 <.LCFI2>:
    1ed8:	16 2f       	mov	r17, r22

00001eda <.LVL10>:
   *  Set up a voltage divider between the two probes:
   *  - Probe1: Rl pull-up
   *  - Probe2: Rl pull-down
   */

  ADC_DDR =  TXD_MSK;		// all-Pins to Input
    1eda:	17 b8       	out	0x07, r1	; 7

00001edc <.Loc.78>:
  ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    1edc:	18 b8       	out	0x08, r1	; 8

00001ede <.Loc.80>:
  addr = &PinRLRHADCtab[Probe1];
    1ede:	e8 2f       	mov	r30, r24
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	e5 5b       	subi	r30, 0xB5	; 181
    1ee4:	fd 4f       	sbci	r31, 0xFD	; 253

00001ee6 <.LBB13>:
  pp = pgm_read_byte(addr);
    1ee6:	24 91       	lpm	r18, Z

00001ee8 <.LBE13>:
  R_PORT = pp;
    1ee8:	25 b9       	out	0x05, r18	; 5

00001eea <.LBB14>:
  addr += (int8_t)(Probe2-Probe1);
    1eea:	96 2f       	mov	r25, r22
    1eec:	98 1b       	sub	r25, r24

00001eee <.Loc.96>:
    1eee:	e9 0f       	add	r30, r25
    1ef0:	f1 1d       	adc	r31, r1
    1ef2:	97 fd       	sbrc	r25, 7
    1ef4:	fa 95       	dec	r31

00001ef6 <.LBB15>:
  R_DDR =  pp | pgm_read_byte(addr);	// pgm_read_byte(PinRHtab[Probe1]) | pgm_read_byte(PinRLtab[Probe2]);
    1ef6:	e4 91       	lpm	r30, Z

00001ef8 <.LBE15>:
    1ef8:	2e 2b       	or	r18, r30

00001efa <.LVL16>:
    1efa:	24 b9       	out	0x04, r18	; 4

00001efc <.LVL17>:

  /* read voltages */
  U1 = ReadADC(Probe1);
    1efc:	7d d8       	rcall	.-3846   	; 0xff8 <ReadADC>

00001efe <.LVL18>:
    1efe:	ec 01       	movw	r28, r24

00001f00 <.LVL19>:
  U2 = ReadADC(Probe2);
    1f00:	81 2f       	mov	r24, r17

00001f02 <.LVL20>:
    1f02:	7a d8       	rcall	.-3852   	; 0xff8 <ReadADC>

00001f04 <.LVL21>:
    1f04:	ac 01       	movw	r20, r24

00001f06 <.LVL22>:
   */
 #ifndef MAX_UH_DIFF
  #define MAX_UH_DIFF 30
 #endif

  URH = ADCconfig.U_AVCC / 2;
    1f06:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <ADCconfig+0x4>
    1f0a:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <ADCconfig+0x5>
    1f0e:	36 95       	lsr	r19
    1f10:	27 95       	ror	r18

00001f12 <.LVL23>:
  URH -= ((long)U_VCC * (long)(PIN_RP-PIN_RM)) / (4*(unsigned long)(R_L_VAL+PIN_RM));			// differenz of Pin resistance high (22) and low (20)
    1f12:	c9 01       	movw	r24, r18
    1f14:	03 97       	sbiw	r24, 0x03	; 3

00001f16 <.LVL24>:
  if (((U1 + MAX_UH_DIFF) > URH ) && (U1 < (URH + MAX_UH_DIFF)))
    1f16:	be 01       	movw	r22, r28
    1f18:	62 5e       	subi	r22, 0xE2	; 226
    1f1a:	7f 4f       	sbci	r23, 0xFF	; 255

00001f1c <.Loc.113>:
    1f1c:	86 17       	cp	r24, r22
    1f1e:	97 07       	cpc	r25, r23
    1f20:	78 f4       	brcc	.+30     	; 0x1f40 <.L17>

00001f22 <.Loc.114>:
    1f22:	25 5e       	subi	r18, 0xE5	; 229
    1f24:	3f 4f       	sbci	r19, 0xFF	; 255

00001f26 <.Loc.115>:
    1f26:	c2 17       	cp	r28, r18
    1f28:	d3 07       	cpc	r29, r19
    1f2a:	50 f4       	brcc	.+20     	; 0x1f40 <.L17>

00001f2c <.Loc.116>:
  {
    if (((U2 + MAX_UH_DIFF) > URH) && (U2 < (URH + MAX_UH_DIFF)))
    1f2c:	ba 01       	movw	r22, r20
    1f2e:	62 5e       	subi	r22, 0xE2	; 226
    1f30:	7f 4f       	sbci	r23, 0xFF	; 255

00001f32 <.Loc.118>:
    1f32:	86 17       	cp	r24, r22
    1f34:	97 07       	cpc	r25, r23
    1f36:	20 f4       	brcc	.+8      	; 0x1f40 <.L17>

00001f38 <.Loc.119>:
    1f38:	81 e0       	ldi	r24, 0x01	; 1

00001f3a <.LVL25>:
    1f3a:	42 17       	cp	r20, r18
    1f3c:	53 07       	cpc	r21, r19
    1f3e:	08 f0       	brcs	.+2      	; 0x1f42 <.L13>

00001f40 <.L17>:
  uint8_t           Flag1 = 0;      /* return value */
    1f40:	80 e0       	ldi	r24, 0x00	; 0

00001f42 <.L13>:
      Flag1 = 1;
    }
  }

  /* reset port */
  R_DDR = 0;
    1f42:	14 b8       	out	0x04, r1	; 4

00001f44 <.Loc.124>:

  return Flag1;
}
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28

00001f48 <.LVL28>:
    1f48:	1f 91       	pop	r17

00001f4a <.LVL29>:
    1f4a:	08 95       	ret

00001f4c <AllProbesShorted>:
 *  - 0 if no probes are short-circuited
 *  - number of probe pairs short-circuited (3 = all)
 */

uint8_t AllProbesShorted(void)
{
    1f4c:	cf 93       	push	r28

00001f4e <.LCFI3>:
  uint8_t           Flag2;      /* return value */

  /* check all possible combinations */
  Flag2 = ShortedProbes(TP1, TP2);
    1f4e:	61 e0       	ldi	r22, 0x01	; 1
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	bf df       	rcall	.-130    	; 0x1ed2 <ShortedProbes>

00001f54 <.LVL30>:
    1f54:	c8 2f       	mov	r28, r24

00001f56 <.LVL31>:
  Flag2 += ShortedProbes(TP1, TP3);
    1f56:	62 e0       	ldi	r22, 0x02	; 2
    1f58:	80 e0       	ldi	r24, 0x00	; 0

00001f5a <.LVL32>:
    1f5a:	bb df       	rcall	.-138    	; 0x1ed2 <ShortedProbes>

00001f5c <.LVL33>:
    1f5c:	c8 0f       	add	r28, r24

00001f5e <.Loc.136>:
  Flag2 += ShortedProbes(TP2, TP3);
    1f5e:	62 e0       	ldi	r22, 0x02	; 2
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	b7 df       	rcall	.-146    	; 0x1ed2 <ShortedProbes>

00001f64 <.LVL35>:

  return Flag2;
}
    1f64:	8c 0f       	add	r24, r28

00001f66 <.LVL36>:
    1f66:	cf 91       	pop	r28
    1f68:	08 95       	ret

00001f6a <AutoCheck>:
void AutoCheck(uint8_t test_mode) {
    1f6a:	ae e0       	ldi	r26, 0x0E	; 14
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	eb eb       	ldi	r30, 0xBB	; 187
    1f70:	ff e0       	ldi	r31, 0x0F	; 15
    1f72:	0c 94 8a 38 	jmp	0x7114	; 0x7114 <__prologue_saves__>

00001f76 <.L1^B1>:
    1f76:	b8 2e       	mov	r11, r24

00001f78 <.Loc.143>:
PartFound = PART_NONE;		// no part found before
    1f78:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <PartFound>

00001f7c <.Loc.153>:
if ((test_mode & 0xf0) == 0) {
    1f7c:	20 e1       	ldi	r18, 0x10	; 16
    1f7e:	82 17       	cp	r24, r18
    1f80:	b8 f4       	brcc	.+46     	; 0x1fb0 <.L70>

00001f82 <.Loc.155>:
  if (AllProbesShorted() != 3) return;
    1f82:	e4 df       	rcall	.-56     	; 0x1f4c <AllProbesShorted>

00001f84 <.LVL38>:
    1f84:	83 30       	cpi	r24, 0x03	; 3
    1f86:	81 f4       	brne	.+32     	; 0x1fa8 <.L19>

00001f88 <.Loc.158>:
  lcd_clear();
    1f88:	4f db       	rcall	.-2402   	; 0x1628 <lcd_clear>

00001f8a <.LVL39>:
  lcd_MEM_string(SELFTEST);		// "Selftest mode.."
    1f8a:	81 e5       	ldi	r24, 0x51	; 81
    1f8c:	92 e0       	ldi	r25, 0x02	; 2
    1f8e:	df dc       	rcall	.-1602   	; 0x194e <lcd_fix_string>

00001f90 <.LVL40>:
  lcd_line2();
    1f90:	1d db       	rcall	.-2502   	; 0x15cc <lcd_line2>

00001f92 <.LVL41>:
  lcd_data('?');			// wait for key pressed for confirmation
    1f92:	8f e3       	ldi	r24, 0x3F	; 63
    1f94:	84 dc       	rcall	.-1784   	; 0x189e <lcd_data>

00001f96 <.LVL42>:
  if (wait_for_key_ms(2000) > 10) goto begin_selftest;	// key is pressed again
    1f96:	80 ed       	ldi	r24, 0xD0	; 208
    1f98:	97 e0       	ldi	r25, 0x07	; 7
    1f9a:	ba de       	rcall	.-652    	; 0x1d10 <wait_for_key_ms>

00001f9c <.LVL43>:
    1f9c:	8b 30       	cpi	r24, 0x0B	; 11
    1f9e:	b0 f4       	brcc	.+44     	; 0x1fcc <.L22>

00001fa0 <.Loc.165>:
lcd_clear();
    1fa0:	43 db       	rcall	.-2426   	; 0x1628 <lcd_clear>

00001fa2 <.LVL44>:
lcd_MEM_string(VERSION_str);	//"Version ..."
    1fa2:	85 ef       	ldi	r24, 0xF5	; 245
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	d3 dc       	rcall	.-1626   	; 0x194e <lcd_fix_string>

00001fa8 <.L19>:
} /* end AutoCheck */ 
    1fa8:	2e 96       	adiw	r28, 0x0e	; 14
    1faa:	e2 e1       	ldi	r30, 0x12	; 18
    1fac:	0c 94 a6 38 	jmp	0x714c	; 0x714c <__epilogue_restores__>

00001fb0 <.L70>:
  for (tt=0;tt<150;tt++) {	/* wait about 30 seconds for shorted probes */
    1fb0:	00 e0       	ldi	r16, 0x00	; 0

00001fb2 <.Loc.170>:
  ww = 0;
    1fb2:	10 e0       	ldi	r17, 0x00	; 0

00001fb4 <.L20>:
    lcd_clear();
    1fb4:	39 db       	rcall	.-2446   	; 0x1628 <lcd_clear>

00001fb6 <.LVL48>:
    lcd_MEM2_string(SHORT_PROBES_str);	// message "Short probes!" to LCD
    1fb6:	88 eb       	ldi	r24, 0xB8	; 184
    1fb8:	91 e0       	ldi	r25, 0x01	; 1
    1fba:	c9 dc       	rcall	.-1646   	; 0x194e <lcd_fix_string>

00001fbc <.LVL49>:
    if (AllProbesShorted() == 3) {
    1fbc:	c7 df       	rcall	.-114    	; 0x1f4c <AllProbesShorted>

00001fbe <.LVL50>:
    1fbe:	83 30       	cpi	r24, 0x03	; 3
    1fc0:	09 f0       	breq	.+2      	; 0x1fc4 <.Loc.176>

00001fc2 <L0^A>:
    1fc2:	65 c0       	rjmp	.+202    	; 0x208e <.L71>

00001fc4 <.Loc.176>:
       ww++;	// all probes now shorted
    1fc4:	1f 5f       	subi	r17, 0xFF	; 255

00001fc6 <.Loc.178>:
    if (ww > 3) break;	// connection seems to be stable
    1fc6:	14 30       	cpi	r17, 0x04	; 4
    1fc8:	09 f0       	breq	.+2      	; 0x1fcc <.L22>

00001fca <L0^A>:
    1fca:	62 c0       	rjmp	.+196    	; 0x2090 <.L24>

00001fcc <.L22>:
lcd_line2();
    1fcc:	ff da       	rcall	.-2562   	; 0x15cc <lcd_line2>

00001fce <.LVL53>:
Calibrate_UR();		// get Reference voltage, Pin resistance
    1fce:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <Calibrate_UR>

00001fd2 <.LVL54>:
lcd_MEM2_string(R0_str);		// "R0="
    1fd2:	81 eb       	ldi	r24, 0xB1	; 177
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	bb dc       	rcall	.-1674   	; 0x194e <lcd_fix_string>

00001fd8 <.LVL55>:
eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (uint8_t)0);	// clear zero offset
    1fd8:	60 e0       	ldi	r22, 0x00	; 0
    1fda:	88 e1       	ldi	r24, 0x18	; 24
    1fdc:	93 e0       	ldi	r25, 0x03	; 3
    1fde:	0e 94 22 39 	call	0x7244	; 0x7244 <eeprom_write_byte>

00001fe2 <.LVL56>:
eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (uint8_t)0);	// clear zero offset
    1fe2:	60 e0       	ldi	r22, 0x00	; 0
    1fe4:	89 e1       	ldi	r24, 0x19	; 25
    1fe6:	93 e0       	ldi	r25, 0x03	; 3
    1fe8:	0e 94 22 39 	call	0x7244	; 0x7244 <eeprom_write_byte>

00001fec <.LVL57>:
eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (uint8_t)0);	// clear zero offset
    1fec:	60 e0       	ldi	r22, 0x00	; 0
    1fee:	87 e1       	ldi	r24, 0x17	; 23
    1ff0:	93 e0       	ldi	r25, 0x03	; 3
    1ff2:	0e 94 22 39 	call	0x7244	; 0x7244 <eeprom_write_byte>

00001ff6 <.LVL58>:
adcmv[0] = GetESR(TP3, TP1);
    1ff6:	60 e0       	ldi	r22, 0x00	; 0
    1ff8:	82 e0       	ldi	r24, 0x02	; 2
    1ffa:	26 d9       	rcall	.-3508   	; 0x1248 <GetESR>

00001ffc <.LVL59>:
    1ffc:	6c 01       	movw	r12, r24

00001ffe <.Loc.188>:
    1ffe:	9a 83       	std	Y+2, r25	; 0x02
    2000:	89 83       	std	Y+1, r24	; 0x01

00002002 <.Loc.189>:
adcmv[1] = GetESR(TP3, TP2);
    2002:	61 e0       	ldi	r22, 0x01	; 1
    2004:	82 e0       	ldi	r24, 0x02	; 2
    2006:	20 d9       	rcall	.-3520   	; 0x1248 <GetESR>

00002008 <.LVL60>:
    2008:	7c 01       	movw	r14, r24

0000200a <.Loc.191>:
    200a:	9c 83       	std	Y+4, r25	; 0x04
    200c:	8b 83       	std	Y+3, r24	; 0x03

0000200e <.Loc.192>:
adcmv[2] = GetESR(TP2, TP1);
    200e:	60 e0       	ldi	r22, 0x00	; 0
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	1a d9       	rcall	.-3532   	; 0x1248 <GetESR>

00002014 <.LVL61>:
    2014:	8c 01       	movw	r16, r24

00002016 <.Loc.194>:
    2016:	9e 83       	std	Y+6, r25	; 0x06
    2018:	8d 83       	std	Y+5, r24	; 0x05

0000201a <.Loc.195>:
DisplayValue16(adcmv[0],-2,' ',3);
    201a:	23 e0       	ldi	r18, 0x03	; 3
    201c:	40 e2       	ldi	r20, 0x20	; 32
    201e:	6e ef       	ldi	r22, 0xFE	; 254
    2020:	c6 01       	movw	r24, r12
    2022:	df dd       	rcall	.-1090   	; 0x1be2 <DisplayValue16>

00002024 <.LVL62>:
DisplayValue16(adcmv[1],-2,' ',3);
    2024:	23 e0       	ldi	r18, 0x03	; 3
    2026:	40 e2       	ldi	r20, 0x20	; 32
    2028:	6e ef       	ldi	r22, 0xFE	; 254
    202a:	c7 01       	movw	r24, r14
    202c:	da dd       	rcall	.-1100   	; 0x1be2 <DisplayValue16>

0000202e <.LVL63>:
DisplayValue16(adcmv[2],-2,LCD_CHAR_OMEGA,3);
    202e:	23 e0       	ldi	r18, 0x03	; 3
    2030:	4d e1       	ldi	r20, 0x1D	; 29
    2032:	6e ef       	ldi	r22, 0xFE	; 254
    2034:	c8 01       	movw	r24, r16
    2036:	d5 dd       	rcall	.-1110   	; 0x1be2 <DisplayValue16>

00002038 <.LVL64>:
if (adcmv[0] >= 90) {
    2038:	8a e5       	ldi	r24, 0x5A	; 90
    203a:	c8 16       	cp	r12, r24
    203c:	d1 04       	cpc	r13, r1
    203e:	24 f0       	brlt	.+8      	; 0x2048 <.L26>

00002040 <.Loc.200>:
  adcmv[0] = ESR_ZERO;	// set back to default value
    2040:	84 e1       	ldi	r24, 0x14	; 20
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	9a 83       	std	Y+2, r25	; 0x02
    2046:	89 83       	std	Y+1, r24	; 0x01

00002048 <.L26>:
eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (uint8_t)adcmv[0]);	// fix zero offset
    2048:	69 81       	ldd	r22, Y+1	; 0x01
    204a:	88 e1       	ldi	r24, 0x18	; 24
    204c:	93 e0       	ldi	r25, 0x03	; 3
    204e:	0e 94 22 39 	call	0x7244	; 0x7244 <eeprom_write_byte>

00002052 <.LVL65>:
if (adcmv[1] >= 90) {
    2052:	9a e5       	ldi	r25, 0x5A	; 90
    2054:	e9 16       	cp	r14, r25
    2056:	f1 04       	cpc	r15, r1
    2058:	24 f0       	brlt	.+8      	; 0x2062 <.L27>

0000205a <.Loc.205>:
  adcmv[1] = ESR_ZERO;	// set back to default value
    205a:	84 e1       	ldi	r24, 0x14	; 20
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	9c 83       	std	Y+4, r25	; 0x04
    2060:	8b 83       	std	Y+3, r24	; 0x03

00002062 <.L27>:
eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (uint8_t)adcmv[1]);	// fix zero offset
    2062:	6b 81       	ldd	r22, Y+3	; 0x03
    2064:	89 e1       	ldi	r24, 0x19	; 25
    2066:	93 e0       	ldi	r25, 0x03	; 3
    2068:	0e 94 22 39 	call	0x7244	; 0x7244 <eeprom_write_byte>

0000206c <.LVL66>:
if (adcmv[2] >= 90) {
    206c:	0a 35       	cpi	r16, 0x5A	; 90
    206e:	11 05       	cpc	r17, r1
    2070:	24 f0       	brlt	.+8      	; 0x207a <.L28>

00002072 <.Loc.210>:
  adcmv[2] = ESR_ZERO;	// set back to default value
    2072:	84 e1       	ldi	r24, 0x14	; 20
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	9e 83       	std	Y+6, r25	; 0x06
    2078:	8d 83       	std	Y+5, r24	; 0x05

0000207a <.L28>:
eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (uint8_t)adcmv[2]);	// fix zero offset
    207a:	6d 81       	ldd	r22, Y+5	; 0x05
    207c:	87 e1       	ldi	r24, 0x17	; 23
    207e:	93 e0       	ldi	r25, 0x03	; 3
    2080:	0e 94 22 39 	call	0x7244	; 0x7244 <eeprom_write_byte>

00002084 <.LVL67>:
last_line_used = 2;
    2084:	82 e0       	ldi	r24, 0x02	; 2
    2086:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <last_line_used>

0000208a <.Loc.215>:
wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
    208a:	a9 de       	rcall	.-686    	; 0x1dde <wait_for_key_5s_line2>

0000208c <.LVL68>:
    208c:	08 c0       	rjmp	.+16     	; 0x209e <.L25>

0000208e <.L71>:
       ww = 0;	// connection not stable, retry
    208e:	10 e0       	ldi	r17, 0x00	; 0

00002090 <.L24>:
    wait_about200ms();			// wait 200ms and try again
    2090:	88 e2       	ldi	r24, 0x28	; 40
    2092:	0e 94 c5 07 	call	0xf8a	; 0xf8a <sleep_5ms>

00002096 <.LVL71>:
  for (tt=0;tt<150;tt++) {	/* wait about 30 seconds for shorted probes */
    2096:	0f 5f       	subi	r16, 0xFF	; 255

00002098 <.LVL72>:
    2098:	06 39       	cpi	r16, 0x96	; 150
    209a:	09 f0       	breq	.+2      	; 0x209e <.L25>

0000209c <L0^A>:
    209c:	8b cf       	rjmp	.-234    	; 0x1fb4 <.L20>

0000209e <.L25>:
if((test_mode & 0x0f) == 1) {  /* full test requested */
    209e:	1b 2d       	mov	r17, r11
    20a0:	1f 70       	andi	r17, 0x0F	; 15

000020a2 <.Loc.222>:
    20a2:	11 30       	cpi	r17, 0x01	; 1
    20a4:	09 f0       	breq	.+2      	; 0x20a8 <L0^A+0x2>

000020a6 <L0^A>:
    20a6:	4f c0       	rjmp	.+158    	; 0x2146 <.L30>
    20a8:	ee 24       	eor	r14, r14
    20aa:	e3 94       	inc	r14
    20ac:	f1 2c       	mov	r15, r1

000020ae <.Loc.223>:
      R_PORT = 1<<PIN_RH1;		//RH1 to VCC
    20ae:	b2 e0       	ldi	r27, 0x02	; 2
    20b0:	db 2e       	mov	r13, r27

000020b2 <.Loc.224>:
      R_PORT = 1<<PIN_RH2;		//RH2 to VCC
    20b2:	08 e0       	ldi	r16, 0x08	; 8
    20b4:	c0 2e       	mov	r12, r16

000020b6 <.Loc.225>:
      R_PORT = 1<<PIN_RH3;		//RH3 to VCC
    20b6:	80 e2       	ldi	r24, 0x20	; 32
    20b8:	a8 2e       	mov	r10, r24

000020ba <.L29>:
for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
    20ba:	b1 2c       	mov	r11, r1
    20bc:	0e 2d       	mov	r16, r14

000020be <.Loc.228>:
      R_DDR = (1<<PIN_RH1) | (1<<PIN_RH2);	//RH2 to -
    20be:	6a e0       	ldi	r22, 0x0A	; 10
    20c0:	26 2e       	mov	r2, r22

000020c2 <.Loc.229>:
      R_DDR = (1<<PIN_RH1) | (1<<PIN_RH3);	//RH3 to -
    20c2:	72 e2       	ldi	r23, 0x22	; 34
    20c4:	37 2e       	mov	r3, r23

000020c6 <.Loc.230>:
      R_DDR = (1<<PIN_RH2) | (1<<PIN_RH3);	//RH3 to -
    20c6:	e8 e2       	ldi	r30, 0x28	; 40
    20c8:	8e 2e       	mov	r8, r30

000020ca <.Loc.231>:
      R_DDR = (1<<PIN_RL1) | (1<<PIN_RL2);	//RL2 to -
    20ca:	f5 e0       	ldi	r31, 0x05	; 5
    20cc:	9f 2e       	mov	r9, r31

000020ce <.L46>:
   lcd_clear_line2();		// clear total line 2
    20ce:	1b db       	rcall	.-2506   	; 0x1706 <lcd_clear_line2>

000020d0 <.LVL76>:
   lcd_clear_line1();		// clear total line 1
    20d0:	16 db       	rcall	.-2516   	; 0x16fe <lcd_clear_line1>

000020d2 <.LVL77>:
   lcd_data('T');			//output the Testmode "T"
    20d2:	84 e5       	ldi	r24, 0x54	; 84
    20d4:	e4 db       	rcall	.-2104   	; 0x189e <lcd_data>

000020d6 <.LVL78>:
   u2lcd(tt);		//lcd_string(utoa(tt, outval, 10));	//output Test number
    20d6:	c7 01       	movw	r24, r14
    20d8:	0e 94 a9 06 	call	0xd52	; 0xd52 <u2lcd>

000020dc <.LVL79>:
   lcd_space();
    20dc:	0e 94 b4 06 	call	0xd68	; 0xd68 <lcd_space>

000020e0 <.LVL80>:
   if (tt == 1) {   // output of reference voltage and factors for capacity measurement
    20e0:	01 30       	cpi	r16, 0x01	; 1
    20e2:	09 f0       	breq	.+2      	; 0x20e6 <.Loc.239>

000020e4 <L0^A>:
    20e4:	ce c1       	rjmp	.+924    	; 0x2482 <.L31>

000020e6 <.Loc.239>:
      lcd_MEM2_string(URef_str);	//"URef="
    20e6:	84 ee       	ldi	r24, 0xE4	; 228
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	31 dc       	rcall	.-1950   	; 0x194e <lcd_fix_string>

000020ec <.LVL81>:
      Display_mV(ref_mv,4);
    20ec:	64 e0       	ldi	r22, 0x04	; 4
    20ee:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <ref_mv>
    20f2:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <ref_mv+0x1>
    20f6:	80 dd       	rcall	.-1280   	; 0x1bf8 <Display_mV>

000020f8 <.LVL82>:
      lcd_line2();			//Cursor to column 1, row 2
    20f8:	69 da       	rcall	.-2862   	; 0x15cc <lcd_line2>

000020fa <.LVL83>:
      lcd_MEM2_string(RHfakt_str);	//"RHf="
    20fa:	8f ed       	ldi	r24, 0xDF	; 223
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	27 dc       	rcall	.-1970   	; 0x194e <lcd_fix_string>

00002100 <.LVL84>:
      u2lcd(RHmultip);	//lcd_string(utoa(RHmultip, outval, 10));
    2100:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <RHmultip>
    2104:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <RHmultip+0x1>
    2108:	0e 94 a9 06 	call	0xd52	; 0xd52 <u2lcd>

0000210c <.LVL85>:
      ADCconfig.Samples = R_ANZ_MESS;	// set number of ADC reads near to maximum
    210c:	8e eb       	ldi	r24, 0xBE	; 190
    210e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ADCconfig>

00002112 <.L32>:
   ADC_DDR =  TXD_MSK;		// all-Pins to Input
    2112:	17 b8       	out	0x07, r1	; 7

00002114 <.Loc.249>:
   ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    2114:	18 b8       	out	0x08, r1	; 8

00002116 <.Loc.251>:
   R_DDR = 0;			// all R-Ports to Input
    2116:	14 b8       	out	0x04, r1	; 4

00002118 <.Loc.253>:
   R_PORT = 0;
    2118:	15 b8       	out	0x05, r1	; 5

0000211a <.Loc.255>:
   taste = wait_for_key_ms(1000);	// wait up to 1 second or key is pressed
    211a:	88 ee       	ldi	r24, 0xE8	; 232
    211c:	93 e0       	ldi	r25, 0x03	; 3
    211e:	f8 dd       	rcall	.-1040   	; 0x1d10 <wait_for_key_ms>

00002120 <.LVL87>:
   if ((tt != 4) && (taste > 10)) {
    2120:	04 30       	cpi	r16, 0x04	; 4
    2122:	11 f0       	breq	.+4      	; 0x2128 <.L44>

00002124 <.Loc.259>:
    2124:	8b 30       	cpi	r24, 0x0B	; 11
    2126:	20 f4       	brcc	.+8      	; 0x2130 <.L45>

00002128 <.L44>:
for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
    2128:	b3 94       	inc	r11

0000212a <.Loc.261>:
    212a:	84 e0       	ldi	r24, 0x04	; 4

0000212c <.LVL89>:
    212c:	b8 12       	cpse	r11, r24
    212e:	cf cf       	rjmp	.-98     	; 0x20ce <.L46>

00002130 <.L45>:
wait_for_key_ms(1000);	// wait up to 1 second or key is pressed
    2130:	88 ee       	ldi	r24, 0xE8	; 232
    2132:	93 e0       	ldi	r25, 0x03	; 3
    2134:	ed dd       	rcall	.-1062   	; 0x1d10 <wait_for_key_ms>

00002136 <.LVL90>:
for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    2136:	9f ef       	ldi	r25, 0xFF	; 255
    2138:	e9 1a       	sub	r14, r25
    213a:	f9 0a       	sbc	r15, r25

0000213c <.LVL91>:
    213c:	e8 e0       	ldi	r30, 0x08	; 8
    213e:	ee 16       	cp	r14, r30
    2140:	f1 04       	cpc	r15, r1
    2142:	09 f0       	breq	.+2      	; 0x2146 <.L30>

00002144 <L0^A>:
    2144:	ba cf       	rjmp	.-140    	; 0x20ba <.L29>

00002146 <.L30>:
    2146:	08 e7       	ldi	r16, 0x78	; 120

00002148 <.L50>:
  if (AllProbesShorted() == 0) break;
    2148:	01 df       	rcall	.-510    	; 0x1f4c <AllProbesShorted>

0000214a <.LVL94>:
    214a:	81 11       	cpse	r24, r1
    214c:	91 c2       	rjmp	.+1314   	; 0x2670 <.L47>

0000214e <.L51>:
lcd_clear();
    214e:	6c da       	rcall	.-2856   	; 0x1628 <lcd_clear>

00002150 <.LVL96>:
lcd_MEM_string(RIHI_str);	// "RiHi="
    2150:	8a ea       	ldi	r24, 0xAA	; 170
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	fc db       	rcall	.-2056   	; 0x194e <lcd_fix_string>

00002156 <.LVL97>:
DisplayValue16(RRpinPL,-1,LCD_CHAR_OMEGA,3);
    2156:	23 e0       	ldi	r18, 0x03	; 3
    2158:	4d e1       	ldi	r20, 0x1D	; 29
    215a:	6f ef       	ldi	r22, 0xFF	; 255
    215c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <pin_rpl>
    2160:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <pin_rpl+0x1>
    2164:	3e dd       	rcall	.-1412   	; 0x1be2 <DisplayValue16>

00002166 <.LVL98>:
lcd_line2();
    2166:	32 da       	rcall	.-2972   	; 0x15cc <lcd_line2>

00002168 <.LVL99>:
lcd_MEM_string(RILO_str);	// "RiLo="
    2168:	83 ea       	ldi	r24, 0xA3	; 163
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	f0 db       	rcall	.-2080   	; 0x194e <lcd_fix_string>

0000216e <.LVL100>:
DisplayValue16(RRpinMI,-1,LCD_CHAR_OMEGA,3);
    216e:	23 e0       	ldi	r18, 0x03	; 3
    2170:	4d e1       	ldi	r20, 0x1D	; 29
    2172:	6f ef       	ldi	r22, 0xFF	; 255
    2174:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <pin_rmi>
    2178:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <pin_rmi+0x1>
    217c:	32 dd       	rcall	.-1436   	; 0x1be2 <DisplayValue16>

0000217e <.LVL101>:
last_line_used = 2;
    217e:	82 e0       	ldi	r24, 0x02	; 2
    2180:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <last_line_used>

00002184 <.Loc.279>:
wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
    2184:	2c de       	rcall	.-936    	; 0x1dde <wait_for_key_5s_line2>

00002186 <.LVL102>:
PartFound = PART_NONE;
    2186:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <PartFound>

0000218a <.Loc.282>:
lcd_clear();
    218a:	4e da       	rcall	.-2916   	; 0x1628 <lcd_clear>

0000218c <.LVL103>:
lcd_MEM_string(C0_str);			//output "C0 "
    218c:	8f e9       	ldi	r24, 0x9F	; 159
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	de db       	rcall	.-2116   	; 0x194e <lcd_fix_string>

00002192 <.LVL104>:
ReadCapacity(TP3, TP1);
    2192:	60 e0       	ldi	r22, 0x00	; 0
    2194:	82 e0       	ldi	r24, 0x02	; 2
    2196:	0e 94 b7 23 	call	0x476e	; 0x476e <ReadCapacity>

0000219a <.LVL105>:
adcmv[5] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:3
    219a:	40 90 44 01 	lds	r4, 0x0144	; 0x800144 <cap+0x8>
    219e:	50 90 45 01 	lds	r5, 0x0145	; 0x800145 <cap+0x9>
    21a2:	60 90 46 01 	lds	r6, 0x0146	; 0x800146 <cap+0xa>
    21a6:	70 90 47 01 	lds	r7, 0x0147	; 0x800147 <cap+0xb>

000021aa <.Loc.287>:
    21aa:	5c 86       	std	Y+12, r5	; 0x0c
    21ac:	4b 86       	std	Y+11, r4	; 0x0b

000021ae <.Loc.288>:
ReadCapacity(TP3, TP2);
    21ae:	61 e0       	ldi	r22, 0x01	; 1
    21b0:	82 e0       	ldi	r24, 0x02	; 2
    21b2:	0e 94 b7 23 	call	0x476e	; 0x476e <ReadCapacity>

000021b6 <.LVL106>:
adcmv[6] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:3
    21b6:	80 90 44 01 	lds	r8, 0x0144	; 0x800144 <cap+0x8>
    21ba:	90 90 45 01 	lds	r9, 0x0145	; 0x800145 <cap+0x9>
    21be:	a0 90 46 01 	lds	r10, 0x0146	; 0x800146 <cap+0xa>
    21c2:	b0 90 47 01 	lds	r11, 0x0147	; 0x800147 <cap+0xb>

000021c6 <.Loc.291>:
    21c6:	9e 86       	std	Y+14, r9	; 0x0e
    21c8:	8d 86       	std	Y+13, r8	; 0x0d

000021ca <.Loc.292>:
ReadCapacity(TP2, TP1);
    21ca:	60 e0       	ldi	r22, 0x00	; 0
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	0e 94 b7 23 	call	0x476e	; 0x476e <ReadCapacity>

000021d2 <.LVL107>:
adcmv[2] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:2
    21d2:	c0 90 44 01 	lds	r12, 0x0144	; 0x800144 <cap+0x8>
    21d6:	d0 90 45 01 	lds	r13, 0x0145	; 0x800145 <cap+0x9>

000021da <.Loc.295>:
    21da:	de 82       	std	Y+6, r13	; 0x06
    21dc:	cd 82       	std	Y+5, r12	; 0x05

000021de <.Loc.296>:
ReadCapacity(TP1, TP3);
    21de:	62 e0       	ldi	r22, 0x02	; 2
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	0e 94 b7 23 	call	0x476e	; 0x476e <ReadCapacity>

000021e6 <.LVL108>:
adcmv[1] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:1
    21e6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <cap+0x8>
    21ea:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <cap+0x9>
    21ee:	9c 83       	std	Y+4, r25	; 0x04
    21f0:	8b 83       	std	Y+3, r24	; 0x03

000021f2 <.Loc.299>:
ReadCapacity(TP2, TP3);
    21f2:	62 e0       	ldi	r22, 0x02	; 2
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	0e 94 b7 23 	call	0x476e	; 0x476e <ReadCapacity>

000021fa <.LVL109>:
adcmv[4] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:2
    21fa:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <cap+0x8>
    21fe:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <cap+0x9>
    2202:	9a 87       	std	Y+10, r25	; 0x0a
    2204:	89 87       	std	Y+9, r24	; 0x09

00002206 <.Loc.302>:
ReadCapacity(TP1, TP2);
    2206:	61 e0       	ldi	r22, 0x01	; 1
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	0e 94 b7 23 	call	0x476e	; 0x476e <ReadCapacity>

0000220e <.LVL110>:
adcmv[0] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:1
    220e:	e0 90 44 01 	lds	r14, 0x0144	; 0x800144 <cap+0x8>
    2212:	f0 90 45 01 	lds	r15, 0x0145	; 0x800145 <cap+0x9>

00002216 <.Loc.305>:
    2216:	fa 82       	std	Y+2, r15	; 0x02
    2218:	e9 82       	std	Y+1, r14	; 0x01

0000221a <.Loc.306>:
u2lcd_space(adcmv[5]);	//DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
    221a:	c2 01       	movw	r24, r4
    221c:	0e 94 b3 06 	call	0xd66	; 0xd66 <u2lcd_space>

00002220 <.LVL111>:
u2lcd_space(adcmv[6]);	//DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
    2220:	c4 01       	movw	r24, r8
    2222:	0e 94 b3 06 	call	0xd66	; 0xd66 <u2lcd_space>

00002226 <.LVL112>:
DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
    2226:	b6 01       	movw	r22, r12
    2228:	0d 2c       	mov	r0, r13
    222a:	00 0c       	add	r0, r0
    222c:	88 0b       	sbc	r24, r24
    222e:	99 0b       	sbc	r25, r25
    2230:	03 e0       	ldi	r16, 0x03	; 3
    2232:	26 e4       	ldi	r18, 0x46	; 70
    2234:	44 ef       	ldi	r20, 0xF4	; 244
    2236:	d0 db       	rcall	.-2144   	; 0x19d8 <DisplayValue>

00002238 <.LVL113>:
if (((test_mode & 0x0f) == 1) || (UnCalibrated == 2))
    2238:	11 30       	cpi	r17, 0x01	; 1
    223a:	09 f0       	breq	.+2      	; 0x223e <.L48>

0000223c <L0^A>:
    223c:	24 c2       	rjmp	.+1096   	; 0x2686 <.L103>

0000223e <.L48>:
  adcmv[3] = adcmv[0] + 2;		// mark as uncalibrated until Cap > 100nF has success
    223e:	f2 e0       	ldi	r31, 0x02	; 2
    2240:	ef 0e       	add	r14, r31
    2242:	f1 1c       	adc	r15, r1

00002244 <.Loc.313>:
    2244:	f8 86       	std	Y+8, r15	; 0x08
    2246:	ef 82       	std	Y+7, r14	; 0x07

00002248 <.L53>:
for (ww=0;ww<7;ww++) {			//checking loop
    2248:	ce 01       	movw	r24, r28
    224a:	01 96       	adiw	r24, 0x01	; 1
    224c:	7c 01       	movw	r14, r24
    224e:	5e 01       	movw	r10, r28
    2250:	9f e0       	ldi	r25, 0x0F	; 15
    2252:	a9 0e       	add	r10, r25
    2254:	b1 1c       	adc	r11, r1
    2256:	f7 01       	movw	r30, r14

00002258 <.L55>:
if ((adcmv[ww] > 190) || (adcmv[ww] < 10)) goto no_c0save;
    2258:	81 91       	ld	r24, Z+
    225a:	91 91       	ld	r25, Z+

0000225c <.Loc.319>:
    225c:	0a 97       	sbiw	r24, 0x0a	; 10

0000225e <.Loc.320>:
    225e:	85 3b       	cpi	r24, 0xB5	; 181
    2260:	91 05       	cpc	r25, r1
    2262:	d0 f4       	brcc	.+52     	; 0x2298 <.L54>

00002264 <.Loc.321>:
for (ww=0;ww<7;ww++) {			//checking loop
    2264:	ea 15       	cp	r30, r10
    2266:	fb 05       	cpc	r31, r11
    2268:	b9 f7       	brne	.-18     	; 0x2258 <.L55>
    226a:	57 e3       	ldi	r21, 0x37	; 55
    226c:	c5 2e       	mov	r12, r21
    226e:	53 e0       	ldi	r21, 0x03	; 3
    2270:	d5 2e       	mov	r13, r21

00002272 <.L56>:
  (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
    2272:	f7 01       	movw	r30, r14
    2274:	60 81       	ld	r22, Z
    2276:	f2 e0       	ldi	r31, 0x02	; 2
    2278:	ef 0e       	add	r14, r31
    227a:	f1 1c       	adc	r15, r1

0000227c <.Loc.325>:
    227c:	6e 5e       	subi	r22, 0xEE	; 238
    227e:	c6 01       	movw	r24, r12
    2280:	0e 94 22 39 	call	0x7244	; 0x7244 <eeprom_write_byte>

00002284 <.LVL118>:
for (ww=0;ww<7;ww++) {
    2284:	2f ef       	ldi	r18, 0xFF	; 255
    2286:	c2 1a       	sub	r12, r18
    2288:	d2 0a       	sbc	r13, r18

0000228a <.LVL119>:
    228a:	ea 14       	cp	r14, r10
    228c:	fb 04       	cpc	r15, r11
    228e:	89 f7       	brne	.-30     	; 0x2272 <.L56>

00002290 <.Loc.329>:
lcd_line2();
    2290:	9d d9       	rcall	.-3270   	; 0x15cc <lcd_line2>

00002292 <.LVL120>:
lcd_MEM_string(OK_str);		// output "OK"
    2292:	85 ea       	ldi	r24, 0xA5	; 165
    2294:	91 e0       	ldi	r25, 0x01	; 1
    2296:	5b db       	rcall	.-2378   	; 0x194e <lcd_fix_string>

00002298 <.L54>:
last_line_used = 2;
    2298:	82 e0       	ldi	r24, 0x02	; 2
    229a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <last_line_used>

0000229e <.Loc.333>:
wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
    229e:	9f dd       	rcall	.-1218   	; 0x1dde <wait_for_key_5s_line2>

000022a0 <.LVL122>:
  sampling_cap_calibrate();		// measure zero capacity for samplingADC
    22a0:	0e 94 91 34 	call	0x6922	; 0x6922 <sampling_cap_calibrate>

000022a4 <.LVL123>:
if (((test_mode & 0x0f) == 1) || (UnCalibrated == 2))
    22a4:	11 30       	cpi	r17, 0x01	; 1
    22a6:	29 f0       	breq	.+10     	; 0x22b2 <.L57>

000022a8 <.Loc.337>:
    22a8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <UnCalibrated>
    22ac:	82 30       	cpi	r24, 0x02	; 2
    22ae:	09 f0       	breq	.+2      	; 0x22b2 <.L57>

000022b0 <L0^A>:
    22b0:	d3 c0       	rjmp	.+422    	; 0x2458 <.L58>

000022b2 <.L57>:
lcd_clear();
    22b2:	ba d9       	rcall	.-3212   	; 0x1628 <lcd_clear>

000022b4 <.LVL125>:
lcd_testpin(TP1);
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	3d db       	rcall	.-2438   	; 0x1932 <lcd_testpin>

000022b8 <.LVL126>:
lcd_MEM_string(CapZeich);	// "-||-"
    22b8:	8b e4       	ldi	r24, 0x4B	; 75
    22ba:	91 e0       	ldi	r25, 0x01	; 1
    22bc:	48 db       	rcall	.-2416   	; 0x194e <lcd_fix_string>

000022be <.LVL127>:
lcd_testpin(TP3);
    22be:	82 e0       	ldi	r24, 0x02	; 2
    22c0:	38 db       	rcall	.-2448   	; 0x1932 <lcd_testpin>

000022c2 <.LVL128>:
lcd_MEM2_string(MinCap_str);	// " >100nF!"
    22c2:	84 e2       	ldi	r24, 0x24	; 36
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	43 db       	rcall	.-2426   	; 0x194e <lcd_fix_string>

000022c8 <.LVL129>:
    22c8:	20 e4       	ldi	r18, 0x40	; 64
    22ca:	f2 2e       	mov	r15, r18

000022cc <.Loc.347>:
cap_found = 0;
    22cc:	10 e0       	ldi	r17, 0x00	; 0

000022ce <.Loc.348>:
   cap.cval /= 10;
    22ce:	3a e0       	ldi	r19, 0x0A	; 10
    22d0:	83 2e       	mov	r8, r19
    22d2:	91 2c       	mov	r9, r1
    22d4:	a1 2c       	mov	r10, r1
    22d6:	b1 2c       	mov	r11, r1
    22d8:	47 ef       	ldi	r20, 0xF7	; 247
    22da:	e4 2e       	mov	r14, r20

000022dc <.L66>:
  init_parts();
    22dc:	d0 dd       	rcall	.-1120   	; 0x1e7e <init_parts>

000022de <.LVL131>:
  PartFound = PART_NONE;
    22de:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <PartFound>

000022e2 <.Loc.352>:
  ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
    22e2:	60 e0       	ldi	r22, 0x00	; 0
    22e4:	82 e0       	ldi	r24, 0x02	; 2
    22e6:	0e 94 b7 23 	call	0x476e	; 0x476e <ReadCapacity>

000022ea <.LVL132>:
  while (cap.cpre < -9) {
    22ea:	00 91 4e 01 	lds	r16, 0x014E	; 0x80014e <cap+0x12>
    22ee:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <cap>
    22f2:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <cap+0x1>
    22f6:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <cap+0x2>
    22fa:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <cap+0x3>

000022fe <.Loc.354>:
    22fe:	d0 2e       	mov	r13, r16

00002300 <.L59>:
    2300:	87 ef       	ldi	r24, 0xF7	; 247
    2302:	d8 16       	cp	r13, r24
    2304:	0c f4       	brge	.+2      	; 0x2308 <L0^A+0x2>

00002306 <L0^A>:
    2306:	c9 c1       	rjmp	.+914    	; 0x269a <.L60>
    2308:	8e 2d       	mov	r24, r14
    230a:	80 1b       	sub	r24, r16
    230c:	08 3f       	cpi	r16, 0xF8	; 248
    230e:	0c f0       	brlt	.+2      	; 0x2312 <.L62>
    2310:	80 e0       	ldi	r24, 0x00	; 0

00002312 <.L62>:
    2312:	80 0f       	add	r24, r16
    2314:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <cap+0x12>
    2318:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <cap>
    231c:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <cap+0x1>
    2320:	40 93 3e 01 	sts	0x013E, r20	; 0x80013e <cap+0x2>
    2324:	50 93 3f 01 	sts	0x013F, r21	; 0x80013f <cap+0x3>

00002328 <.Loc.356>:
  if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000) &&
    2328:	87 3f       	cpi	r24, 0xF7	; 247
    232a:	09 f0       	breq	.+2      	; 0x232e <.Loc.358>

0000232c <L0^A>:
    232c:	be c1       	rjmp	.+892    	; 0x26aa <.L75>

0000232e <.Loc.358>:
    232e:	da 01       	movw	r26, r20
    2330:	c9 01       	movw	r24, r18
    2332:	80 56       	subi	r24, 0x60	; 96
    2334:	91 09       	sbc	r25, r1
    2336:	a1 09       	sbc	r26, r1
    2338:	b1 09       	sbc	r27, r1
    233a:	80 39       	cpi	r24, 0x90	; 144
    233c:	95 45       	sbci	r25, 0x55	; 85
    233e:	a1 05       	cpc	r26, r1
    2340:	b1 05       	cpc	r27, r1
    2342:	08 f0       	brcs	.+2      	; 0x2346 <.Loc.359>

00002344 <L0^A>:
    2344:	b2 c1       	rjmp	.+868    	; 0x26aa <.L75>

00002346 <.Loc.359>:
    2346:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <load_diff>
    234a:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <load_diff+0x1>
    234e:	cb 01       	movw	r24, r22
    2350:	8b 56       	subi	r24, 0x6B	; 107
    2352:	9f 4f       	sbci	r25, 0xFF	; 255
    2354:	8b 32       	cpi	r24, 0x2B	; 43
    2356:	91 40       	sbci	r25, 0x01	; 1
    2358:	08 f0       	brcs	.+2      	; 0x235c <.Loc.360>

0000235a <L0^A>:
    235a:	a7 c1       	rjmp	.+846    	; 0x26aa <.L75>

0000235c <.Loc.360>:
   cap_found++;
    235c:	1f 5f       	subi	r17, 0xFF	; 255

0000235e <.Loc.362>:
  if (cap_found > 4) {
    235e:	15 30       	cpi	r17, 0x05	; 5
    2360:	09 f0       	breq	.+2      	; 0x2364 <.Loc.364>

00002362 <L0^A>:
    2362:	a4 c1       	rjmp	.+840    	; 0x26ac <.L64>

00002364 <.Loc.364>:
     (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
    2364:	8e e3       	ldi	r24, 0x3E	; 62
    2366:	93 e0       	ldi	r25, 0x03	; 3
    2368:	0e 94 30 39 	call	0x7260	; 0x7260 <eeprom_write_word>

0000236c <.LVL134>:
     lcd_clear();
    236c:	5d d9       	rcall	.-3398   	; 0x1628 <lcd_clear>

0000236e <.LVL135>:
     lcd_MEM2_string(REF_C_str);	// "REF_C="
    236e:	8d e1       	ldi	r24, 0x1D	; 29
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	ed da       	rcall	.-2598   	; 0x194e <lcd_fix_string>

00002374 <.LVL136>:
     i2lcd(load_diff);		// lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
    2374:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <load_diff>
    2378:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <load_diff+0x1>
    237c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <i2lcd>

00002380 <.LVL137>:
     RefVoltage();			// new ref_mv_offs and RHmultip
    2380:	0e 94 6e 08 	call	0x10dc	; 0x10dc <RefVoltage>

00002384 <.LVL138>:
   ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
    2384:	18 b8       	out	0x08, r1	; 8

00002386 <.Loc.371>:
   ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	87 b9       	out	0x07, r24	; 7

0000238a <.Loc.373>:
   R_DDR = 1<<PIN_RH3;		//Pin 3 over R_H to GND
    238a:	80 e2       	ldi	r24, 0x20	; 32
    238c:	84 b9       	out	0x04, r24	; 4

0000238e <.L65>:
      adcmv[0] = ReadADC(CAP_ADC);
    238e:	82 e0       	ldi	r24, 0x02	; 2
    2390:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00002394 <.LVL139>:
   } while (adcmv[0] > 980);
    2394:	85 3d       	cpi	r24, 0xD5	; 213
    2396:	93 40       	sbci	r25, 0x03	; 3
    2398:	d4 f7       	brge	.-12     	; 0x238e <.L65>

0000239a <.Loc.379>:
   R_DDR = 0;		//all Pins to input 
    239a:	14 b8       	out	0x04, r1	; 4

0000239c <.Loc.381>:
   ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    239c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <ADCconfig+0x3>
    23a0:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <ADCconfig+0x2>

000023a4 <.Loc.383>:
   adcmv[0] = ReadADC(CAP_ADC);  // get cap voltage with VCC reference
    23a4:	82 e0       	ldi	r24, 0x02	; 2
    23a6:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

000023aa <.LVL140>:
    23aa:	8c 01       	movw	r16, r24

000023ac <.Loc.385>:
   ADCconfig.U_Bandgap = adc_internal_reference;
    23ac:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <adc_internal_reference>
    23b0:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <adc_internal_reference+0x1>
    23b4:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <ADCconfig+0x3>
    23b8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <ADCconfig+0x2>

000023bc <.Loc.387>:
   adcmv[1] = ReadADC(CAP_ADC);	// get cap voltage with internal reference
    23bc:	82 e0       	ldi	r24, 0x02	; 2
    23be:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

000023c2 <.LVL141>:
   adcmv[1] += adcmv[1];		// double the value
    23c2:	7c 01       	movw	r14, r24
    23c4:	ee 0c       	add	r14, r14
    23c6:	ff 1c       	adc	r15, r15

000023c8 <.Loc.391>:
   ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    23c8:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <ADCconfig+0x3>
    23cc:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <ADCconfig+0x2>

000023d0 <.Loc.393>:
   adcmv[2] = ReadADC(CAP_ADC);  // get cap voltage with VCC reference
    23d0:	82 e0       	ldi	r24, 0x02	; 2
    23d2:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

000023d6 <.LVL142>:
    23d6:	4c 01       	movw	r8, r24

000023d8 <.Loc.395>:
   ADCconfig.U_Bandgap = adc_internal_reference;
    23d8:	c0 90 5c 01 	lds	r12, 0x015C	; 0x80015c <adc_internal_reference>
    23dc:	d0 90 5d 01 	lds	r13, 0x015D	; 0x80015d <adc_internal_reference+0x1>
    23e0:	d0 92 21 01 	sts	0x0121, r13	; 0x800121 <ADCconfig+0x3>
    23e4:	c0 92 20 01 	sts	0x0120, r12	; 0x800120 <ADCconfig+0x2>

000023e8 <.LVL143>:
   lcd_line2();
    23e8:	f1 d8       	rcall	.-3614   	; 0x15cc <lcd_line2>

000023ea <.LVL144>:
   lcd_MEM2_string(REF_R_str);	// "REF_R="
    23ea:	86 e1       	ldi	r24, 0x16	; 22
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	af da       	rcall	.-2722   	; 0x194e <lcd_fix_string>

000023f0 <.LVL145>:
   udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    23f0:	80 e4       	ldi	r24, 0x40	; 64
    23f2:	93 e0       	ldi	r25, 0x03	; 3
    23f4:	0e 94 15 39 	call	0x722a	; 0x722a <eeprom_read_byte>

000023f8 <.LVL146>:
    23f8:	b8 2e       	mov	r11, r24

000023fa <.Loc.402>:
   udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1])) * adc_internal_reference / adcmv[1])+REF_R_KORR;
    23fa:	d8 01       	movw	r26, r16
    23fc:	a8 0d       	add	r26, r8
    23fe:	b9 1d       	adc	r27, r9

00002400 <.Loc.403>:
    2400:	ae 19       	sub	r26, r14
    2402:	bf 09       	sbc	r27, r15

00002404 <.Loc.404>:
    2404:	96 01       	movw	r18, r12
    2406:	0e 94 74 38 	call	0x70e8	; 0x70e8 <__usmulhisi3>

0000240a <.Loc.405>:
    240a:	97 01       	movw	r18, r14
    240c:	0f 2c       	mov	r0, r15
    240e:	00 0c       	add	r0, r0
    2410:	44 0b       	sbc	r20, r20
    2412:	55 0b       	sbc	r21, r21

00002414 <.Loc.406>:
    2414:	0e 94 49 38 	call	0x7092	; 0x7092 <__divmodsi4>

00002418 <.Loc.407>:
   udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    2418:	83 e0       	ldi	r24, 0x03	; 3
    241a:	8b 0d       	add	r24, r11
    241c:	18 2f       	mov	r17, r24

0000241e <.LVL147>:
    241e:	12 0f       	add	r17, r18

00002420 <.LVL148>:
   (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
    2420:	61 2f       	mov	r22, r17
    2422:	80 e4       	ldi	r24, 0x40	; 64
    2424:	93 e0       	ldi	r25, 0x03	; 3
    2426:	0e 94 22 39 	call	0x7244	; 0x7244 <eeprom_write_byte>

0000242a <.LVL149>:
   i2lcd(udiff2);		// output correction voltage
    242a:	81 2f       	mov	r24, r17
    242c:	01 2e       	mov	r0, r17
    242e:	00 0c       	add	r0, r0
    2430:	99 0b       	sbc	r25, r25
    2432:	0e 94 9e 06 	call	0xd3c	; 0xd3c <i2lcd>

00002436 <.LVL150>:
   RefVoltage();			// set new ADCconfig.U_Bandgap
    2436:	0e 94 6e 08 	call	0x10dc	; 0x10dc <RefVoltage>

0000243a <.LVL151>:
   last_line_used = 2;
    243a:	82 e0       	ldi	r24, 0x02	; 2
    243c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <last_line_used>

00002440 <.Loc.414>:
   wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
    2440:	ce dc       	rcall	.-1636   	; 0x1dde <wait_for_key_5s_line2>

00002442 <.LVL152>:
   UnCalibrated = 0;		// clear the UnCalibrated Flag
    2442:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <UnCalibrated>

00002446 <.Loc.417>:
   cap_found = eeprom_read_byte((uint8_t *)&c_zero_tab[0]);	// read first capacity zero offset
    2446:	87 e3       	ldi	r24, 0x37	; 55
    2448:	93 e0       	ldi	r25, 0x03	; 3
    244a:	0e 94 15 39 	call	0x722a	; 0x722a <eeprom_read_byte>

0000244e <.LVL153>:
    244e:	68 2f       	mov	r22, r24

00002450 <.LVL154>:
   eeprom_write_byte((uint8_t *)&c_zero_tab[3], cap_found);	// mark as calibrated permanent
    2450:	8a e3       	ldi	r24, 0x3A	; 58
    2452:	93 e0       	ldi	r25, 0x03	; 3
    2454:	0e 94 22 39 	call	0x7244	; 0x7244 <eeprom_write_byte>

00002458 <.L58>:
ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    2458:	89 e1       	ldi	r24, 0x19	; 25
    245a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ADCconfig>

0000245e <.Loc.424>:
  sampling_lc_calibrate(0);	// Cap for L-meas
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	0e 94 9f 37 	call	0x6f3e	; 0x6f3e <sampling_lc_calibrate>

00002464 <.LVL156>:
lcd_clear();
    2464:	e1 d8       	rcall	.-3646   	; 0x1628 <lcd_clear>

00002466 <.LVL157>:
lcd_MEM_string(VERSION_str);	//"Version ..."
    2466:	85 ef       	ldi	r24, 0xF5	; 245
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	71 da       	rcall	.-2846   	; 0x194e <lcd_fix_string>

0000246c <.LVL158>:
lcd_line2();
    246c:	af d8       	rcall	.-3746   	; 0x15cc <lcd_line2>

0000246e <.LVL159>:
lcd_MEM_string(ATE);		//"Selftest End"
    246e:	85 e3       	ldi	r24, 0x35	; 53
    2470:	92 e0       	ldi	r25, 0x02	; 2
    2472:	6d da       	rcall	.-2854   	; 0x194e <lcd_fix_string>

00002474 <.LVL160>:
PartFound = PART_NONE;
    2474:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <PartFound>

00002478 <.Loc.431>:
     last_line_used = 2;
    2478:	82 e0       	ldi	r24, 0x02	; 2
    247a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <last_line_used>

0000247e <.Loc.433>:
wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
    247e:	af dc       	rcall	.-1698   	; 0x1dde <wait_for_key_5s_line2>

00002480 <.LVL161>:
    2480:	93 cd       	rjmp	.-1242   	; 0x1fa8 <.L19>

00002482 <.L31>:
   if (tt == 2) { // how equal are the RL resistors? 
    2482:	02 30       	cpi	r16, 0x02	; 2
    2484:	a9 f5       	brne	.+106    	; 0x24f0 <.L33>

00002486 <.Loc.436>:
      u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    2486:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <ADCconfig+0x4>
    248a:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <ADCconfig+0x5>
    248e:	a8 e5       	ldi	r26, 0x58	; 88
    2490:	bb e1       	ldi	r27, 0x1B	; 27
    2492:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

00002496 <.Loc.438>:
    2496:	24 ec       	ldi	r18, 0xC4	; 196
    2498:	36 e3       	ldi	r19, 0x36	; 54
    249a:	40 e0       	ldi	r20, 0x00	; 0
    249c:	50 e0       	ldi	r21, 0x00	; 0
    249e:	0e 94 49 38 	call	0x7092	; 0x7092 <__divmodsi4>
    24a2:	29 01       	movw	r4, r18
    24a4:	3a 01       	movw	r6, r20

000024a6 <.LVL163>:
      R_PORT = 1<<PIN_RL1;		//RL1 to VCC
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	85 b9       	out	0x05, r24	; 5

000024aa <.Loc.441>:
      R_DDR = (1<<PIN_RL1) | (1<<PIN_RL2);	//RL2 to -
    24aa:	94 b8       	out	0x04, r9	; 4

000024ac <.Loc.443>:
      adcmv[0] = W20msReadADC(TP1);
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <W20msReadADC>

000024b2 <.LVL164>:
    24b2:	9c 01       	movw	r18, r24

000024b4 <.Loc.445>:
      adcmv[0] -= u680;
    24b4:	24 19       	sub	r18, r4
    24b6:	35 09       	sbc	r19, r5
    24b8:	3a 83       	std	Y+2, r19	; 0x02
    24ba:	29 83       	std	Y+1, r18	; 0x01

000024bc <.Loc.447>:
      R_DDR = (1<<PIN_RL1) | (1<<PIN_RL3);	//RL3 to -
    24bc:	81 e1       	ldi	r24, 0x11	; 17
    24be:	84 b9       	out	0x04, r24	; 4

000024c0 <.Loc.449>:
      adcmv[1] = W20msReadADC(TP1);
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <W20msReadADC>

000024c6 <.LVL165>:
    24c6:	9c 01       	movw	r18, r24

000024c8 <.Loc.451>:
      adcmv[1] -= u680;
    24c8:	24 19       	sub	r18, r4
    24ca:	35 09       	sbc	r19, r5
    24cc:	3c 83       	std	Y+4, r19	; 0x04
    24ce:	2b 83       	std	Y+3, r18	; 0x03

000024d0 <.Loc.453>:
      R_PORT = 1<<PIN_RL2;		//RL2 to VCC
    24d0:	84 e0       	ldi	r24, 0x04	; 4
    24d2:	85 b9       	out	0x05, r24	; 5

000024d4 <.Loc.455>:
      R_DDR = (1<<PIN_RL2) | (1<<PIN_RL3);	//RL3 to -
    24d4:	84 e1       	ldi	r24, 0x14	; 20
    24d6:	84 b9       	out	0x04, r24	; 4

000024d8 <.Loc.457>:
      adcmv[2] = W20msReadADC(TP2);
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <W20msReadADC>

000024de <.LVL166>:
    24de:	9c 01       	movw	r18, r24

000024e0 <.Loc.459>:
      adcmv[2] -= u680;
    24e0:	24 19       	sub	r18, r4
    24e2:	35 09       	sbc	r19, r5
    24e4:	3e 83       	std	Y+6, r19	; 0x06
    24e6:	2d 83       	std	Y+5, r18	; 0x05

000024e8 <.Loc.461>:
      lcd_MEM_string(RLRL_str);	// "RLRL"
    24e8:	89 ec       	ldi	r24, 0xC9	; 201
    24ea:	90 e0       	ldi	r25, 0x00	; 0

000024ec <.L105>:
      lcd_MEM_string(RHRL_str);	// "RH/RL"
    24ec:	30 da       	rcall	.-2976   	; 0x194e <lcd_fix_string>

000024ee <.LVL168>:
    24ee:	33 c0       	rjmp	.+102    	; 0x2556 <.L42>

000024f0 <.L33>:
   if (tt == 3) { // how equal are the RH resistors
    24f0:	03 30       	cpi	r16, 0x03	; 3
    24f2:	49 f5       	brne	.+82     	; 0x2546 <.L35>

000024f4 <.Loc.465>:
      R_PORT = 1<<PIN_RH1;		//RH1 to VCC
    24f4:	d5 b8       	out	0x05, r13	; 5

000024f6 <.Loc.467>:
      R_DDR = (1<<PIN_RH1) | (1<<PIN_RH2);	//RH2 to -
    24f6:	24 b8       	out	0x04, r2	; 4

000024f8 <.Loc.469>:
      adcmv[0] = W20msReadADC(TP1);
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <W20msReadADC>

000024fe <.LVL170>:
      adcmv[3] = ADCconfig.U_AVCC / 2;
    24fe:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <ADCconfig+0x4>
    2502:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <ADCconfig+0x5>
    2506:	36 95       	lsr	r19
    2508:	27 95       	ror	r18

0000250a <.Loc.473>:
    250a:	38 87       	std	Y+8, r19	; 0x08
    250c:	2f 83       	std	Y+7, r18	; 0x07

0000250e <.Loc.474>:
      adcmv[0] -= adcmv[3];
    250e:	82 1b       	sub	r24, r18
    2510:	93 0b       	sbc	r25, r19
    2512:	9a 83       	std	Y+2, r25	; 0x02
    2514:	89 83       	std	Y+1, r24	; 0x01

00002516 <.Loc.476>:
      R_DDR = (1<<PIN_RH1) | (1<<PIN_RH3);	//RH3 to -
    2516:	34 b8       	out	0x04, r3	; 4

00002518 <.Loc.478>:
      adcmv[1] = W20msReadADC(TP1);
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <W20msReadADC>

0000251e <.LVL171>:
      adcmv[1] -= adcmv[3];
    251e:	2f 81       	ldd	r18, Y+7	; 0x07
    2520:	38 85       	ldd	r19, Y+8	; 0x08
    2522:	82 1b       	sub	r24, r18
    2524:	93 0b       	sbc	r25, r19
    2526:	9c 83       	std	Y+4, r25	; 0x04
    2528:	8b 83       	std	Y+3, r24	; 0x03

0000252a <.Loc.482>:
      R_PORT = 1<<PIN_RH2;		//RH2 to VCC
    252a:	c5 b8       	out	0x05, r12	; 5

0000252c <.Loc.484>:
      R_DDR = (1<<PIN_RH2) | (1<<PIN_RH3);	//RH3 to -
    252c:	84 b8       	out	0x04, r8	; 4

0000252e <.Loc.486>:
      adcmv[2] = W20msReadADC(TP2);
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <W20msReadADC>

00002534 <.LVL172>:
      adcmv[2] -= adcmv[3];
    2534:	2f 81       	ldd	r18, Y+7	; 0x07
    2536:	38 85       	ldd	r19, Y+8	; 0x08
    2538:	82 1b       	sub	r24, r18
    253a:	93 0b       	sbc	r25, r19
    253c:	9e 83       	std	Y+6, r25	; 0x06
    253e:	8d 83       	std	Y+5, r24	; 0x05

00002540 <.Loc.490>:
      lcd_MEM_string(RHRH_str);	// "RHRH"
    2540:	8b eb       	ldi	r24, 0xBB	; 187
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	d3 cf       	rjmp	.-90     	; 0x24ec <.L105>

00002546 <.L35>:
   if (tt == 4) { // Text release probes
    2546:	04 30       	cpi	r16, 0x04	; 4
    2548:	c1 f4       	brne	.+48     	; 0x257a <.L37>

0000254a <.Loc.493>:
      lcd_MEM_string(RELPROBE);	// "Release Probes"
    254a:	83 e4       	ldi	r24, 0x43	; 67
    254c:	92 e0       	ldi	r25, 0x02	; 2
    254e:	ff d9       	rcall	.-3074   	; 0x194e <lcd_fix_string>

00002550 <.LVL173>:
      if (AllProbesShorted() != 0) ww = MAX_REP-2;
    2550:	fd dc       	rcall	.-1542   	; 0x1f4c <AllProbesShorted>

00002552 <.LVL174>:
    2552:	81 11       	cpse	r24, r1
    2554:	c3 c0       	rjmp	.+390    	; 0x26dc <.L38>

00002556 <.L42>:
      lcd_line2();			//Cursor to column 1, row 2
    2556:	3a d8       	rcall	.-3980   	; 0x15cc <lcd_line2>

00002558 <.LVL176>:
      i2lcd(adcmv[0]);		// lcd_string(itoa(adcmv[0], outval, 10));	//output voltage 1
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	9a 81       	ldd	r25, Y+2	; 0x02
    255c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <i2lcd>

00002560 <.LVL177>:
      lcd_space();
    2560:	0e 94 b4 06 	call	0xd68	; 0xd68 <lcd_space>

00002564 <.LVL178>:
      i2lcd(adcmv[1]);		// lcd_string(itoa(adcmv[1], outval, 10));	//output voltage 2
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	9c 81       	ldd	r25, Y+4	; 0x04
    2568:	0e 94 9e 06 	call	0xd3c	; 0xd3c <i2lcd>

0000256c <.LVL179>:
      lcd_space();
    256c:	0e 94 b4 06 	call	0xd68	; 0xd68 <lcd_space>

00002570 <.LVL180>:
      i2lcd(adcmv[2]);		// lcd_string(itoa(adcmv[2], outval, 10));	//output voltage 3
    2570:	8d 81       	ldd	r24, Y+5	; 0x05
    2572:	9e 81       	ldd	r25, Y+6	; 0x06
    2574:	0e 94 9e 06 	call	0xd3c	; 0xd3c <i2lcd>

00002578 <.LVL181>:
    2578:	cc cd       	rjmp	.-1128   	; 0x2112 <.L32>

0000257a <.L37>:
   if (tt == 5) { // can we switch the ADC pins to GND across R_H resistor?
    257a:	05 30       	cpi	r16, 0x05	; 5
    257c:	b1 f4       	brne	.+44     	; 0x25aa <.L40>

0000257e <.Loc.505>:
      R_PORT = 0;
    257e:	15 b8       	out	0x05, r1	; 5

00002580 <.Loc.507>:
      R_DDR = 1<<PIN_RH1;		//Pin 1 over R_H to GND
    2580:	d4 b8       	out	0x04, r13	; 4

00002582 <.Loc.509>:
      adcmv[0] = W20msReadADC(TP1);
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <W20msReadADC>

00002588 <.LVL183>:
    2588:	9a 83       	std	Y+2, r25	; 0x02
    258a:	89 83       	std	Y+1, r24	; 0x01

0000258c <.Loc.512>:
      R_DDR = 1<<PIN_RH2;		//Pin 2 over R_H to GND
    258c:	c4 b8       	out	0x04, r12	; 4

0000258e <.Loc.514>:
      adcmv[1] = W20msReadADC(TP2);
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <W20msReadADC>

00002594 <.LVL184>:
    2594:	9c 83       	std	Y+4, r25	; 0x04
    2596:	8b 83       	std	Y+3, r24	; 0x03

00002598 <.Loc.517>:
      R_DDR = 1<<PIN_RH3;		//Pin 3 over R_H to GND
    2598:	a4 b8       	out	0x04, r10	; 4

0000259a <.Loc.519>:
      adcmv[2] = W20msReadADC(TP3);
    259a:	82 e0       	ldi	r24, 0x02	; 2
    259c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <W20msReadADC>

000025a0 <.LVL185>:
    25a0:	9e 83       	std	Y+6, r25	; 0x06
    25a2:	8d 83       	std	Y+5, r24	; 0x05

000025a4 <.Loc.522>:
      lcd_MEM_string(RH1L_str);	// "RH_Lo="
    25a4:	8b ed       	ldi	r24, 0xDB	; 219
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	a1 cf       	rjmp	.-190    	; 0x24ec <.L105>

000025aa <.L40>:
   if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
    25aa:	06 30       	cpi	r16, 0x06	; 6
    25ac:	51 f5       	brne	.+84     	; 0x2602 <.L34>

000025ae <.Loc.525>:
      R_DDR = 1<<PIN_RH1;		//Pin 1 over R_H to VCC
    25ae:	d4 b8       	out	0x04, r13	; 4

000025b0 <.Loc.527>:
      R_PORT = 1<<PIN_RH1;
    25b0:	d5 b8       	out	0x05, r13	; 5

000025b2 <.Loc.529>:
      adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <W20msReadADC>

000025b8 <.LVL187>:
    25b8:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <ADCconfig+0x4>
    25bc:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <ADCconfig+0x5>
    25c0:	82 1b       	sub	r24, r18
    25c2:	93 0b       	sbc	r25, r19

000025c4 <.Loc.532>:
    25c4:	9a 83       	std	Y+2, r25	; 0x02
    25c6:	89 83       	std	Y+1, r24	; 0x01

000025c8 <.Loc.533>:
      R_DDR = 1<<PIN_RH2;		//Pin 2 over R_H to VCC
    25c8:	c4 b8       	out	0x04, r12	; 4

000025ca <.Loc.535>:
      R_PORT = 1<<PIN_RH2;
    25ca:	c5 b8       	out	0x05, r12	; 5

000025cc <.Loc.537>:
      adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <W20msReadADC>

000025d2 <.LVL188>:
    25d2:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <ADCconfig+0x4>
    25d6:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <ADCconfig+0x5>
    25da:	82 1b       	sub	r24, r18
    25dc:	93 0b       	sbc	r25, r19

000025de <.Loc.540>:
    25de:	9c 83       	std	Y+4, r25	; 0x04
    25e0:	8b 83       	std	Y+3, r24	; 0x03

000025e2 <.Loc.541>:
      R_DDR = 1<<PIN_RH3;		//Pin 3 over R_H to VCC
    25e2:	a4 b8       	out	0x04, r10	; 4

000025e4 <.Loc.543>:
      R_PORT = 1<<PIN_RH3;
    25e4:	a5 b8       	out	0x05, r10	; 5

000025e6 <.Loc.545>:
      adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
    25e6:	82 e0       	ldi	r24, 0x02	; 2
    25e8:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <W20msReadADC>

000025ec <.LVL189>:
    25ec:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <ADCconfig+0x4>
    25f0:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <ADCconfig+0x5>
    25f4:	82 1b       	sub	r24, r18
    25f6:	93 0b       	sbc	r25, r19

000025f8 <.Loc.548>:
    25f8:	9e 83       	std	Y+6, r25	; 0x06
    25fa:	8d 83       	std	Y+5, r24	; 0x05

000025fc <.Loc.549>:
      lcd_MEM_string(RH1H_str);	// "RH_Hi="
    25fc:	87 ed       	ldi	r24, 0xD7	; 215
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	75 cf       	rjmp	.-278    	; 0x24ec <.L105>

00002602 <.L34>:
   if (tt == 7) { // is the voltage of all R_H / R_L dividers correct?
    2602:	07 30       	cpi	r16, 0x07	; 7
    2604:	09 f0       	breq	.+2      	; 0x2608 <.Loc.552>

00002606 <L0^A>:
    2606:	a7 cf       	rjmp	.-178    	; 0x2556 <.L42>

00002608 <.Loc.552>:
      u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + (unsigned long)R_H_VAL*100));
    2608:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <ADCconfig+0x4>
    260c:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <ADCconfig+0x5>
    2610:	a8 e5       	ldi	r26, 0x58	; 88
    2612:	bb e1       	ldi	r27, 0x1B	; 27
    2614:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

00002618 <.Loc.554>:
    2618:	28 eb       	ldi	r18, 0xB8	; 184
    261a:	32 ed       	ldi	r19, 0xD2	; 210
    261c:	47 e4       	ldi	r20, 0x47	; 71
    261e:	50 e0       	ldi	r21, 0x00	; 0
    2620:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>
    2624:	29 01       	movw	r4, r18
    2626:	3a 01       	movw	r6, r20

00002628 <.LVL190>:
      R_PORT = 1<<PIN_RH1;		//RH1 to VCC
    2628:	d5 b8       	out	0x05, r13	; 5

0000262a <.Loc.557>:
      R_DDR = (1<<PIN_RH1) | (1<<PIN_RL1);	//RH1 to +, RL1 to -
    262a:	e3 e0       	ldi	r30, 0x03	; 3
    262c:	e4 b9       	out	0x04, r30	; 4

0000262e <.Loc.559>:
      adcmv[0] = W20msReadADC(TP1);
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <W20msReadADC>

00002634 <.LVL191>:
    2634:	9c 01       	movw	r18, r24

00002636 <.Loc.561>:
      adcmv[0] -= u680;
    2636:	24 19       	sub	r18, r4
    2638:	35 09       	sbc	r19, r5
    263a:	3a 83       	std	Y+2, r19	; 0x02
    263c:	29 83       	std	Y+1, r18	; 0x01

0000263e <.Loc.563>:
      R_PORT = 1<<PIN_RH2;		//RH2 to VCC
    263e:	c5 b8       	out	0x05, r12	; 5

00002640 <.Loc.565>:
      R_DDR = (1<<PIN_RH2) | (1<<PIN_RL2);	//RH2 to +, RL2 to -
    2640:	fc e0       	ldi	r31, 0x0C	; 12
    2642:	f4 b9       	out	0x04, r31	; 4

00002644 <.Loc.567>:
      adcmv[1] = W20msReadADC(TP2);
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <W20msReadADC>

0000264a <.LVL192>:
    264a:	9c 01       	movw	r18, r24

0000264c <.Loc.569>:
      adcmv[1] -= u680;
    264c:	24 19       	sub	r18, r4
    264e:	35 09       	sbc	r19, r5
    2650:	3c 83       	std	Y+4, r19	; 0x04
    2652:	2b 83       	std	Y+3, r18	; 0x03

00002654 <.Loc.571>:
      R_PORT = 1<<PIN_RH3;		//RH3 to VCC
    2654:	a5 b8       	out	0x05, r10	; 5

00002656 <.Loc.573>:
      R_DDR = (1<<PIN_RH3) | (1<<PIN_RL3);	//RH3 to +, RL3 to -
    2656:	20 e3       	ldi	r18, 0x30	; 48
    2658:	24 b9       	out	0x04, r18	; 4

0000265a <.Loc.575>:
      adcmv[2] = W20msReadADC(TP3);
    265a:	82 e0       	ldi	r24, 0x02	; 2
    265c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <W20msReadADC>

00002660 <.LVL193>:
    2660:	9c 01       	movw	r18, r24

00002662 <.Loc.577>:
      adcmv[2] -= u680;
    2662:	24 19       	sub	r18, r4
    2664:	35 09       	sbc	r19, r5
    2666:	3e 83       	std	Y+6, r19	; 0x06
    2668:	2d 83       	std	Y+5, r18	; 0x05

0000266a <.Loc.579>:
      lcd_MEM_string(RHRL_str);	// "RH/RL"
    266a:	85 eb       	ldi	r24, 0xB5	; 181
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	3e cf       	rjmp	.-388    	; 0x24ec <.L105>

00002670 <.L47>:
  lcd_clear_line2();		// clear total line2
    2670:	4a d8       	rcall	.-3948   	; 0x1706 <lcd_clear_line2>

00002672 <.LVL195>:
  lcd_MEM_string(RELPROBE);	// "Release Probes"
    2672:	83 e4       	ldi	r24, 0x43	; 67
    2674:	92 e0       	ldi	r25, 0x02	; 2
    2676:	6b d9       	rcall	.-3370   	; 0x194e <lcd_fix_string>

00002678 <.LVL196>:
  wait_about500ms();
    2678:	84 e6       	ldi	r24, 0x64	; 100
    267a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <sleep_5ms>

0000267e <.LVL197>:
for (ww=0;ww<120;ww++) {
    267e:	0a 95       	dec	r16

00002680 <.LVL198>:
    2680:	09 f0       	breq	.+2      	; 0x2684 <L0^A+0x2>

00002682 <L0^A>:
    2682:	62 cd       	rjmp	.-1340   	; 0x2148 <.L50>
    2684:	64 cd       	rjmp	.-1336   	; 0x214e <.L51>

00002686 <.L103>:
if (((test_mode & 0x0f) == 1) || (UnCalibrated == 2))
    2686:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <UnCalibrated>
    268a:	82 30       	cpi	r24, 0x02	; 2
    268c:	09 f4       	brne	.+2      	; 0x2690 <.Loc.588>

0000268e <L0^A>:
    268e:	d7 cd       	rjmp	.-1106   	; 0x223e <.L48>

00002690 <.Loc.588>:
  adcmv[3] = adcmv[0];			// mark as calibrated, short calibration is finished
    2690:	f8 86       	std	Y+8, r15	; 0x08
    2692:	ef 82       	std	Y+7, r14	; 0x07

00002694 <.Loc.590>:
  UnCalibrated = 0;			// clear the UnCalibrated Flag
    2694:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <UnCalibrated>
    2698:	d7 cd       	rjmp	.-1106   	; 0x2248 <.L53>

0000269a <.L60>:
   cap.cval /= 10;
    269a:	ca 01       	movw	r24, r20
    269c:	b9 01       	movw	r22, r18
    269e:	a5 01       	movw	r20, r10
    26a0:	94 01       	movw	r18, r8
    26a2:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>
    26a6:	d3 94       	inc	r13
    26a8:	2b ce       	rjmp	.-938    	; 0x2300 <.L59>

000026aa <.L75>:
   cap_found = 0;		// wait for stable connection
    26aa:	10 e0       	ldi	r17, 0x00	; 0

000026ac <.L64>:
  lcd_line2();
    26ac:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_line2>

000026b0 <.LVL202>:
  DisplayValue(cap.cval,cap.cpre,'F',4);
    26b0:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <cap>
    26b4:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <cap+0x1>
    26b8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <cap+0x2>
    26bc:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <cap+0x3>
    26c0:	04 e0       	ldi	r16, 0x04	; 4
    26c2:	26 e4       	ldi	r18, 0x46	; 70
    26c4:	40 91 4e 01 	lds	r20, 0x014E	; 0x80014e <cap+0x12>
    26c8:	87 d9       	rcall	.-3314   	; 0x19d8 <DisplayValue>

000026ca <.LVL203>:
  lcd_clear_line();
    26ca:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

000026ce <.LVL204>:
  wait_about200ms();			// wait additional time
    26ce:	88 e2       	ldi	r24, 0x28	; 40
    26d0:	0e 94 c5 07 	call	0xf8a	; 0xf8a <sleep_5ms>

000026d4 <.LVL205>:
for (ww=0;ww<64;ww++) {
    26d4:	fa 94       	dec	r15

000026d6 <.LVL206>:
    26d6:	09 f0       	breq	.+2      	; 0x26da <.Loc.604>

000026d8 <L0^A>:
    26d8:	01 ce       	rjmp	.-1022   	; 0x22dc <.L66>

000026da <.Loc.604>:
    26da:	be ce       	rjmp	.-644    	; 0x2458 <.L58>

000026dc <.L38>:
      if (AllProbesShorted() != 0) ww = MAX_REP-2;
    26dc:	82 e0       	ldi	r24, 0x02	; 2
    26de:	b8 2e       	mov	r11, r24

000026e0 <.LVL208>:
   if (tt == 7) { // is the voltage of all R_H / R_L dividers correct?
    26e0:	3a cf       	rjmp	.-396    	; 0x2556 <.L42>

000026e2 <mark_as_uncalibrated>:
void mark_as_uncalibrated( void) {
 uint8_t ii;
 if (!UnCalibrated) {
    26e2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <UnCalibrated>
    26e6:	81 11       	cpse	r24, r1
    26e8:	0d c0       	rjmp	.+26     	; 0x2704 <.L106>

000026ea <.Loc.612>:
    // equipment has changed, zero capacity value is too high or zero resistance is too high
    // but the device is marked as Calibrated.
    ii = eeprom_read_byte((uint8_t *)&c_zero_tab[0]);	// read first zero offset
    26ea:	87 e3       	ldi	r24, 0x37	; 55
    26ec:	93 e0       	ldi	r25, 0x03	; 3
    26ee:	0e 94 15 39 	call	0x722a	; 0x722a <eeprom_read_byte>

000026f2 <.LVL209>:
    ii++;
    26f2:	61 e0       	ldi	r22, 0x01	; 1
    26f4:	68 0f       	add	r22, r24

000026f6 <.LVL210>:
    // make the unused c_zero_tab[3] different to c_zero_tab[0] to mark uncalibrated 
    eeprom_write_byte((uint8_t *)&c_zero_tab[3], ii);	// mark uncalibrated permanent
    26f6:	8a e3       	ldi	r24, 0x3A	; 58
    26f8:	93 e0       	ldi	r25, 0x03	; 3
    26fa:	0e 94 22 39 	call	0x7244	; 0x7244 <eeprom_write_byte>

000026fe <.LVL211>:
    UnCalibrated = 1;		// set back to uncalibrated
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <UnCalibrated>

00002704 <.L106>:
 }
}
    2704:	08 95       	ret

00002706 <GetIr>:
/* Get residual current in reverse direction of a diode */ 



//=================================================================
void GetIr(uint8_t hipin, uint8_t lopin) {
    2706:	ef 92       	push	r14

00002708 <.LCFI5>:
    2708:	ff 92       	push	r15

0000270a <.LCFI6>:
    270a:	0f 93       	push	r16

0000270c <.LCFI7>:
    270c:	1f 93       	push	r17

0000270e <.LCFI8>:
    270e:	cf 93       	push	r28

00002710 <.LCFI9>:
    2710:	df 93       	push	r29

00002712 <.LCFI10>:
    2712:	d6 2f       	mov	r29, r22

00002714 <.LBB16>:
  ADC_PORT = HiADC;		 	// switch ADC port to high level
  ADC_DDR = HiADC | TXD_MSK;		// switch High Pin direct to VCC
  R_PORT = 0;				// switch R-Port to GND
  LoPinR_L = pgm_read_byte(&PinRHRLADCtab[lopin-TP_MIN]);  //R_L mask for LowPin R_L load
#else
  HiADC = pgm_read_byte(&PinRLRHADCtab[hipin-TP_MIN]+3);	// Table of ADC pins including | TXD_VAL
    2714:	e8 2f       	mov	r30, r24
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	e2 5b       	subi	r30, 0xB2	; 178
    271a:	fd 4f       	sbci	r31, 0xFD	; 253
    271c:	e4 91       	lpm	r30, Z

0000271e <.LBE16>:
  ADC_PORT = HiADC;		 	// switch ADC port to high level
    271e:	e8 b9       	out	0x08, r30	; 8

00002720 <.Loc.636>:
  ADC_DDR = HiADC | TXD_MSK;		// switch High Pin direct to VCC
    2720:	e7 b9       	out	0x07, r30	; 7

00002722 <.Loc.638>:
  R_PORT = 0;				// switch R-Port to GND
    2722:	15 b8       	out	0x05, r1	; 5

00002724 <.LBB17>:
  LoPinR_L = pgm_read_byte(&PinRLRHADCtab[lopin-TP_MIN]);  //R_L mask for LowPin R_L load
    2724:	e6 2f       	mov	r30, r22

00002726 <.LVL217>:
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	e5 5b       	subi	r30, 0xB5	; 181
    272a:	fd 4f       	sbci	r31, 0xFD	; 253
    272c:	e4 91       	lpm	r30, Z

0000272e <.LBE17>:
  // R_H Pin must always be one pin number higher
#endif
  R_DDR = LoPinR_L;		// switch R_L port for LowPin to output (GND)
    272e:	e4 b9       	out	0x04, r30	; 4

00002730 <.LVL219>:
     u_res_old = u_res;
     u_res = W20msReadADC(lopin);		// read voltage
#if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
     R_DDR = pgm_read_byte(&PinRHRLADCtab[lopin-TP_MIN+3]);  //R_H mask for LowPin R_H load
#else
     R_DDR = LoPinR_L + LoPinR_L;		// switch R_H port for LowPin to output (GND)
    2730:	ce 2f       	mov	r28, r30
    2732:	cc 0f       	add	r28, r28

00002734 <.Loc.651>:
  u_res = U_VCC;
    2734:	08 e8       	ldi	r16, 0x88	; 136
    2736:	13 e1       	ldi	r17, 0x13	; 19

00002738 <.L109>:
     u_res = W20msReadADC(lopin);		// read voltage
    2738:	78 01       	movw	r14, r16

0000273a <.Loc.655>:
    273a:	8d 2f       	mov	r24, r29
    273c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <W20msReadADC>

00002740 <.LVL221>:
    2740:	8c 01       	movw	r16, r24

00002742 <.LVL222>:
     R_DDR = LoPinR_L + LoPinR_L;		// switch R_H port for LowPin to output (GND)
    2742:	c4 b9       	out	0x04, r28	; 4

00002744 <.Loc.658>:
#endif
  } while (u_res < u_res_old);
    2744:	8e 15       	cp	r24, r14
    2746:	9f 05       	cpc	r25, r15
    2748:	b8 f3       	brcs	.-18     	; 0x2738 <.L109>

0000274a <.Loc.659>:
  if (u_res == 0) return;		// no Output, if no current in reverse direction
    274a:	89 2b       	or	r24, r25
    274c:	d9 f0       	breq	.+54     	; 0x2784 <.L108>

0000274e <.Loc.661>:
#if (LCD_LINES > 3)
 #define IR_DIGITS 3
  lcd_line4();				// use Line 4 for Ir output
    274e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <lcd_line4>

00002752 <.LVL223>:
  lcd_MEM_string(Ir_str);		// output text "Ir="
    2752:	8b e2       	ldi	r24, 0x2B	; 43
    2754:	91 e0       	ldi	r25, 0x01	; 1
    2756:	fb d8       	rcall	.-3594   	; 0x194e <lcd_fix_string>

00002758 <.LVL224>:
#ifdef WITH_IRMICRO
  unsigned int ir_micro;
  if (u_res < 2500) {
#endif
     /* R_H_VAL has units of 10 Ohm, u_res has units of mV, ir_nano has units of nA */
     ir_nano = (unsigned long)(u_res * 100000UL) / R_H_VAL;
    2758:	d8 01       	movw	r26, r16
    275a:	20 ea       	ldi	r18, 0xA0	; 160
    275c:	36 e8       	ldi	r19, 0x86	; 134
    275e:	41 e0       	ldi	r20, 0x01	; 1
    2760:	50 e0       	ldi	r21, 0x00	; 0
    2762:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <__muluhisi3>

00002766 <.Loc.666>:
    2766:	28 e9       	ldi	r18, 0x98	; 152
    2768:	37 eb       	ldi	r19, 0xB7	; 183
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	50 e0       	ldi	r21, 0x00	; 0
    276e:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>
    2772:	da 01       	movw	r26, r20
    2774:	c9 01       	movw	r24, r18

00002776 <.Loc.667>:
     DisplayValue16(ir_nano,-9,'A',2);	// output two digits of current with nA units
    2776:	22 e0       	ldi	r18, 0x02	; 2
    2778:	41 e4       	ldi	r20, 0x41	; 65
    277a:	67 ef       	ldi	r22, 0xF7	; 247
    277c:	32 da       	rcall	.-2972   	; 0x1be2 <DisplayValue16>

0000277e <.LVL225>:
     /* RR680MI has units of 0.1 Ohm, u_res has units of mV, ir_micro has units of uA */
     ir_micro = (unsigned long)(u_res * 10000UL) / RR680MI;
     DisplayValue16(ir_micro,-6,'A',IR_DIGITS);	// output 2 or 3 digits of current in uA units
  }
#endif
  ADC_DDR = TXD_MSK;			// switch off
    277e:	17 b8       	out	0x07, r1	; 7

00002780 <.Loc.670>:
  ADC_PORT = TXD_VAL;			// switch off
    2780:	18 b8       	out	0x08, r1	; 8

00002782 <.Loc.672>:
  R_DDR = 0;				// switch off current
    2782:	14 b8       	out	0x04, r1	; 4

00002784 <.L108>:

  return ;
}
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
    2788:	e6 e0       	ldi	r30, 0x06	; 6
    278a:	0c 94 b2 38 	jmp	0x7164	; 0x7164 <.Loc.12>

0000278e <main>:
	  ON_DDR = (1<<ON_PIN);			// switch to output
    278e:	80 e4       	ldi	r24, 0x40	; 64
    2790:	8a b9       	out	0x0a, r24	; 10

00002792 <.Loc.687>:
	  ON_PORT = (1<<ON_PIN); 		// switch power on 
    2792:	8b b9       	out	0x0b, r24	; 11

00002794 <.Loc.689>:
	  RST_PORT |= (1<<RST_PIN); 	// enable internal Pullup for Start-Pin
    2794:	5f 9a       	sbi	0x0b, 7	; 11

00002796 <.Loc.691>:
	  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    2796:	d6 e8       	ldi	r29, 0x86	; 134
    2798:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

0000279c <.Loc.694>:
	  UCSR0B = 0;		// disable UART, if started with bootloader
    279c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>

000027a0 <.Loc.696>:
          wait500ms();
    27a0:	0e 94 a4 07 	call	0xf48	; 0xf48 <wait500ms>

000027a4 <.LVL227>:
	  tmp = (WDRF_HOME & ((1<<WDRF)));	// save Watch Dog Flag
    27a4:	c4 b7       	in	r28, 0x34	; 52

000027a6 <.Loc.699>:
    27a6:	c8 70       	andi	r28, 0x08	; 8

000027a8 <.LVL228>:
	  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    27a8:	84 b7       	in	r24, 0x34	; 52
    27aa:	87 7f       	andi	r24, 0xF7	; 247
    27ac:	84 bf       	out	0x34, r24	; 52

000027ae <.LBB18>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    27ae:	0f b6       	in	r0, 0x3f	; 63
    27b0:	f8 94       	cli
    27b2:	a8 95       	wdr
    27b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    27b8:	88 61       	ori	r24, 0x18	; 24
    27ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    27be:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    27c2:	0f be       	out	0x3f, r0	; 63

000027c4 <.LBE18>:
	  PRR = (1<<PRTWI) | (1<<PRSPI) | (1<<PRUSART0);
    27c4:	d0 93 64 00 	sts	0x0064, r29	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>

000027c8 <.Loc.709>:
	  DIDR0 = ((1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D) | (1<<ADC2D) | (1<<ADC1D) | (1<<ADC0D)) & ~((1<<TP3) | (1<<TP2) | (1<<TP1));
    27c8:	88 e3       	ldi	r24, 0x38	; 56
    27ca:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>

000027ce <.Loc.711>:
	  TCCR2A = (0<<WGM21) | (0<<WGM20);		// Counter 2 normal mode
    27ce:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>

000027d2 <.Loc.713>:
	  TCCR2B = CNTR2_PRESCALER;	//prescaler set in autoconf
    27d2:	87 e0       	ldi	r24, 0x07	; 7
    27d4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>

000027d8 <.Loc.715>:
	  sei();				// enable interrupts
    27d8:	78 94       	sei

000027da <.Loc.716>:
	  lcd_init();				//initialize LCD
    27da:	0e 94 2b 0b 	call	0x1656	; 0x1656 <lcd_init>

000027de <.LVL229>:
	  if(tmp) { 
    27de:	c1 11       	cpse	r28, r1
    27e0:	72 c5       	rjmp	.+2788   	; 0x32c6 <.L285>

000027e2 <.Loc.719>:
	  rotary.ind = ROT_MSK+1;		//initilize state history with next call of check_rotary()
    27e2:	84 e0       	ldi	r24, 0x04	; 4
    27e4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <rotary+0x4>

000027e8 <.L118>:
		if (RST_PIN_REG & (1 << RST_PIN))
    27e8:	4f 99       	sbic	0x09, 7	; 9
    27ea:	08 c0       	rjmp	.+16     	; 0x27fc <.L117>

000027ec <.Loc.725>:
	     wait_about10ms();
    27ec:	0e 94 c4 07 	call	0xf88	; 0xf88 <sleep_10ms>

000027f0 <.LVL231>:
	  for (ii=0; ii<60; ii++) {
    27f0:	cf 5f       	subi	r28, 0xFF	; 255

000027f2 <.Loc.727>:
    27f2:	cc 33       	cpi	r28, 0x3C	; 60
    27f4:	c9 f7       	brne	.-14     	; 0x27e8 <.L118>

000027f6 <.L119>:
	     display_time = LONG_WAIT_TIME;	// ... set long time display anyway
    27f6:	80 e6       	ldi	r24, 0x60	; 96
    27f8:	9d e6       	ldi	r25, 0x6D	; 109
    27fa:	04 c0       	rjmp	.+8      	; 0x2804 <.L120>

000027fc <.L117>:
	  if (ii > 30) {
    27fc:	8f e5       	ldi	r24, 0x5F	; 95
    27fe:	9d e6       	ldi	r25, 0x6D	; 109

00002800 <.Loc.731>:
    2800:	cf 31       	cpi	r28, 0x1F	; 31
    2802:	c8 f7       	brcc	.-14     	; 0x27f6 <.L119>

00002804 <.L120>:
	  display_time = OFF_WAIT_TIME;		// LONG_WAIT_TIME for single mode, else SHORT_WAIT_TIME
    2804:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <display_time+0x1>
    2808:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <display_time>

0000280c <.Loc.733>:
	  ADCconfig.RefFlag = 0;
    280c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <ADCconfig+0x1>

00002810 <.Loc.735>:
	  Calibrate_UR();		// get Ref Voltages and Pin resistance
    2810:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <Calibrate_UR>

00002814 <.LBB20>:
		__asm__ __volatile__ (
    2814:	88 e1       	ldi	r24, 0x18	; 24
    2816:	9f e0       	ldi	r25, 0x0F	; 15
    2818:	0f b6       	in	r0, 0x3f	; 63
    281a:	f8 94       	cli
    281c:	a8 95       	wdr
    281e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>

00002828 <.LBE20>:
	  if (ii >= 60) {
    2828:	cc 33       	cpi	r28, 0x3C	; 60
    282a:	09 f4       	brne	.+2      	; 0x282e <.L123>

0000282c <L0^A>:
    282c:	61 c0       	rjmp	.+194    	; 0x28f0 <.L121>

0000282e <.L123>:
 #endif
    jj = 0;
    zeich = ' ';		// initial value for while loop
    line_nr = LCD_LINES;		// begin with the first LCD line, but don't wait
    while (zeich != (char)0) {	// zero is end of text
       space_pos = LCD_LINE_LENGTH;		// if no space is found
    282e:	32 e1       	ldi	r19, 0x12	; 18
    2830:	93 2e       	mov	r9, r19

00002832 <.LBE22>:
  ADC_DDR = (1<<TPRELAY) | TXD_MSK; 	// switch pin with reference to GND, release relay
    2832:	d0 e1       	ldi	r29, 0x10	; 16

00002834 <.Loc.745>:
	  _trans = &ntrans;			// default transistor structure to show
    2834:	44 e6       	ldi	r20, 0x64	; 100
    2836:	c4 2e       	mov	r12, r20
    2838:	41 e0       	ldi	r20, 0x01	; 1
    283a:	d4 2e       	mov	r13, r20

0000283c <.LBB26>:
       _trans = &ptrans;
    283c:	54 e7       	ldi	r21, 0x74	; 116
    283e:	e5 2e       	mov	r14, r21
    2840:	51 e0       	ldi	r21, 0x01	; 1
    2842:	f5 2e       	mov	r15, r21

00002844 <.LBE26>:
        diode_sequence = 0x33;	// 3 3
    2844:	63 e3       	ldi	r22, 0x33	; 51
    2846:	86 2e       	mov	r8, r22

00002848 <.Loc.748>:
           diode_sequence = 0x21;	// 2 1
    2848:	71 e2       	ldi	r23, 0x21	; 33
    284a:	77 2e       	mov	r7, r23

0000284c <.Loc.749>:
           diode_sequence = 0x20;	// 2 0
    284c:	e0 e2       	ldi	r30, 0x20	; 32
    284e:	6e 2e       	mov	r6, r30

00002850 <.L122>:
	  lcd_command(CMD_DISPLAY_ON);
    2850:	8f ea       	ldi	r24, 0xAF	; 175
    2852:	0e 94 0b 0b 	call	0x1616	; 0x1616 <lcd_command>

00002856 <.LVL236>:
	  lcd_command(CMD_SET_ALLPTS_NORMAL);		// 0xa4
    2856:	84 ea       	ldi	r24, 0xA4	; 164
    2858:	0e 94 0b 0b 	call	0x1616	; 0x1616 <lcd_command>

0000285c <.LVL237>:
	  lcd_clear();			// clear the LCD
    285c:	0e 94 14 0b 	call	0x1628	; 0x1628 <lcd_clear>

00002860 <.LVL238>:
	  ADC_DDR = TXD_MSK;		// activate Software-UART 
    2860:	17 b8       	out	0x07, r1	; 7

00002862 <.Loc.755>:
          init_parts();			// reset parts info to nothing found
    2862:	0d db       	rcall	.-2534   	; 0x1e7e <init_parts>

00002864 <.LVL239>:
	  Calibrate_UR();		// get Ref Voltages and Pin resistance
    2864:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <Calibrate_UR>

00002868 <.LVL240>:
	  lcd_line1();			// Cursor to 1. row, column 1
    2868:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <lcd_line1>

0000286c <.LVL241>:
        Battery_check();
    286c:	3a d5       	rcall	.+2676   	; 0x32e2 <Battery_check>

0000286e <.LVL242>:
	  if (WithReference) {
    286e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <WithReference>
    2872:	81 15       	cp	r24, r1
    2874:	71 f0       	breq	.+28     	; 0x2892 <.L124>

00002876 <.Loc.761>:
		 lcd_line2();
    2876:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_line2>

0000287a <.LVL243>:
		 lcd_MEM_string(VCC_str);		// VCC=
    287a:	80 e4       	ldi	r24, 0x40	; 64
    287c:	91 e0       	ldi	r25, 0x01	; 1
    287e:	67 d8       	rcall	.-3890   	; 0x194e <lcd_fix_string>

00002880 <.LVL244>:
		 Display_mV(ADCconfig.U_AVCC,3);	// Display 3 Digits of this mV units
    2880:	63 e0       	ldi	r22, 0x03	; 3
    2882:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ADCconfig+0x4>
    2886:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <ADCconfig+0x5>
    288a:	b6 d9       	rcall	.-3220   	; 0x1bf8 <Display_mV>

0000288c <.LVL245>:
		 wait_about1s();		// time to read the VCC= message
    288c:	88 ec       	ldi	r24, 0xC8	; 200
    288e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <sleep_5ms>

00002892 <.L124>:
	  lcd_line2();			//LCD position row 2, column 1
    2892:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_line2>

00002896 <.LVL247>:
	  EntladePins();		// discharge all capacitors!
    2896:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <EntladePins>

0000289a <.LVL248>:
	  if(PartFound == PART_CELL) {
    289a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <PartFound>
    289e:	89 30       	cpi	r24, 0x09	; 9
    28a0:	61 f5       	brne	.+88     	; 0x28fa <.L125>

000028a2 <.Loc.770>:
	    lcd_clear();
    28a2:	0e 94 14 0b 	call	0x1628	; 0x1628 <lcd_clear>

000028a6 <.LVL249>:
	    lcd_MEM_string(Cell_str);	// display "Cell!"
    28a6:	85 e4       	ldi	r24, 0x45	; 69
    28a8:	91 e0       	ldi	r25, 0x01	; 1
    28aa:	51 d8       	rcall	.-3934   	; 0x194e <lcd_fix_string>

000028ac <.LVL250>:
	    lcd_line2();		// use LCD line 2
    28ac:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_line2>

000028b0 <.LVL251>:
	    Display_mV(cell_mv[0],3);
    28b0:	63 e0       	ldi	r22, 0x03	; 3
    28b2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <cell_mv>
    28b6:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <cell_mv+0x1>
    28ba:	9e d9       	rcall	.-3268   	; 0x1bf8 <Display_mV>

000028bc <.LVL252>:
	    lcd_space();
    28bc:	0e 94 b4 06 	call	0xd68	; 0xd68 <lcd_space>

000028c0 <.LVL253>:
	    Display_mV(cell_mv[1],3);
    28c0:	63 e0       	ldi	r22, 0x03	; 3
    28c2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <cell_mv+0x2>
    28c6:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <cell_mv+0x3>
    28ca:	96 d9       	rcall	.-3284   	; 0x1bf8 <Display_mV>

000028cc <.LVL254>:
	    lcd_space();
    28cc:	0e 94 b4 06 	call	0xd68	; 0xd68 <lcd_space>

000028d0 <.LVL255>:
	    Display_mV(cell_mv[2],3);
    28d0:	63 e0       	ldi	r22, 0x03	; 3
    28d2:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <cell_mv+0x4>
    28d6:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <cell_mv+0x5>
    28da:	8e d9       	rcall	.-3300   	; 0x1bf8 <Display_mV>

000028dc <.LVL256>:
	    wait_about2s();
    28dc:	8a ec       	ldi	r24, 0xCA	; 202
    28de:	0e 94 c5 07 	call	0xf8a	; 0xf8a <sleep_5ms>

000028e2 <.LVL257>:
	    AutoCheck(0x11);		// full Selftest with "Short probes" message
    28e2:	81 e1       	ldi	r24, 0x11	; 17
    28e4:	42 db       	rcall	.-2428   	; 0x1f6a <AutoCheck>

000028e6 <.L126>:
  max_time = display_time;	// full specified wait time
    28e6:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <display_time>
    28ea:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <display_time+0x1>

000028ee <.LVL259>:
    28ee:	6b c1       	rjmp	.+726    	; 0x2bc6 <.L209>

000028f0 <.L121>:
		while(function_menu());		// selection of function
    28f0:	0e 94 50 30 	call	0x60a0	; 0x60a0 <function_menu>

000028f4 <.LVL261>:
    28f4:	81 11       	cpse	r24, r1
    28f6:	fc cf       	rjmp	.-8      	; 0x28f0 <.L121>
    28f8:	9a cf       	rjmp	.-204    	; 0x282e <.L123>

000028fa <.L125>:
	  UnCalibrated = (eeprom_read_byte(&c_zero_tab[3]) - eeprom_read_byte(&c_zero_tab[0]));
    28fa:	8a e3       	ldi	r24, 0x3A	; 58
    28fc:	93 e0       	ldi	r25, 0x03	; 3
    28fe:	0e 94 15 39 	call	0x722a	; 0x722a <eeprom_read_byte>

00002902 <.LVL263>:
    2902:	c8 2f       	mov	r28, r24

00002904 <.Loc.790>:
    2904:	87 e3       	ldi	r24, 0x37	; 55
    2906:	93 e0       	ldi	r25, 0x03	; 3
    2908:	0e 94 15 39 	call	0x722a	; 0x722a <eeprom_read_byte>

0000290c <.LVL264>:
    290c:	c8 1b       	sub	r28, r24

0000290e <.Loc.792>:
    290e:	c0 93 14 01 	sts	0x0114, r28	; 0x800114 <UnCalibrated>

00002912 <.Loc.793>:
	  AutoCheck(0x00);			//check, if selftest should be done, only calibration
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	2a db       	rcall	.-2476   	; 0x1f6a <AutoCheck>

00002916 <.LVL265>:
          lcd_clear_line2();			//LCD position row2, column 1
    2916:	0e 94 83 0b 	call	0x1706	; 0x1706 <lcd_clear_line2>

0000291a <.LVL266>:
	  lcd_MEM_string(TestRunning);		//String: testing...
    291a:	82 eb       	ldi	r24, 0xB2	; 178
    291c:	92 e0       	ldi	r25, 0x02	; 2
    291e:	17 d8       	rcall	.-4050   	; 0x194e <lcd_fix_string>

00002920 <.LVL267>:
	  CheckPins(TP1, TP2, TP3);
    2920:	42 e0       	ldi	r20, 0x02	; 2
    2922:	61 e0       	ldi	r22, 0x01	; 1
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	4d d5       	rcall	.+2714   	; 0x33c2 <CheckPins>

00002928 <.LVL268>:
	  CheckPins(TP2, TP1, TP3);
    2928:	42 e0       	ldi	r20, 0x02	; 2
    292a:	60 e0       	ldi	r22, 0x00	; 0
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	49 d5       	rcall	.+2706   	; 0x33c2 <CheckPins>

00002930 <.LVL269>:
	  CheckPins(TP1, TP3, TP2);
    2930:	41 e0       	ldi	r20, 0x01	; 1
    2932:	62 e0       	ldi	r22, 0x02	; 2
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	45 d5       	rcall	.+2698   	; 0x33c2 <CheckPins>

00002938 <.LVL270>:
	  CheckPins(TP3, TP1, TP2);
    2938:	41 e0       	ldi	r20, 0x01	; 1
    293a:	60 e0       	ldi	r22, 0x00	; 0
    293c:	82 e0       	ldi	r24, 0x02	; 2
    293e:	41 d5       	rcall	.+2690   	; 0x33c2 <CheckPins>

00002940 <.LVL271>:
	  CheckPins(TP2, TP3, TP1);
    2940:	40 e0       	ldi	r20, 0x00	; 0
    2942:	62 e0       	ldi	r22, 0x02	; 2
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	3d d5       	rcall	.+2682   	; 0x33c2 <CheckPins>

00002948 <.LVL272>:
	  CheckPins(TP3, TP2, TP1);
    2948:	40 e0       	ldi	r20, 0x00	; 0
    294a:	61 e0       	ldi	r22, 0x01	; 1
    294c:	82 e0       	ldi	r24, 0x02	; 2
    294e:	39 d5       	rcall	.+2674   	; 0x33c2 <CheckPins>

00002950 <.LVL273>:
	  if(PartFound == PART_NONE) {
    2950:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <PartFound>
    2954:	81 11       	cpse	r24, r1
    2956:	0e c0       	rjmp	.+28     	; 0x2974 <.L127>

00002958 <.Loc.807>:
	     EntladePins();		// discharge capacities
    2958:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <EntladePins>

0000295c <.LVL274>:
	     ReadCapacity(TP3, TP1);
    295c:	60 e0       	ldi	r22, 0x00	; 0
    295e:	82 e0       	ldi	r24, 0x02	; 2
    2960:	0e 94 b7 23 	call	0x476e	; 0x476e <ReadCapacity>

00002964 <.LVL275>:
	     ReadCapacity(TP3, TP2);
    2964:	61 e0       	ldi	r22, 0x01	; 1
    2966:	82 e0       	ldi	r24, 0x02	; 2
    2968:	0e 94 b7 23 	call	0x476e	; 0x476e <ReadCapacity>

0000296c <.LVL276>:
	     ReadCapacity(TP2, TP1);
    296c:	60 e0       	ldi	r22, 0x00	; 0
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	0e 94 b7 23 	call	0x476e	; 0x476e <ReadCapacity>

00002974 <.L127>:
	  lcd_clear();				// clear total display
    2974:	0e 94 14 0b 	call	0x1628	; 0x1628 <lcd_clear>

00002978 <.LVL278>:
	  _trans = &ntrans;			// default transistor structure to show
    2978:	d0 92 63 01 	sts	0x0163, r13	; 0x800163 <_trans+0x1>
    297c:	c0 92 62 01 	sts	0x0162, r12	; 0x800162 <_trans>

00002980 <.Loc.814>:
	  if (PartFound == PART_THYRISTOR) {
    2980:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <PartFound>

00002984 <.Loc.816>:
    2984:	86 30       	cpi	r24, 0x06	; 6
    2986:	e9 f4       	brne	.+58     	; 0x29c2 <.L128>

00002988 <.Loc.817>:
            lcd_big_icon(THYRISTOR|LCD_UPPER_LEFT);
    2988:	85 ec       	ldi	r24, 0xC5	; 197
    298a:	0e 94 0f 0c 	call	0x181e	; 0x181e <lcd_big_icon>

0000298e <.LVL279>:
            lcd_draw_trans_pins(-8, 16);
    298e:	60 e1       	ldi	r22, 0x10	; 16
    2990:	88 ef       	ldi	r24, 0xF8	; 248
    2992:	57 d9       	rcall	.-3410   	; 0x1c42 <lcd_draw_trans_pins>

00002994 <.LVL280>:
            lcd_set_cursor(0,TEXT_RIGHT_TO_ICON);		// position behind the icon, Line 1
    2994:	67 e0       	ldi	r22, 0x07	; 7
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <lcd_set_cursor>

0000299c <.LVL281>:
	    lcd_MEM_string(Thyristor);		//"Thyristor"
    299c:	86 e8       	ldi	r24, 0x86	; 134
    299e:	92 e0       	ldi	r25, 0x02	; 2

000029a0 <.L292>:
    lcd_MEM_string(Triac);		//"Triac"
    29a0:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

000029a4 <.L129>:
  lcd_set_cursor(1*PAGES_PER_LINE,TEXT_RIGHT_TO_ICON);		// position behind the icon,line 2
    29a4:	67 e0       	ldi	r22, 0x07	; 7
    29a6:	82 e0       	ldi	r24, 0x02	; 2
    29a8:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <lcd_set_cursor>

000029ac <.LVL283>:
  lcd_MEM_string(Uf_str);		// "Uf="
    29ac:	89 e5       	ldi	r24, 0x59	; 89
    29ae:	91 e0       	ldi	r25, 0x01	; 1
    29b0:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

000029b4 <.LVL284>:
  Display_mV(ntrans.uBE,2);
    29b4:	62 e0       	ldi	r22, 0x02	; 2
    29b6:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <ntrans+0x4>
    29ba:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <ntrans+0x5>
    29be:	1c d9       	rcall	.-3528   	; 0x1bf8 <Display_mV>

000029c0 <.LVL285>:
    29c0:	92 cf       	rjmp	.-220    	; 0x28e6 <.L126>

000029c2 <.L128>:
  if (PartFound == PART_TRIAC) {
    29c2:	87 30       	cpi	r24, 0x07	; 7
    29c4:	69 f4       	brne	.+26     	; 0x29e0 <.L130>

000029c6 <.Loc.828>:
    lcd_big_icon(TRIAC|LCD_UPPER_LEFT);
    29c6:	84 ec       	ldi	r24, 0xC4	; 196
    29c8:	0e 94 0f 0c 	call	0x181e	; 0x181e <lcd_big_icon>

000029cc <.LVL286>:
    lcd_draw_trans_pins(-8, 16);
    29cc:	60 e1       	ldi	r22, 0x10	; 16
    29ce:	88 ef       	ldi	r24, 0xF8	; 248
    29d0:	38 d9       	rcall	.-3472   	; 0x1c42 <lcd_draw_trans_pins>

000029d2 <.LVL287>:
    lcd_set_cursor(0,TEXT_RIGHT_TO_ICON);		// position behind the icon, Line 1
    29d2:	67 e0       	ldi	r22, 0x07	; 7
    29d4:	80 e0       	ldi	r24, 0x00	; 0
    29d6:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <lcd_set_cursor>

000029da <.LVL288>:
    lcd_MEM_string(Triac);		//"Triac"
    29da:	8a e8       	ldi	r24, 0x8A	; 138
    29dc:	92 e0       	ldi	r25, 0x02	; 2
    29de:	e0 cf       	rjmp	.-64     	; 0x29a0 <.L292>

000029e0 <.L130>:
  if (PartFound == PART_CAPACITOR) {
    29e0:	88 30       	cpi	r24, 0x08	; 8
    29e2:	a9 f4       	brne	.+42     	; 0x2a0e <.L131>

000029e4 <.Loc.834>:
     if ((cap.ca + cap.cb) == (TP1 + TP3)) {
    29e4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <cap+0x10>

000029e8 <.Loc.836>:
    29e8:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <cap+0x11>

000029ec <.Loc.837>:
    29ec:	89 0f       	add	r24, r25
    29ee:	99 27       	eor	r25, r25
    29f0:	99 1f       	adc	r25, r25

000029f2 <.Loc.838>:
    29f2:	02 97       	sbiw	r24, 0x02	; 2
    29f4:	41 f4       	brne	.+16     	; 0x2a06 <.L132>

000029f6 <.Loc.839>:
        show_Cap13();		// repeated capacity measurement
    29f6:	0e 94 23 29 	call	0x5246	; 0x5246 <show_Cap13>

000029fa <.L133>:
  if (UnCalibrated) {
    29fa:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <UnCalibrated>
    29fe:	81 11       	cpse	r24, r1
    2a00:	22 c4       	rjmp	.+2116   	; 0x3246 <.L216>

00002a02 <.L231>:
  switch_tester_off();
    2a02:	60 da       	rcall	.-2880   	; 0x1ec4 <switch_tester_off>

00002a04 <.LVL290>:
	goto loop_start;
    2a04:	25 cf       	rjmp	.-438    	; 0x2850 <.L122>

00002a06 <.L132>:
     show_cap(0);		// show capacity in normal way and measure additional parameters
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	0e 94 4f 28 	call	0x509e	; 0x509e <show_cap>

00002a0c <.LVL291>:
     goto tt_end;
    2a0c:	6c cf       	rjmp	.-296    	; 0x28e6 <.L126>

00002a0e <.L131>:
  if(PartFound == PART_DIODE) {
    2a0e:	83 30       	cpi	r24, 0x03	; 3
    2a10:	09 f0       	breq	.+2      	; 0x2a14 <.Loc.850>

00002a12 <L0^A>:
    2a12:	eb c0       	rjmp	.+470    	; 0x2bea <.L134>

00002a14 <.Loc.850>:
     if(NumOfDiodes == 1) {		//single Diode
    2a14:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <NumOfDiodes>

00002a18 <.Loc.852>:
    2a18:	81 30       	cpi	r24, 0x01	; 1
    2a1a:	09 f0       	breq	.+2      	; 0x2a1e <.Loc.853>

00002a1c <L0^A>:
    2a1c:	4d c0       	rjmp	.+154    	; 0x2ab8 <.L135>

00002a1e <.Loc.853>:
        DiodeSymbol_withPins(0);
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	0e 94 73 07 	call	0xee6	; 0xee6 <DiodeSymbol_withPins>

00002a24 <.LVL292>:
	GetIr(diodes.Cathode[0],diodes.Anode[0]);	// measure and output Ir=x.xuA
    2a24:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <diodes>
    2a28:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <diodes+0x6>
    2a2c:	6c de       	rcall	.-808    	; 0x2706 <GetIr>

00002a2e <.LVL293>:
        UfAusgabe(0x70);		// mark for additional resistor and output Uf= in line 2
    2a2e:	80 e7       	ldi	r24, 0x70	; 112

00002a30 <.L286>:
    2a30:	0e 94 4b 07 	call	0xe96	; 0xe96 <UfAusgabe>

00002a34 <.L136>:
        cap.cval=sampling_cap(diodes.Cathode[0],diodes.Anode[0],0);   // at low voltage
    2a34:	40 e0       	ldi	r20, 0x00	; 0
    2a36:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <diodes>
    2a3a:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <diodes+0x6>
    2a3e:	0e 94 cc 33 	call	0x6798	; 0x6798 <sampling_cap>

00002a42 <.LVL295>:
    2a42:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <cap>
    2a46:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <cap+0x1>
    2a4a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <cap+0x2>
    2a4e:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <cap+0x3>

00002a52 <.Loc.859>:
        lcd_next_line_wait(0);		// next line, wait 5s and clear line 2
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <lcd_next_line_wait>

00002a58 <.LVL296>:
        DisplayValue(cap.cval,sampling_cap_pre,'F',2);
    2a58:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <cap>
    2a5c:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <cap+0x1>
    2a60:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <cap+0x2>
    2a64:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <cap+0x3>
    2a68:	02 e0       	ldi	r16, 0x02	; 2
    2a6a:	26 e4       	ldi	r18, 0x46	; 70
    2a6c:	42 ef       	ldi	r20, 0xF2	; 242
    2a6e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DisplayValue>

00002a72 <.L137>:
	if (ResistorsFound == 0)
    2a72:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <ResistorsFound>
    2a76:	81 15       	cp	r24, r1
    2a78:	09 f4       	brne	.+2      	; 0x2a7c <.Loc.865>

00002a7a <L0^A>:
    2a7a:	35 cf       	rjmp	.-406    	; 0x28e6 <.L126>

00002a7c <.Loc.865>:
  ADC_DDR = (1<<TPRELAY) | TXD_MSK; 	// switch pin with reference to GND, release relay
    2a7c:	d7 b9       	out	0x07, r29	; 7

00002a7e <.Loc.867>:
  ADC_DDR =  TXD_MSK; 	// switch pin with reference to input, activate relay
    2a7e:	17 b8       	out	0x07, r1	; 7

00002a80 <.Loc.869>:
  lcd_next_line_wait(0);
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <lcd_next_line_wait>

00002a86 <.L176>:
  if (ResistorsFound != 0) {
    2a86:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <ResistorsFound>

00002a8a <.Loc.873>:
    2a8a:	31 15       	cp	r19, r1
    2a8c:	09 f4       	brne	.+2      	; 0x2a90 <.Loc.874>

00002a8e <L0^A>:
    2a8e:	a7 c3       	rjmp	.+1870   	; 0x31de <.L201>

00002a90 <.Loc.874>:
       rpins.pw = Rnum2pins(ResistorList[0]);	// get pin numbers for resistor 1
    2a90:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <ResistorList>

00002a94 <.Loc.876>:
    if (ResistorsFound == 1) { // single resistor
    2a94:	31 30       	cpi	r19, 0x01	; 1
    2a96:	09 f0       	breq	.+2      	; 0x2a9a <.Loc.877>

00002a98 <L0^A>:
    2a98:	3d c3       	rjmp	.+1658   	; 0x3114 <.L202>

00002a9a <.Loc.877>:
       rpins.pw = Rnum2pins(ResistorList[0]);	// get pin numbers for resistor 1
    2a9a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Rnum2pins>

00002a9e <.LVL299>:
    2a9e:	69 2f       	mov	r22, r25

00002aa0 <.Loc.879>:
       if ((ResistorList[0] == 1) && (NumOfDiodes == 0)) {
    2aa0:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <ResistorList>
    2aa4:	91 30       	cpi	r25, 0x01	; 1
    2aa6:	09 f0       	breq	.+2      	; 0x2aaa <.Loc.881>

00002aa8 <L0^A>:
    2aa8:	31 c3       	rjmp	.+1634   	; 0x310c <.L203>

00002aaa <.Loc.881>:
    2aaa:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <NumOfDiodes>
    2aae:	91 11       	cpse	r25, r1
    2ab0:	2d c3       	rjmp	.+1626   	; 0x310c <.L203>

00002ab2 <.Loc.882>:
          show_Resis13();		// call of the special resistor measurement
    2ab2:	0e 94 da 28 	call	0x51b4	; 0x51b4 <show_Resis13>

00002ab6 <.LVL300>:
          goto shut_off;		// key is pressed or timeout
    2ab6:	a1 cf       	rjmp	.-190    	; 0x29fa <.L133>

00002ab8 <.L135>:
     } else if(NumOfDiodes == 2) { // double diode
    2ab8:	82 30       	cpi	r24, 0x02	; 2
    2aba:	71 f5       	brne	.+92     	; 0x2b18 <.L138>

00002abc <.Loc.886>:
        lcd_data('2');
    2abc:	82 e3       	ldi	r24, 0x32	; 50
    2abe:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00002ac2 <.LVL301>:
        lcd_MEM_string(Dioden);		//"diodes "
    2ac2:	8d e0       	ldi	r24, 0x0D	; 13
    2ac4:	91 e0       	ldi	r25, 0x01	; 1
    2ac6:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00002aca <.LVL302>:
        if(diodes.Anode[0] == diodes.Anode[1]) { //Common Anode
    2aca:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <diodes>

00002ace <.Loc.890>:
    2ace:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <diodes+0x1>

00002ad2 <.Loc.891>:
    2ad2:	93 13       	cpse	r25, r19
    2ad4:	08 c0       	rjmp	.+16     	; 0x2ae6 <.L139>

00002ad6 <.Loc.892>:
           DiodeSymbol_CpinApin(0);	// 1-|<-2
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <DiodeSymbol_CpinApin>

00002adc <.LVL303>:
           DiodeSymbol_ACpin(1);	//  ->|-3
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	0e 94 86 07 	call	0xf0c	; 0xf0c <DiodeSymbol_ACpin>

00002ae2 <.L295>:
           UfAusgabe(0x01);
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	a5 cf       	rjmp	.-182    	; 0x2a30 <.L286>

00002ae6 <.L139>:
        if(diodes.Cathode[0] == diodes.Cathode[1]) { //Common Cathode
    2ae6:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <diodes+0x6>

00002aea <.Loc.898>:
    2aea:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <diodes+0x7>

00002aee <.Loc.899>:
    2aee:	28 13       	cpse	r18, r24
    2af0:	07 c0       	rjmp	.+14     	; 0x2b00 <.L140>

00002af2 <.Loc.900>:
           DiodeSymbol_ApinCpin(0);	// 1->|-2
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	0e 94 7f 07 	call	0xefe	; 0xefe <DiodeSymbol_ApinCpin>

00002af8 <.LVL305>:
           DiodeSymbol_CApin(1);	//  -|<-3
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	0e 94 96 07 	call	0xf2c	; 0xf2c <DiodeSymbol_CApin>

00002afe <.LVL306>:
    2afe:	f1 cf       	rjmp	.-30     	; 0x2ae2 <.L295>

00002b00 <.L140>:
        if (diodes.Cathode[0] == diodes.Anode[1]) {
    2b00:	32 13       	cpse	r19, r18
    2b02:	06 c0       	rjmp	.+12     	; 0x2b10 <.L141>

00002b04 <.Loc.904>:
           diode_sequence = 0x01;	// 0 1
    2b04:	81 e0       	ldi	r24, 0x01	; 1

00002b06 <.L296>:
           diode_sequence = 0x10;	// 1 0
    2b06:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <diode_sequence>

00002b0a <.L294>:
           SerienDiodenAusgabe();
    2b0a:	0e 94 61 07 	call	0xec2	; 0xec2 <SerienDiodenAusgabe>

00002b0e <.LVL307>:
           goto end3;
    2b0e:	b1 cf       	rjmp	.-158    	; 0x2a72 <.L137>

00002b10 <.L141>:
        if (diodes.Cathode[1] == diodes.Anode[0]) {
    2b10:	98 13       	cpse	r25, r24
    2b12:	3a c0       	rjmp	.+116    	; 0x2b88 <.L142>

00002b14 <.Loc.912>:
           diode_sequence = 0x10;	// 1 0
    2b14:	80 e1       	ldi	r24, 0x10	; 16
    2b16:	f7 cf       	rjmp	.-18     	; 0x2b06 <.L296>

00002b18 <.L138>:
     } else if(NumOfDiodes == 3) {
    2b18:	83 30       	cpi	r24, 0x03	; 3
    2b1a:	b1 f5       	brne	.+108    	; 0x2b88 <.L142>

00002b1c <.Loc.916>:
        diode_sequence = 0x33;	// 3 3
    2b1c:	80 92 84 01 	sts	0x0184, r8	; 0x800184 <diode_sequence>

00002b20 <.Loc.918>:
			if (diodes.Cathode[0] == diodes.Anode[1]) {
    2b20:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <diodes+0x6>

00002b24 <.Loc.920>:
    2b24:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <diodes+0x1>

00002b28 <.Loc.921>:
    2b28:	89 13       	cpse	r24, r25
    2b2a:	03 c0       	rjmp	.+6      	; 0x2b32 <.L143>

00002b2c <.Loc.922>:
           diode_sequence = 0x01;	// 0 1
    2b2c:	21 e0       	ldi	r18, 0x01	; 1
    2b2e:	20 93 84 01 	sts	0x0184, r18	; 0x800184 <diode_sequence>

00002b32 <.L143>:
			if (diodes.Anode[0] == diodes.Cathode[1]) {
    2b32:	40 91 86 01 	lds	r20, 0x0186	; 0x800186 <diodes>

00002b36 <.Loc.926>:
    2b36:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <diodes+0x7>

00002b3a <.Loc.927>:
    2b3a:	43 13       	cpse	r20, r19
    2b3c:	02 c0       	rjmp	.+4      	; 0x2b42 <.L144>

00002b3e <.Loc.928>:
           diode_sequence = 0x10;	// 1 0
    2b3e:	d0 93 84 01 	sts	0x0184, r29	; 0x800184 <diode_sequence>

00002b42 <.L144>:
			if (diodes.Cathode[0] == diodes.Anode[2]) {
    2b42:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <diodes+0x2>

00002b46 <.Loc.932>:
    2b46:	82 13       	cpse	r24, r18
    2b48:	03 c0       	rjmp	.+6      	; 0x2b50 <.L145>

00002b4a <.Loc.933>:
           diode_sequence = 0x02;	// 0 2
    2b4a:	82 e0       	ldi	r24, 0x02	; 2
    2b4c:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <diode_sequence>

00002b50 <.L145>:
			if (diodes.Anode[0] == diodes.Cathode[2]) {
    2b50:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <diodes+0x8>

00002b54 <.Loc.937>:
    2b54:	48 13       	cpse	r20, r24
    2b56:	02 c0       	rjmp	.+4      	; 0x2b5c <.L146>

00002b58 <.Loc.938>:
           diode_sequence = 0x20;	// 2 0
    2b58:	60 92 84 01 	sts	0x0184, r6	; 0x800184 <diode_sequence>

00002b5c <.L146>:
			if (diodes.Cathode[1] == diodes.Anode[2]) {
    2b5c:	32 13       	cpse	r19, r18
    2b5e:	0e c0       	rjmp	.+28     	; 0x2b7c <.L147>

00002b60 <.Loc.942>:
           diode_sequence = 0x12;	// 1 2
    2b60:	90 92 84 01 	sts	0x0184, r9	; 0x800184 <diode_sequence>

00002b64 <.Loc.944>:
			if (diodes.Anode[1] == diodes.Cathode[2]) {
    2b64:	98 13       	cpse	r25, r24
    2b66:	02 c0       	rjmp	.+4      	; 0x2b6c <.L149>

00002b68 <.L148>:
           diode_sequence = 0x21;	// 2 1
    2b68:	70 92 84 01 	sts	0x0184, r7	; 0x800184 <diode_sequence>

00002b6c <.L149>:
           lcd_data('3');
    2b6c:	83 e3       	ldi	r24, 0x33	; 51
    2b6e:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00002b72 <.LVL308>:
           lcd_MEM_string(Dioden);	//"Diodes "
    2b72:	8d e0       	ldi	r24, 0x0D	; 13
    2b74:	91 e0       	ldi	r25, 0x01	; 1
    2b76:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00002b7a <.LVL309>:
    2b7a:	c7 cf       	rjmp	.-114    	; 0x2b0a <.L294>

00002b7c <.L147>:
			if (diodes.Anode[1] == diodes.Cathode[2]) {
    2b7c:	98 17       	cp	r25, r24
    2b7e:	a1 f3       	breq	.-24     	; 0x2b68 <.L148>

00002b80 <.Loc.953>:
        if(diode_sequence < 0x22) {
    2b80:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <diode_sequence>
    2b84:	82 32       	cpi	r24, 0x22	; 34
    2b86:	90 f3       	brcs	.-28     	; 0x2b6c <.L149>

00002b88 <.L142>:
     lcd_MEM_string(Bauteil);		//"Bauteil"
    2b88:	80 e9       	ldi	r24, 0x90	; 144
    2b8a:	92 e0       	ldi	r25, 0x02	; 2
    2b8c:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00002b90 <.LVL310>:
     lcd_MEM_string(Unknown); 		//" unbek."
    2b90:	8e e7       	ldi	r24, 0x7E	; 126
    2b92:	92 e0       	ldi	r25, 0x02	; 2
    2b94:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00002b98 <.LVL311>:
     lcd_line2(); //2. row 
    2b98:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_line2>

00002b9c <.LVL312>:
     lcd_data(NumOfDiodes + '0');
    2b9c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <NumOfDiodes>
    2ba0:	80 5d       	subi	r24, 0xD0	; 208
    2ba2:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00002ba6 <.LVL313>:
     lcd_data('*');
    2ba6:	8a e2       	ldi	r24, 0x2A	; 42
    2ba8:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00002bac <.LVL314>:
     lcd_MEM_string(AnKat_str);		//"->|-"
    2bac:	87 e2       	ldi	r24, 0x27	; 39
    2bae:	91 e0       	ldi	r25, 0x01	; 1
    2bb0:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00002bb4 <.LVL315>:
     lcd_MEM_string(Detected);		//" detected"
    2bb4:	86 e6       	ldi	r24, 0x66	; 102
    2bb6:	92 e0       	ldi	r25, 0x02	; 2

00002bb8 <.L291>:
  lcd_MEM_string(TestFailed2); 		//"guasto "
    2bb8:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00002bbc <.L151>:
     lcd_big_icon(QUESTION);		// show big question mark
    2bbc:	86 e0       	ldi	r24, 0x06	; 6
    2bbe:	0e 94 0f 0c 	call	0x181e	; 0x181e <lcd_big_icon>

00002bc2 <.LVL317>:
  max_time = SHORT_WAIT_TIME;		// use allways the short wait time
    2bc2:	c0 e4       	ldi	r28, 0x40	; 64
    2bc4:	1f e1       	ldi	r17, 0x1F	; 31

00002bc6 <.L209>:
  ADC_DDR = (1<<TPRELAY) | TXD_MSK; 	// switch pin with reference to GND, release relay
    2bc6:	d7 b9       	out	0x07, r29	; 7

00002bc8 <.L210>:
	while (!(RST_PIN_REG & (1 << RST_PIN)))
    2bc8:	4f 9b       	sbis	0x09, 7	; 9
    2bca:	fe cf       	rjmp	.-4      	; 0x2bc8 <.L210>

00002bcc <.L211>:
  ii = wait_for_key_ms(max_time);
    2bcc:	8c 2f       	mov	r24, r28
    2bce:	91 2f       	mov	r25, r17
    2bd0:	9f d8       	rcall	.-3778   	; 0x1d10 <wait_for_key_ms>

00002bd2 <.LVL319>:
  if ((ii >=50) || (rotary.incre > 2))
    2bd2:	82 33       	cpi	r24, 0x32	; 50
    2bd4:	28 f4       	brcc	.+10     	; 0x2be0 <.L214>

00002bd6 <.Loc.977>:
    2bd6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rotary+0x6>

00002bda <.Loc.978>:
    2bda:	93 30       	cpi	r25, 0x03	; 3
    2bdc:	08 f4       	brcc	.+2      	; 0x2be0 <.L214>

00002bde <L0^A>:
    2bde:	0e c3       	rjmp	.+1564   	; 0x31fc <.L213>

00002be0 <.L214>:
		while(function_menu());// start the function menu
    2be0:	0e 94 50 30 	call	0x60a0	; 0x60a0 <function_menu>

00002be4 <.LVL321>:
    2be4:	81 11       	cpse	r24, r1
    2be6:	fc cf       	rjmp	.-8      	; 0x2be0 <.L214>
    2be8:	33 ce       	rjmp	.-922    	; 0x2850 <.L122>

00002bea <.L134>:
  } else if (PartFound == PART_TRANSISTOR) {
    2bea:	84 30       	cpi	r24, 0x04	; 4
    2bec:	09 f0       	breq	.+2      	; 0x2bf0 <.Loc.982>

00002bee <L0^A>:
    2bee:	55 c1       	rjmp	.+682    	; 0x2e9a <.L152>

00002bf0 <.Loc.982>:
    if ((ptrans.count != 0) && (ntrans.count !=0)) {
    2bf0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <ptrans+0xf>
    2bf4:	81 15       	cp	r24, r1
    2bf6:	09 f4       	brne	.+2      	; 0x2bfa <.Loc.984>

00002bf8 <L0^A>:
    2bf8:	54 c0       	rjmp	.+168    	; 0x2ca2 <.L154>

00002bfa <.Loc.984>:
    2bfa:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <ntrans+0xf>
    2bfe:	81 15       	cp	r24, r1
    2c00:	09 f4       	brne	.+2      	; 0x2c04 <.Loc.985>

00002c02 <L0^A>:
    2c02:	4f c0       	rjmp	.+158    	; 0x2ca2 <.L154>

00002c04 <.Loc.985>:
       ReadCapacity(ntrans.e, ntrans.b);	// read capacity of NPN base-emitter
    2c04:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <ntrans+0xc>
    2c08:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <ntrans+0xe>
    2c0c:	0e 94 b7 23 	call	0x476e	; 0x476e <ReadCapacity>

00002c10 <.LVL323>:
       n_cval = cap.cval;			// save the found capacity value
    2c10:	20 90 3c 01 	lds	r2, 0x013C	; 0x80013c <cap>
    2c14:	30 90 3d 01 	lds	r3, 0x013D	; 0x80013d <cap+0x1>
    2c18:	40 90 3e 01 	lds	r4, 0x013E	; 0x80013e <cap+0x2>
    2c1c:	50 90 3f 01 	lds	r5, 0x013F	; 0x80013f <cap+0x3>

00002c20 <.LVL324>:
       n_cpre  = cap.cpre;			// and dimension
    2c20:	c0 91 4e 01 	lds	r28, 0x014E	; 0x80014e <cap+0x12>

00002c24 <.LVL325>:
       ReadCapacity(ptrans.b, ptrans.e);	// read capacity of PNP base-emitter
    2c24:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <ptrans+0xe>
    2c28:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ptrans+0xc>
    2c2c:	0e 94 b7 23 	call	0x476e	; 0x476e <ReadCapacity>

00002c30 <.LVL326>:
       if ((ntrans.hfe < 500) && (ptrans.hfe >= 500)) n_cpre = -16; // set NPN BE capacity to low value
    2c30:	40 91 64 01 	lds	r20, 0x0164	; 0x800164 <ntrans>
    2c34:	50 91 65 01 	lds	r21, 0x0165	; 0x800165 <ntrans+0x1>
    2c38:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <ntrans+0x2>
    2c3c:	70 91 67 01 	lds	r23, 0x0167	; 0x800167 <ntrans+0x3>
    2c40:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <ptrans>
    2c44:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <ptrans+0x1>
    2c48:	a0 91 76 01 	lds	r26, 0x0176	; 0x800176 <ptrans+0x2>
    2c4c:	b0 91 77 01 	lds	r27, 0x0177	; 0x800177 <ptrans+0x3>
    2c50:	44 3f       	cpi	r20, 0xF4	; 244
    2c52:	51 40       	sbci	r21, 0x01	; 1
    2c54:	61 05       	cpc	r22, r1
    2c56:	71 05       	cpc	r23, r1
    2c58:	08 f0       	brcs	.+2      	; 0x2c5c <.Loc.993>

00002c5a <L0^A>:
    2c5a:	f0 c0       	rjmp	.+480    	; 0x2e3c <.L158>

00002c5c <.Loc.993>:
    2c5c:	84 3f       	cpi	r24, 0xF4	; 244
    2c5e:	91 40       	sbci	r25, 0x01	; 1
    2c60:	a1 05       	cpc	r26, r1
    2c62:	b1 05       	cpc	r27, r1
    2c64:	08 f0       	brcs	.+2      	; 0x2c68 <.L159>

00002c66 <L0^A>:
    2c66:	f4 c0       	rjmp	.+488    	; 0x2e50 <.L233>

00002c68 <.L159>:
       if (((n_cpre == cap.cpre) && (cap.cval > n_cval))
    2c68:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <cap+0x12>

00002c6c <.Loc.996>:
    2c6c:	8c 13       	cpse	r24, r28
    2c6e:	f2 c0       	rjmp	.+484    	; 0x2e54 <.L162>

00002c70 <.Loc.997>:
    2c70:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <cap>
    2c74:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <cap+0x1>
    2c78:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <cap+0x2>
    2c7c:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <cap+0x3>
    2c80:	28 16       	cp	r2, r24
    2c82:	39 06       	cpc	r3, r25
    2c84:	4a 06       	cpc	r4, r26
    2c86:	5b 06       	cpc	r5, r27
    2c88:	08 f4       	brcc	.+2      	; 0x2c8c <.L287>

00002c8a <L0^A>:
    2c8a:	e7 c0       	rjmp	.+462    	; 0x2e5a <.L235>

00002c8c <.L287>:
					|| (cap.cpre > n_cpre)) {
    2c8c:	8c e0       	ldi	r24, 0x0C	; 12

00002c8e <.L163>:
          PartMode = PART_MODE_PNP;
    2c8e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <PartMode>

00002c92 <.Loc.1000>:
		if ((ptrans.count != 0) && (ntrans.count != 0)
    2c92:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <ptrans+0xf>
    2c96:	91 15       	cp	r25, r1
    2c98:	21 f0       	breq	.+8      	; 0x2ca2 <.L154>

00002c9a <.Loc.1002>:
    2c9a:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <ntrans+0xf>
    2c9e:	91 11       	cpse	r25, r1
    2ca0:	de c0       	rjmp	.+444    	; 0x2e5e <.L157>

00002ca2 <.L154>:
    lcd_set_cursor(0,TEXT_RIGHT_TO_ICON);			// position behind the icon, Line 1
    2ca2:	67 e0       	ldi	r22, 0x07	; 7
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <lcd_set_cursor>

00002caa <.LVL329>:
    lcd_big_icon(BJT_NPN|LCD_UPPER_LEFT);	// show the NPN Icon at lower left corner
    2caa:	80 ec       	ldi	r24, 0xC0	; 192
    2cac:	0e 94 0f 0c 	call	0x181e	; 0x181e <lcd_big_icon>

00002cb0 <.LVL330>:
    if(PartMode == PART_MODE_NPN) {
    2cb0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <PartMode>
    2cb4:	8c 30       	cpi	r24, 0x0C	; 12
    2cb6:	09 f0       	breq	.+2      	; 0x2cba <.Loc.1007>

00002cb8 <L0^A>:
    2cb8:	d9 c0       	rjmp	.+434    	; 0x2e6c <.L165>

00002cba <.Loc.1007>:
       lcd_MEM_string(NPN_str);		//"NPN "
    2cba:	85 e7       	ldi	r24, 0x75	; 117
    2cbc:	91 e0       	ldi	r25, 0x01	; 1
    2cbe:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00002cc2 <.LVL331>:
       if (ptrans.count != 0) {
    2cc2:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <ptrans+0xf>
    2cc6:	81 15       	cp	r24, r1
    2cc8:	19 f0       	breq	.+6      	; 0x2cd0 <.L167>

00002cca <.Loc.1010>:
          lcd_data('p');		// mark for parasitic PNp
    2cca:	80 e7       	ldi	r24, 0x70	; 112

00002ccc <.L288>:
          lcd_data('n');		// mark for parasitic NPn
    2ccc:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00002cd0 <.L167>:
    vak_diode_nr = search_vak_diode();
    2cd0:	b1 d8       	rcall	.-3742   	; 0x1e34 <search_vak_diode>

00002cd2 <.LVL333>:
    2cd2:	c8 2f       	mov	r28, r24

00002cd4 <.LVL334>:
    if (vak_diode_nr < 5) {
    2cd4:	85 30       	cpi	r24, 0x05	; 5
    2cd6:	a0 f4       	brcc	.+40     	; 0x2d00 <.L169>

00002cd8 <.LVL335>:
       if (_trans->c != diodes.Anode[vak_diode_nr])
    2cd8:	a0 91 62 01 	lds	r26, 0x0162	; 0x800162 <_trans>
    2cdc:	b0 91 63 01 	lds	r27, 0x0163	; 0x800163 <_trans+0x1>

00002ce0 <.Loc.1020>:
    2ce0:	e8 2f       	mov	r30, r24
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	ea 57       	subi	r30, 0x7A	; 122
    2ce6:	fe 4f       	sbci	r31, 0xFE	; 254

00002ce8 <.Loc.1021>:
    2ce8:	61 e0       	ldi	r22, 0x01	; 1
    2cea:	1d 96       	adiw	r26, 0x0d	; 13
    2cec:	9c 91       	ld	r25, X
    2cee:	80 81       	ld	r24, Z

00002cf0 <.LVL336>:
    2cf0:	98 13       	cpse	r25, r24
    2cf2:	01 c0       	rjmp	.+2      	; 0x2cf6 <.L170>
    2cf4:	60 e0       	ldi	r22, 0x00	; 0

00002cf6 <.L170>:
    2cf6:	66 0f       	add	r22, r22

00002cf8 <.Loc.1023>:
       lcd_update_icon_opt(bmp_vakdiode,options);	// show the protection diode right to the Icon
    2cf8:	86 e9       	ldi	r24, 0x96	; 150
    2cfa:	91 e0       	ldi	r25, 0x01	; 1
    2cfc:	0e 94 34 0c 	call	0x1868	; 0x1868 <lcd_update_icon_opt>

00002d00 <.L169>:
    lcd_draw_trans_pins(-7, 16);	// show the pin numbers
    2d00:	60 e1       	ldi	r22, 0x10	; 16
    2d02:	89 ef       	ldi	r24, 0xF9	; 249
    2d04:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <lcd_draw_trans_pins>

00002d08 <.LVL338>:
    lcd_next_line(TEXT_RIGHT_TO_ICON);	// position behind the icon, Line 2
    2d08:	87 e0       	ldi	r24, 0x07	; 7
    2d0a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <lcd_next_line>

00002d0e <.LVL339>:
    lcd_MEM_string(hfe_str);		//"B="  (hFE)
    2d0e:	84 e8       	ldi	r24, 0x84	; 132
    2d10:	91 e0       	ldi	r25, 0x01	; 1
    2d12:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00002d16 <.LVL340>:
    DisplayValue(_trans->hfe,-2,0,3);
    2d16:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    2d1a:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>

00002d1e <.Loc.1029>:
    2d1e:	60 81       	ld	r22, Z
    2d20:	71 81       	ldd	r23, Z+1	; 0x01
    2d22:	82 81       	ldd	r24, Z+2	; 0x02
    2d24:	93 81       	ldd	r25, Z+3	; 0x03
    2d26:	03 e0       	ldi	r16, 0x03	; 3
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	4e ef       	ldi	r20, 0xFE	; 254
    2d2c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DisplayValue>

00002d30 <.LVL341>:
    lcd_next_line(TEXT_RIGHT_TO_ICON+1-LOW_H_SPACE); // position behind the icon+1, Line 3
    2d30:	88 e0       	ldi	r24, 0x08	; 8
    2d32:	0e 94 67 0b 	call	0x16ce	; 0x16ce <lcd_next_line>

00002d36 <.LVL342>:
    lcd_data('I');
    2d36:	89 e4       	ldi	r24, 0x49	; 73
    2d38:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00002d3c <.LVL343>:
    if (_trans->current >= 10000) {
    2d3c:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    2d40:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>

00002d44 <.Loc.1034>:
    2d44:	86 81       	ldd	r24, Z+6	; 0x06
    2d46:	97 81       	ldd	r25, Z+7	; 0x07
    2d48:	80 31       	cpi	r24, 0x10	; 16
    2d4a:	97 42       	sbci	r25, 0x27	; 39
    2d4c:	08 f4       	brcc	.+2      	; 0x2d50 <.Loc.1035>

00002d4e <L0^A>:
    2d4e:	a1 c0       	rjmp	.+322    	; 0x2e92 <.L171>

00002d50 <.Loc.1035>:
       lcd_data('e');				// emitter current has 10mA offset
    2d50:	85 e6       	ldi	r24, 0x65	; 101
    2d52:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00002d56 <.LVL344>:
       _trans->current -= 10000;
    2d56:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    2d5a:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>

00002d5e <.Loc.1038>:
    2d5e:	86 81       	ldd	r24, Z+6	; 0x06
    2d60:	97 81       	ldd	r25, Z+7	; 0x07
    2d62:	80 51       	subi	r24, 0x10	; 16
    2d64:	97 42       	sbci	r25, 0x27	; 39
    2d66:	97 83       	std	Z+7, r25	; 0x07
    2d68:	86 83       	std	Z+6, r24	; 0x06

00002d6a <.L172>:
    lcd_equal();			// lcd_data('=');
    2d6a:	0e 94 b8 06 	call	0xd70	; 0xd70 <lcd_equal>

00002d6e <.LVL345>:
    DisplayValue16(_trans->current,-6,'A',2);	// display Ic or Ie current
    2d6e:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    2d72:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    2d76:	22 e0       	ldi	r18, 0x02	; 2
    2d78:	41 e4       	ldi	r20, 0x41	; 65
    2d7a:	6a ef       	ldi	r22, 0xFA	; 250
    2d7c:	86 81       	ldd	r24, Z+6	; 0x06
    2d7e:	97 81       	ldd	r25, Z+7	; 0x07
    2d80:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

00002d84 <.LVL346>:
    lcd_next_line(TEXT_RIGHT_TO_ICON); // position behind the icon, Line 4
    2d84:	87 e0       	ldi	r24, 0x07	; 7
    2d86:	0e 94 67 0b 	call	0x16ce	; 0x16ce <lcd_next_line>

00002d8a <.LVL347>:
    lcd_MEM_string(Ube_str);		//"Ube="
    2d8a:	8d e5       	ldi	r24, 0x5D	; 93
    2d8c:	91 e0       	ldi	r25, 0x01	; 1
    2d8e:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00002d92 <.LVL348>:
    Display_mV(_trans->uBE,3-LOW_H_SPACE);
    2d92:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    2d96:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    2d9a:	63 e0       	ldi	r22, 0x03	; 3
    2d9c:	84 81       	ldd	r24, Z+4	; 0x04
    2d9e:	95 81       	ldd	r25, Z+5	; 0x05
    2da0:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Display_mV>

00002da4 <.LVL349>:
    last_line_used = 1;
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <last_line_used>

00002daa <.Loc.1046>:
    if (_trans->ice0 > 0) {
    2daa:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    2dae:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>

00002db2 <.Loc.1048>:
    2db2:	80 85       	ldd	r24, Z+8	; 0x08
    2db4:	91 85       	ldd	r25, Z+9	; 0x09
    2db6:	89 2b       	or	r24, r25
    2db8:	91 f0       	breq	.+36     	; 0x2dde <.L173>

00002dba <.Loc.1049>:
       lcd_next_line_wait(TEXT_RIGHT_TO_ICON-1-LOW_H_SPACE); // position behind the icon, Line 4 & wait and clear last line
    2dba:	86 e0       	ldi	r24, 0x06	; 6
    2dbc:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <lcd_next_line_wait>

00002dc0 <.LVL350>:
       lcd_MEM2_string(ICE0_str);		// "ICE0="
    2dc0:	8f ee       	ldi	r24, 0xEF	; 239
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00002dc8 <.LVL351>:
       DisplayValue16(_trans->ice0,-6,'A',2);	// display ICEO
    2dc8:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    2dcc:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    2dd0:	22 e0       	ldi	r18, 0x02	; 2
    2dd2:	41 e4       	ldi	r20, 0x41	; 65
    2dd4:	6a ef       	ldi	r22, 0xFA	; 250
    2dd6:	80 85       	ldd	r24, Z+8	; 0x08
    2dd8:	91 85       	ldd	r25, Z+9	; 0x09
    2dda:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

00002dde <.L173>:
    if (_trans->ices > 0) {
    2dde:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    2de2:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>

00002de6 <.Loc.1054>:
    2de6:	82 85       	ldd	r24, Z+10	; 0x0a
    2de8:	93 85       	ldd	r25, Z+11	; 0x0b
    2dea:	89 2b       	or	r24, r25
    2dec:	91 f0       	breq	.+36     	; 0x2e12 <.L174>

00002dee <.Loc.1055>:
       lcd_next_line_wait(TEXT_RIGHT_TO_ICON-1-LOW_H_SPACE); // position behind the icon, Line 4 & wait and clear last line
    2dee:	86 e0       	ldi	r24, 0x06	; 6
    2df0:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <lcd_next_line_wait>

00002df4 <.LVL353>:
       lcd_MEM2_string(ICEs_str);		// "ICEs="
    2df4:	89 ee       	ldi	r24, 0xE9	; 233
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00002dfc <.LVL354>:
       DisplayValue16(_trans->ices,-6,'A',2);	// display ICEs
    2dfc:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    2e00:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    2e04:	22 e0       	ldi	r18, 0x02	; 2
    2e06:	41 e4       	ldi	r20, 0x41	; 65
    2e08:	6a ef       	ldi	r22, 0xFA	; 250
    2e0a:	82 85       	ldd	r24, Z+10	; 0x0a
    2e0c:	93 85       	ldd	r25, Z+11	; 0x0b
    2e0e:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

00002e12 <.L174>:
    if (vak_diode_nr < 5) {
    2e12:	c5 30       	cpi	r28, 0x05	; 5
    2e14:	68 f4       	brcc	.+26     	; 0x2e30 <.L175>

00002e16 <.Loc.1060>:
       lcd_next_line_wait(0); 		// next line, wait 5s and clear line 2/4
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <lcd_next_line_wait>

00002e1c <.LVL356>:
       DiodeSymbol_withPins(vak_diode_nr);
    2e1c:	8c 2f       	mov	r24, r28
    2e1e:	0e 94 73 07 	call	0xee6	; 0xee6 <DiodeSymbol_withPins>

00002e22 <.LVL357>:
       lcd_MEM_string(Uf_str);			//"Uf="
    2e22:	89 e5       	ldi	r24, 0x59	; 89
    2e24:	91 e0       	ldi	r25, 0x01	; 1
    2e26:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00002e2a <.LVL358>:
       mVAusgabe(vak_diode_nr);
    2e2a:	8c 2f       	mov	r24, r28
    2e2c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <mVAusgabe>

00002e30 <.L175>:
    PinLayoutLine('E','B','C'); 		//  Pin 1=E ...
    2e30:	43 e4       	ldi	r20, 0x43	; 67
    2e32:	62 e4       	ldi	r22, 0x42	; 66

00002e34 <.L297>:
       PinLayoutLine('E','G','C'); 		//  Pin 1=...
    2e34:	85 e4       	ldi	r24, 0x45	; 69

00002e36 <.L293>:
       PinLayoutLine('S','G','D'); 		//  Pin 1=...
    2e36:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <PinLayoutLine>

00002e3a <.LVL361>:
    2e3a:	55 cd       	rjmp	.-1366   	; 0x28e6 <.L126>

00002e3c <.L158>:
       if ((ptrans.hfe < 500) && (ntrans.hfe >= 500)) cap.cpre = -16; // set PNP BE capacity to low value
    2e3c:	84 3f       	cpi	r24, 0xF4	; 244
    2e3e:	91 40       	sbci	r25, 0x01	; 1
    2e40:	a1 05       	cpc	r26, r1
    2e42:	b1 05       	cpc	r27, r1
    2e44:	08 f0       	brcs	.+2      	; 0x2e48 <.Loc.1071>

00002e46 <L0^A>:
    2e46:	10 cf       	rjmp	.-480    	; 0x2c68 <.L159>

00002e48 <.Loc.1071>:
    2e48:	80 ef       	ldi	r24, 0xF0	; 240
    2e4a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <cap+0x12>
    2e4e:	0c cf       	rjmp	.-488    	; 0x2c68 <.L159>

00002e50 <.L233>:
       if ((ntrans.hfe < 500) && (ptrans.hfe >= 500)) n_cpre = -16; // set NPN BE capacity to low value
    2e50:	c0 ef       	ldi	r28, 0xF0	; 240

00002e52 <.LVL363>:
    2e52:	0a cf       	rjmp	.-492    	; 0x2c68 <.L159>

00002e54 <.L162>:
					|| (cap.cpre > n_cpre)) {
    2e54:	c8 17       	cp	r28, r24
    2e56:	0c f0       	brlt	.+2      	; 0x2e5a <.L235>

00002e58 <L0^A>:
    2e58:	19 cf       	rjmp	.-462    	; 0x2c8c <.L287>

00002e5a <.L235>:
    2e5a:	8d e0       	ldi	r24, 0x0D	; 13
    2e5c:	18 cf       	rjmp	.-464    	; 0x2c8e <.L163>

00002e5e <.L157>:
				&& (!(RST_PIN_REG & (1 << RST_PIN)))) {
    2e5e:	4f 99       	sbic	0x09, 7	; 9
    2e60:	20 cf       	rjmp	.-448    	; 0x2ca2 <.L154>

00002e62 <.Loc.1077>:
       PartMode ^= (PART_MODE_PNP - PART_MODE_NPN);
    2e62:	91 e0       	ldi	r25, 0x01	; 1
    2e64:	89 27       	eor	r24, r25
    2e66:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <PartMode>
    2e6a:	1b cf       	rjmp	.-458    	; 0x2ca2 <.L154>

00002e6c <.L165>:
       _trans = &ptrans;		// change transistor structure
    2e6c:	f0 92 63 01 	sts	0x0163, r15	; 0x800163 <_trans+0x1>
    2e70:	e0 92 62 01 	sts	0x0162, r14	; 0x800162 <_trans>

00002e74 <.Loc.1081>:
       lcd_update_icon(bmp_pnp);	// update for PNP
    2e74:	81 ed       	ldi	r24, 0xD1	; 209
    2e76:	91 e0       	ldi	r25, 0x01	; 1
    2e78:	0e 94 4c 0c 	call	0x1898	; 0x1898 <lcd_update_icon>

00002e7c <.LVL366>:
       lcd_MEM_string(PNP_str);		//"PNP "
    2e7c:	8d e6       	ldi	r24, 0x6D	; 109
    2e7e:	91 e0       	ldi	r25, 0x01	; 1
    2e80:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00002e84 <.LVL367>:
       if (ntrans.count != 0) {
    2e84:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <ntrans+0xf>
    2e88:	81 15       	cp	r24, r1
    2e8a:	09 f4       	brne	.+2      	; 0x2e8e <.Loc.1085>

00002e8c <L0^A>:
    2e8c:	21 cf       	rjmp	.-446    	; 0x2cd0 <.L167>

00002e8e <.Loc.1085>:
          lcd_data('n');		// mark for parasitic NPn
    2e8e:	8e e6       	ldi	r24, 0x6E	; 110
    2e90:	1d cf       	rjmp	.-454    	; 0x2ccc <.L288>

00002e92 <.L171>:
       lcd_data('c');
    2e92:	83 e6       	ldi	r24, 0x63	; 99
    2e94:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00002e98 <.LVL369>:
    2e98:	68 cf       	rjmp	.-304    	; 0x2d6a <.L172>

00002e9a <.L152>:
  } else if (PartFound == PART_FET) {	/* JFET or MOSFET */
    2e9a:	85 30       	cpi	r24, 0x05	; 5
    2e9c:	09 f0       	breq	.+2      	; 0x2ea0 <.LBB29>

00002e9e <L0^A>:
    2e9e:	f3 cd       	rjmp	.-1050   	; 0x2a86 <.L176>

00002ea0 <.LBB29>:
    lcd_set_cursor(0,TEXT_RIGHT_TO_ICON);	// position behind the icon, Line 1
    2ea0:	67 e0       	ldi	r22, 0x07	; 7
    2ea2:	80 e0       	ldi	r24, 0x00	; 0
    2ea4:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <lcd_set_cursor>

00002ea8 <.LVL372>:
    if((PartMode&P_CHANNEL) == P_CHANNEL) {
    2ea8:	c0 91 2e 01 	lds	r28, 0x012E	; 0x80012e <PartMode>
    2eac:	c0 71       	andi	r28, 0x10	; 16

00002eae <.Loc.1092>:
    2eae:	c1 15       	cp	r28, r1
    2eb0:	09 f4       	brne	.+2      	; 0x2eb4 <.Loc.1093>

00002eb2 <L0^A>:
    2eb2:	64 c0       	rjmp	.+200    	; 0x2f7c <.L177>

00002eb4 <.Loc.1093>:
       lcd_data('P');			//P-channel
    2eb4:	80 e5       	ldi	r24, 0x50	; 80
    2eb6:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00002eba <.LVL373>:
       _trans = &ptrans;
    2eba:	f0 92 63 01 	sts	0x0163, r15	; 0x800163 <_trans+0x1>
    2ebe:	e0 92 62 01 	sts	0x0162, r14	; 0x800162 <_trans>

00002ec2 <.LVL374>:
       fetidx = 2;
    2ec2:	c2 e0       	ldi	r28, 0x02	; 2

00002ec4 <.L178>:
    lcd_minus();	// lcd_data('-');		// minus is used for JFET, D-MOS, E-MOS ...
    2ec4:	0e 94 b6 06 	call	0xd6c	; 0xd6c <lcd_minus>

00002ec8 <.LVL376>:
    part_code = PartMode&0x0f;
    2ec8:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <PartMode>

00002ecc <.Loc.1102>:
    2ecc:	18 2f       	mov	r17, r24
    2ece:	1f 70       	andi	r17, 0x0F	; 15

00002ed0 <.LVL377>:
    if (part_code == PART_MODE_JFET) {
    2ed0:	14 30       	cpi	r17, 0x04	; 4
    2ed2:	09 f0       	breq	.+2      	; 0x2ed6 <.Loc.1105>

00002ed4 <L0^A>:
    2ed4:	57 c0       	rjmp	.+174    	; 0x2f84 <.L179>

00002ed6 <.Loc.1105>:
       lcd_MEM_string(jfet_str);	//"JFET"
    2ed6:	8f e8       	ldi	r24, 0x8F	; 143
    2ed8:	91 e0       	ldi	r25, 0x01	; 1
    2eda:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00002ede <.LVL378>:
       lcd_big_icon(N_JFET|LCD_UPPER_LEFT);
    2ede:	83 ec       	ldi	r24, 0xC3	; 195
    2ee0:	0e 94 0f 0c 	call	0x181e	; 0x181e <lcd_big_icon>

00002ee4 <.LVL379>:
          lcd_update_icon(bmp_p_jfet); // update the n_jfet bitmap to p_jfet
    2ee4:	8a ed       	ldi	r24, 0xDA	; 218
    2ee6:	91 e0       	ldi	r25, 0x01	; 1

00002ee8 <.Loc.1109>:
       if (fetidx != 0) {
    2ee8:	c1 11       	cpse	r28, r1
    2eea:	68 c0       	rjmp	.+208    	; 0x2fbc <.L289>

00002eec <.L181>:
    vak_diode_nr = search_vak_diode();
    2eec:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <search_vak_diode>

00002ef0 <.LVL380>:
    if(vak_diode_nr < 5) {
    2ef0:	85 30       	cpi	r24, 0x05	; 5
    2ef2:	a0 f4       	brcc	.+40     	; 0x2f1c <.L190>

00002ef4 <.LVL381>:
       if (_trans->c != diodes.Anode[vak_diode_nr])
    2ef4:	a0 91 62 01 	lds	r26, 0x0162	; 0x800162 <_trans>
    2ef8:	b0 91 63 01 	lds	r27, 0x0163	; 0x800163 <_trans+0x1>

00002efc <.Loc.1118>:
    2efc:	e8 2f       	mov	r30, r24
    2efe:	f0 e0       	ldi	r31, 0x00	; 0
    2f00:	ea 57       	subi	r30, 0x7A	; 122
    2f02:	fe 4f       	sbci	r31, 0xFE	; 254

00002f04 <.Loc.1119>:
    2f04:	61 e0       	ldi	r22, 0x01	; 1
    2f06:	1d 96       	adiw	r26, 0x0d	; 13
    2f08:	9c 91       	ld	r25, X
    2f0a:	80 81       	ld	r24, Z

00002f0c <.LVL382>:
    2f0c:	98 13       	cpse	r25, r24
    2f0e:	01 c0       	rjmp	.+2      	; 0x2f12 <.L191>
    2f10:	60 e0       	ldi	r22, 0x00	; 0

00002f12 <.L191>:
    2f12:	66 0f       	add	r22, r22

00002f14 <.Loc.1121>:
       lcd_update_icon_opt(bmp_vakdiode,options);	// update Icon with protection diode
    2f14:	86 e9       	ldi	r24, 0x96	; 150
    2f16:	91 e0       	ldi	r25, 0x01	; 1
    2f18:	0e 94 34 0c 	call	0x1868	; 0x1868 <lcd_update_icon_opt>

00002f1c <.L190>:
    lcd_draw_trans_pins(-7, 16);	// update of pin numbers must be done after diode update
    2f1c:	60 e1       	ldi	r22, 0x10	; 16
    2f1e:	89 ef       	ldi	r24, 0xF9	; 249
    2f20:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <lcd_draw_trans_pins>

00002f24 <.LVL384>:
    lcd_next_line(TEXT_RIGHT_TO_ICON);	// position text behind the icon, Line 2
    2f24:	87 e0       	ldi	r24, 0x07	; 7
    2f26:	0e 94 67 0b 	call	0x16ce	; 0x16ce <lcd_next_line>

00002f2a <.LVL385>:
    if((PartMode&D_MODE) != D_MODE) {	//enhancement-MOSFET
    2f2a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <PartMode>

00002f2e <.Loc.1126>:
    2f2e:	85 fd       	sbrc	r24, 5
    2f30:	61 c0       	rjmp	.+194    	; 0x2ff4 <.L192>

00002f32 <.Loc.1127>:
       lcd_MEM_string(vt_str+1);		// "Vt="
    2f32:	85 e5       	ldi	r24, 0x55	; 85
    2f34:	91 e0       	ldi	r25, 0x01	; 1
    2f36:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00002f3a <.LVL386>:
       Display_mV(_trans->gthvoltage,2);	//Gate-threshold voltage
    2f3a:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    2f3e:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    2f42:	62 e0       	ldi	r22, 0x02	; 2
    2f44:	82 85       	ldd	r24, Z+10	; 0x0a
    2f46:	93 85       	ldd	r25, Z+11	; 0x0b
    2f48:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Display_mV>

00002f4c <.LVL387>:
       ReadCapacity(_trans->b,_trans->e);	//measure capacity
    2f4c:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    2f50:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>

00002f54 <.Loc.1131>:
    2f54:	66 85       	ldd	r22, Z+14	; 0x0e
    2f56:	84 85       	ldd	r24, Z+12	; 0x0c
    2f58:	0e 94 b7 23 	call	0x476e	; 0x476e <ReadCapacity>

00002f5c <.LVL388>:
       lcd_next_line(TEXT_RIGHT_TO_ICON);	// position text behind the icon, Line 3
    2f5c:	87 e0       	ldi	r24, 0x07	; 7
    2f5e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <lcd_next_line>

00002f62 <.LVL389>:
       lcd_show_Cg();	// show Cg=xxxpF
    2f62:	0e 94 c0 0c 	call	0x1980	; 0x1980 <lcd_show_Cg>

00002f66 <.LVL390>:
       lcd_show_rds(TEXT_RIGHT_TO_ICON-1); 	// show RDS at column behind the icon -1
    2f66:	86 e0       	ldi	r24, 0x06	; 6

00002f68 <.L290>:
       lcd_show_rds(0);                // show Drain-Source resistance RDS at column 0
    2f68:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <lcd_show_rds>

00002f6c <.LVL391>:
       PinLayoutLine('?','G','?'); 		//  Pin 1=...
    2f6c:	4f e3       	ldi	r20, 0x3F	; 63
    2f6e:	67 e4       	ldi	r22, 0x47	; 71
    2f70:	8f e3       	ldi	r24, 0x3F	; 63

00002f72 <.Loc.1138>:
    if (part_code != PART_MODE_JFET) {
    2f72:	14 30       	cpi	r17, 0x04	; 4
    2f74:	09 f4       	brne	.+2      	; 0x2f78 <.Loc.1139>

00002f76 <L0^A>:
    2f76:	5f cf       	rjmp	.-322    	; 0x2e36 <.L293>

00002f78 <.Loc.1139>:
       for (ii=0;ii<NumOfDiodes;ii++) {
    2f78:	c0 e0       	ldi	r28, 0x00	; 0

00002f7a <.LVL392>:
    2f7a:	bb c0       	rjmp	.+374    	; 0x30f2 <.L197>

00002f7c <.L177>:
       lcd_data('N');			//N-channel
    2f7c:	8e e4       	ldi	r24, 0x4E	; 78
    2f7e:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00002f82 <.LVL394>:
    2f82:	a0 cf       	rjmp	.-192    	; 0x2ec4 <.L178>

00002f84 <.L179>:
       if ((PartMode&D_MODE) == D_MODE) {
    2f84:	85 ff       	sbrs	r24, 5
    2f86:	1d c0       	rjmp	.+58     	; 0x2fc2 <.L182>

00002f88 <.Loc.1144>:
          lcd_data('D');			// N-D or P-D
    2f88:	84 e4       	ldi	r24, 0x44	; 68
    2f8a:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00002f8e <.LVL396>:
          fetidx += 1;
    2f8e:	cf 5f       	subi	r28, 0xFF	; 255

00002f90 <.L183>:
       if (part_code == (PART_MODE_IGBT)) {
    2f90:	13 30       	cpi	r17, 0x03	; 3
    2f92:	d9 f4       	brne	.+54     	; 0x2fca <.L184>

00002f94 <.Loc.1149>:
          lcd_MEM_string(igbt_str);	//"-IGBT"
    2f94:	89 e8       	ldi	r24, 0x89	; 137
    2f96:	91 e0       	ldi	r25, 0x01	; 1
    2f98:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00002f9c <.LVL398>:
          lcd_big_icon(N_E_IGBT|LCD_UPPER_LEFT);
    2f9c:	81 ec       	ldi	r24, 0xC1	; 193
    2f9e:	0e 94 0f 0c 	call	0x181e	; 0x181e <lcd_big_icon>

00002fa2 <.LVL399>:
          if (fetidx == 1)  lcd_update_icon(bmp_n_d_igbt);
    2fa2:	87 e2       	ldi	r24, 0x27	; 39
    2fa4:	92 e0       	ldi	r25, 0x02	; 2

00002fa6 <.Loc.1153>:
    2fa6:	c1 30       	cpi	r28, 0x01	; 1
    2fa8:	49 f0       	breq	.+18     	; 0x2fbc <.L289>

00002faa <.Loc.1154>:
          if (fetidx == 2)  lcd_update_icon(bmp_p_e_igbt);
    2faa:	83 e3       	ldi	r24, 0x33	; 51
    2fac:	92 e0       	ldi	r25, 0x02	; 2

00002fae <.Loc.1156>:
    2fae:	c2 30       	cpi	r28, 0x02	; 2
    2fb0:	29 f0       	breq	.+10     	; 0x2fbc <.L289>

00002fb2 <.Loc.1157>:
          if (fetidx == 3)  lcd_update_icon(bmp_p_d_igbt);
    2fb2:	83 e0       	ldi	r24, 0x03	; 3
    2fb4:	92 e0       	ldi	r25, 0x02	; 2

00002fb6 <.Loc.1159>:
    2fb6:	c3 30       	cpi	r28, 0x03	; 3
    2fb8:	09 f0       	breq	.+2      	; 0x2fbc <.L289>

00002fba <L0^A>:
    2fba:	98 cf       	rjmp	.-208    	; 0x2eec <.L181>

00002fbc <.L289>:
          if (fetidx == 3)  lcd_update_icon(bmp_p_d_mos);
    2fbc:	0e 94 4c 0c 	call	0x1898	; 0x1898 <lcd_update_icon>

00002fc0 <.LVL400>:
    2fc0:	95 cf       	rjmp	.-214    	; 0x2eec <.L181>

00002fc2 <.L182>:
          lcd_data('E');			// N-E or P-E
    2fc2:	85 e4       	ldi	r24, 0x45	; 69
    2fc4:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00002fc8 <.LVL401>:
    2fc8:	e3 cf       	rjmp	.-58     	; 0x2f90 <.L183>

00002fca <.L184>:
          lcd_MEM_string(mosfet_str);	//"-MOS "
    2fca:	84 e9       	ldi	r24, 0x94	; 148
    2fcc:	91 e0       	ldi	r25, 0x01	; 1
    2fce:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00002fd2 <.LVL402>:
          lcd_big_icon(N_E_MOS|LCD_UPPER_LEFT);
    2fd2:	82 ec       	ldi	r24, 0xC2	; 194
    2fd4:	0e 94 0f 0c 	call	0x181e	; 0x181e <lcd_big_icon>

00002fd8 <.LVL403>:
          if (fetidx == 1)  lcd_update_icon(bmp_n_d_mos);
    2fd8:	83 ef       	ldi	r24, 0xF3	; 243
    2fda:	91 e0       	ldi	r25, 0x01	; 1

00002fdc <.Loc.1166>:
    2fdc:	c1 30       	cpi	r28, 0x01	; 1
    2fde:	71 f3       	breq	.-36     	; 0x2fbc <.L289>

00002fe0 <.Loc.1167>:
          if (fetidx == 2)  lcd_update_icon(bmp_p_e_mos);
    2fe0:	89 ef       	ldi	r24, 0xF9	; 249
    2fe2:	91 e0       	ldi	r25, 0x01	; 1

00002fe4 <.Loc.1169>:
    2fe4:	c2 30       	cpi	r28, 0x02	; 2
    2fe6:	51 f3       	breq	.-44     	; 0x2fbc <.L289>

00002fe8 <.Loc.1170>:
          if (fetidx == 3)  lcd_update_icon(bmp_p_d_mos);
    2fe8:	c3 30       	cpi	r28, 0x03	; 3
    2fea:	09 f0       	breq	.+2      	; 0x2fee <.Loc.1172>

00002fec <L0^A>:
    2fec:	7f cf       	rjmp	.-258    	; 0x2eec <.L181>

00002fee <.Loc.1172>:
    2fee:	81 ee       	ldi	r24, 0xE1	; 225
    2ff0:	91 e0       	ldi	r25, 0x01	; 1
    2ff2:	e4 cf       	rjmp	.-56     	; 0x2fbc <.L289>

00002ff4 <.L192>:
          ReadCapacity(_trans->b,_trans->e);	//measure capacity
    2ff4:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    2ff8:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>

00002ffc <.Loc.1175>:
       if ((PartMode&0x0f)  != PART_MODE_JFET) {     /* kein JFET */
    2ffc:	8f 70       	andi	r24, 0x0F	; 15
    2ffe:	84 30       	cpi	r24, 0x04	; 4
    3000:	09 f4       	brne	.+2      	; 0x3004 <.Loc.1176>

00003002 <L0^A>:
    3002:	54 c0       	rjmp	.+168    	; 0x30ac <.L194>

00003004 <.Loc.1176>:
          ReadCapacity(_trans->b,_trans->e);	//measure capacity
    3004:	66 85       	ldd	r22, Z+14	; 0x0e
    3006:	84 85       	ldd	r24, Z+12	; 0x0c
    3008:	0e 94 b7 23 	call	0x476e	; 0x476e <ReadCapacity>

0000300c <.LVL405>:
          lcd_show_Cg();	// show Cg=xxxpF
    300c:	0e 94 c0 0c 	call	0x1980	; 0x1980 <lcd_show_Cg>

00003010 <.L195>:
       lcd_set_cursor(LINE_BELOW_ICON * PAGES_PER_LINE,0);
    3010:	60 e0       	ldi	r22, 0x00	; 0
    3012:	84 e0       	ldi	r24, 0x04	; 4
    3014:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <lcd_set_cursor>

00003018 <.LVL407>:
       lcd_data('I');
    3018:	89 e4       	ldi	r24, 0x49	; 73
    301a:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

0000301e <.LVL408>:
       lcd_data('d');
    301e:	84 e6       	ldi	r24, 0x64	; 100
    3020:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00003024 <.LVL409>:
       lcd_equal();			// lcd_data('=');
    3024:	0e 94 b8 06 	call	0xd70	; 0xd70 <lcd_equal>

00003028 <.LVL410>:
       DisplayValue16(_trans->current,-6,'A',2);
    3028:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    302c:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    3030:	22 e0       	ldi	r18, 0x02	; 2
    3032:	41 e4       	ldi	r20, 0x41	; 65
    3034:	6a ef       	ldi	r22, 0xFA	; 250
    3036:	86 81       	ldd	r24, Z+6	; 0x06
    3038:	97 81       	ldd	r25, Z+7	; 0x07
    303a:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

0000303e <.LVL411>:
       lcd_MEM_string(Vgs_str);		// "@Vg="
    303e:	8f e4       	ldi	r24, 0x4F	; 79
    3040:	91 e0       	ldi	r25, 0x01	; 1
    3042:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00003046 <.LVL412>:
       Display_mV(_trans->gthvoltage,2);	//Gate-threshold voltage
    3046:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    304a:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    304e:	62 e0       	ldi	r22, 0x02	; 2
    3050:	82 85       	ldd	r24, Z+10	; 0x0a
    3052:	93 85       	ldd	r25, Z+11	; 0x0b
    3054:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Display_mV>

00003058 <.LVL413>:
       if (_trans->ice0<4800) { // can't trust cutoff voltage if close to 5V supply voltage, since then the transistor may not have been cut off at all
    3058:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    305c:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>

00003060 <.Loc.1187>:
    3060:	80 85       	ldd	r24, Z+8	; 0x08
    3062:	91 85       	ldd	r25, Z+9	; 0x09
    3064:	80 3c       	cpi	r24, 0xC0	; 192
    3066:	92 41       	sbci	r25, 0x12	; 18
    3068:	f8 f4       	brcc	.+62     	; 0x30a8 <.L196>

0000306a <.Loc.1188>:
          lcd_next_line_wait(0);
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <lcd_next_line_wait>

00003070 <.LVL414>:
          lcd_data('I');
    3070:	89 e4       	ldi	r24, 0x49	; 73
    3072:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00003076 <.LVL415>:
          lcd_data('d');
    3076:	84 e6       	ldi	r24, 0x64	; 100
    3078:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

0000307c <.LVL416>:
          lcd_equal();			// lcd_data('=');
    307c:	0e 94 b8 06 	call	0xd70	; 0xd70 <lcd_equal>

00003080 <.LVL417>:
          DisplayValue16(0,-5,'A',2);
    3080:	22 e0       	ldi	r18, 0x02	; 2
    3082:	41 e4       	ldi	r20, 0x41	; 65
    3084:	6b ef       	ldi	r22, 0xFB	; 251
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

0000308e <.LVL418>:
          lcd_MEM_string(Vgs_str);		// "@Vg="
    308e:	8f e4       	ldi	r24, 0x4F	; 79
    3090:	91 e0       	ldi	r25, 0x01	; 1
    3092:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00003096 <.LVL419>:
          Display_mV(_trans->ice0,2);	// cutoff Gate voltage
    3096:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    309a:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    309e:	62 e0       	ldi	r22, 0x02	; 2
    30a0:	80 85       	ldd	r24, Z+8	; 0x08
    30a2:	91 85       	ldd	r25, Z+9	; 0x09
    30a4:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Display_mV>

000030a8 <.L196>:
       lcd_show_rds(0);                // show Drain-Source resistance RDS at column 0
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	5e cf       	rjmp	.-324    	; 0x2f68 <.L290>

000030ac <.L194>:
          if (_trans->uBE!=0) {
    30ac:	84 81       	ldd	r24, Z+4	; 0x04
    30ae:	95 81       	ldd	r25, Z+5	; 0x05
    30b0:	89 2b       	or	r24, r25
    30b2:	09 f4       	brne	.+2      	; 0x30b6 <.LBB27>

000030b4 <L0^A>:
    30b4:	ad cf       	rjmp	.-166    	; 0x3010 <.L195>

000030b6 <.LBB27>:
             lcd_MEM_string(str_Idss);
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

000030be <.LVL421>:
             DisplayValue16(_trans->uBE,-6,'A',2);
    30be:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    30c2:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    30c6:	22 e0       	ldi	r18, 0x02	; 2
    30c8:	41 e4       	ldi	r20, 0x41	; 65
    30ca:	6a ef       	ldi	r22, 0xFA	; 250
    30cc:	84 81       	ldd	r24, Z+4	; 0x04
    30ce:	95 81       	ldd	r25, Z+5	; 0x05
    30d0:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

000030d4 <.LVL422>:
    30d4:	9d cf       	rjmp	.-198    	; 0x3010 <.L195>

000030d6 <.L199>:
          lcd_next_line_wait(0);		// line 4, if possible & wait 5s and clear last line 
    30d6:	80 e0       	ldi	r24, 0x00	; 0
    30d8:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <lcd_next_line_wait>

000030dc <.LVL424>:
          DiodeSymbol_withPins(ii);
    30dc:	8c 2f       	mov	r24, r28
    30de:	0e 94 73 07 	call	0xee6	; 0xee6 <DiodeSymbol_withPins>

000030e2 <.LVL425>:
          lcd_MEM_string(Uf_str);			//"Uf="
    30e2:	89 e5       	ldi	r24, 0x59	; 89
    30e4:	91 e0       	ldi	r25, 0x01	; 1
    30e6:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

000030ea <.LVL426>:
          mVAusgabe(ii);
    30ea:	8c 2f       	mov	r24, r28
    30ec:	0e 94 3d 07 	call	0xe7a	; 0xe7a <mVAusgabe>

000030f0 <.LVL427>:
       for (ii=0;ii<NumOfDiodes;ii++) {
    30f0:	cf 5f       	subi	r28, 0xFF	; 255

000030f2 <.L197>:
    30f2:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <NumOfDiodes>
    30f6:	c8 17       	cp	r28, r24
    30f8:	70 f3       	brcs	.-36     	; 0x30d6 <.L199>

000030fa <.Loc.1209>:
       PinLayoutLine('S','G','D'); 		//  Pin 1=...
    30fa:	44 e4       	ldi	r20, 0x44	; 68
    30fc:	67 e4       	ldi	r22, 0x47	; 71
    30fe:	83 e5       	ldi	r24, 0x53	; 83

00003100 <.Loc.1211>:
    if (part_code == PART_MODE_IGBT) {
    3100:	13 30       	cpi	r17, 0x03	; 3
    3102:	09 f0       	breq	.+2      	; 0x3106 <.Loc.1212>

00003104 <L0^A>:
    3104:	98 ce       	rjmp	.-720    	; 0x2e36 <.L293>

00003106 <.Loc.1212>:
       PinLayoutLine('E','G','C'); 		//  Pin 1=...
    3106:	43 e4       	ldi	r20, 0x43	; 67
    3108:	67 e4       	ldi	r22, 0x47	; 71
    310a:	94 ce       	rjmp	.-728    	; 0x2e34 <.L297>

0000310c <.L203>:
       show_resis(rpins.pb[0],rpins.pb[1],0);
    310c:	40 e0       	ldi	r20, 0x00	; 0
    310e:	0e 94 91 27 	call	0x4f22	; 0x4f22 <show_resis>

00003112 <.LVL430>:
    3112:	e9 cb       	rjmp	.-2094   	; 0x28e6 <.L126>

00003114 <.L202>:
       if (ResistorVal[ResistorList[1]] > ResistorVal[ii])
    3114:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <ResistorList+0x1>

00003118 <.Loc.1218>:
    3118:	f4 e0       	ldi	r31, 0x04	; 4
    311a:	9f 9f       	mul	r25, r31
    311c:	d0 01       	movw	r26, r0
    311e:	11 24       	eor	r1, r1
    3120:	a6 55       	subi	r26, 0x56	; 86
    3122:	be 4f       	sbci	r27, 0xFE	; 254

00003124 <.Loc.1219>:
    3124:	24 e0       	ldi	r18, 0x04	; 4
    3126:	82 9f       	mul	r24, r18
    3128:	f0 01       	movw	r30, r0
    312a:	11 24       	eor	r1, r1
    312c:	e6 55       	subi	r30, 0x56	; 86
    312e:	fe 4f       	sbci	r31, 0xFE	; 254

00003130 <.Loc.1220>:
    3130:	4d 91       	ld	r20, X+
    3132:	5d 91       	ld	r21, X+
    3134:	6d 91       	ld	r22, X+
    3136:	7c 91       	ld	r23, X
    3138:	20 80       	ld	r2, Z
    313a:	31 80       	ldd	r3, Z+1	; 0x01
    313c:	42 80       	ldd	r4, Z+2	; 0x02
    313e:	53 80       	ldd	r5, Z+3	; 0x03

00003140 <.Loc.1221>:
       ii = ResistorList[0];	// first resistor in the list with number 0,1,2
    3140:	28 2f       	mov	r18, r24

00003142 <.Loc.1222>:
       if (ResistorVal[ResistorList[1]] > ResistorVal[ii])
    3142:	24 16       	cp	r2, r20
    3144:	35 06       	cpc	r3, r21
    3146:	46 06       	cpc	r4, r22
    3148:	57 06       	cpc	r5, r23
    314a:	08 f4       	brcc	.+2      	; 0x314e <.L204>

0000314c <.Loc.1223>:
          ii = ResistorList[1]; // second resistor in the list with number 0,1,2
    314c:	29 2f       	mov	r18, r25

0000314e <.L204>:
          ii = (3 - ResistorList[0] - ResistorList[1]);
    314e:	98 0f       	add	r25, r24
    3150:	c3 e0       	ldi	r28, 0x03	; 3
    3152:	c9 1b       	sub	r28, r25

00003154 <.Loc.1226>:
       if (ResistorsFound == 2) {
    3154:	32 30       	cpi	r19, 0x02	; 2
    3156:	e9 f0       	breq	.+58     	; 0x3192 <.L206>

00003158 <.Loc.1227>:
          if (ResistorVal[ResistorList[2]] > ResistorVal[ii]) {
    3158:	c0 91 a9 01 	lds	r28, 0x01A9	; 0x8001a9 <ResistorList+0x2>

0000315c <.Loc.1229>:
    315c:	84 e0       	ldi	r24, 0x04	; 4
    315e:	c8 9f       	mul	r28, r24
    3160:	d0 01       	movw	r26, r0
    3162:	11 24       	eor	r1, r1
    3164:	a6 55       	subi	r26, 0x56	; 86
    3166:	be 4f       	sbci	r27, 0xFE	; 254

00003168 <.Loc.1230>:
    3168:	94 e0       	ldi	r25, 0x04	; 4
    316a:	29 9f       	mul	r18, r25
    316c:	f0 01       	movw	r30, r0
    316e:	11 24       	eor	r1, r1
    3170:	e6 55       	subi	r30, 0x56	; 86
    3172:	fe 4f       	sbci	r31, 0xFE	; 254

00003174 <.Loc.1231>:
    3174:	8d 91       	ld	r24, X+
    3176:	9d 91       	ld	r25, X+
    3178:	0d 90       	ld	r0, X+
    317a:	bc 91       	ld	r27, X
    317c:	a0 2d       	mov	r26, r0
    317e:	40 81       	ld	r20, Z
    3180:	51 81       	ldd	r21, Z+1	; 0x01
    3182:	62 81       	ldd	r22, Z+2	; 0x02
    3184:	73 81       	ldd	r23, Z+3	; 0x03
    3186:	48 17       	cp	r20, r24
    3188:	59 07       	cpc	r21, r25
    318a:	6a 07       	cpc	r22, r26
    318c:	7b 07       	cpc	r23, r27
    318e:	08 f0       	brcs	.+2      	; 0x3192 <.L206>
    3190:	c2 2f       	mov	r28, r18

00003192 <.L206>:
       x = TP1+(ii>>1);
    3192:	0c 2f       	mov	r16, r28
    3194:	06 95       	lsr	r16

00003196 <.LVL434>:
       y = TP3-ii;
    3196:	12 e0       	ldi	r17, 0x02	; 2
    3198:	b1 2e       	mov	r11, r17
    319a:	bc 1a       	sub	r11, r28

0000319c <.LVL435>:
       z = TP2+(ii>0);
    319c:	c1 11       	cpse	r28, r1
    319e:	01 c0       	rjmp	.+2      	; 0x31a2 <.L207>

000031a0 <.Loc.1238>:
    31a0:	11 e0       	ldi	r17, 0x01	; 1

000031a2 <.L207>:
       lcd_testpin(x);  	//Pin-number 1
    31a2:	80 2f       	mov	r24, r16
    31a4:	0e 94 99 0c 	call	0x1932	; 0x1932 <lcd_testpin>

000031a8 <.LVL437>:
       lcd_MEM_string(Resistor_str);    // -[=]-
    31a8:	88 e0       	ldi	r24, 0x08	; 8
    31aa:	91 e0       	ldi	r25, 0x01	; 1
    31ac:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

000031b0 <.LVL438>:
       lcd_testpin(y);		//Pin-number 2
    31b0:	8b 2d       	mov	r24, r11
    31b2:	0e 94 99 0c 	call	0x1932	; 0x1932 <lcd_testpin>

000031b6 <.LVL439>:
       lcd_MEM_string(Resistor_str);    // -[=]-
    31b6:	88 e0       	ldi	r24, 0x08	; 8
    31b8:	91 e0       	ldi	r25, 0x01	; 1
    31ba:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

000031be <.LVL440>:
       lcd_testpin(z);		//Pin-number 3
    31be:	81 2f       	mov	r24, r17
    31c0:	0e 94 99 0c 	call	0x1932	; 0x1932 <lcd_testpin>

000031c4 <.LVL441>:
       lcd_next_line(0);
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	0e 94 67 0b 	call	0x16ce	; 0x16ce <lcd_next_line>

000031ca <.LVL442>:
       RvalOut(ii==0);
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	c1 11       	cpse	r28, r1
    31ce:	80 e0       	ldi	r24, 0x00	; 0
    31d0:	0e 94 18 07 	call	0xe30	; 0xe30 <RvalOut>

000031d4 <.LVL443>:
       RvalOut(2-(ii>>1));
    31d4:	82 e0       	ldi	r24, 0x02	; 2
    31d6:	80 1b       	sub	r24, r16
    31d8:	0e 94 18 07 	call	0xe30	; 0xe30 <RvalOut>

000031dc <.LVL444>:
    31dc:	84 cb       	rjmp	.-2296   	; 0x28e6 <.L126>

000031de <.L201>:
  lcd_MEM_string(TestFailed1); 	//"Kein,unbek. oder"
    31de:	8e e6       	ldi	r24, 0x6E	; 110
    31e0:	92 e0       	ldi	r25, 0x02	; 2
    31e2:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

000031e6 <.LVL446>:
  lcd_line2(); //2. row 
    31e6:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_line2>

000031ea <.LVL447>:
  lcd_MEM_string(Bauteil);		//"campione"
    31ea:	80 e9       	ldi	r24, 0x90	; 144
    31ec:	92 e0       	ldi	r25, 0x02	; 2
    31ee:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

000031f2 <.LVL448>:
  lcd_space();
    31f2:	0e 94 b4 06 	call	0xd68	; 0xd68 <lcd_space>

000031f6 <.LVL449>:
  lcd_MEM_string(TestFailed2); 		//"guasto "
    31f6:	89 e9       	ldi	r24, 0x99	; 153
    31f8:	92 e0       	ldi	r25, 0x02	; 2
    31fa:	de cc       	rjmp	.-1604   	; 0x2bb8 <.L291>

000031fc <.L213>:
	if (ii != 0)
    31fc:	81 11       	cpse	r24, r1
    31fe:	28 cb       	rjmp	.-2480   	; 0x2850 <.L122>

00003200 <.Loc.1254>:
  if (rotary.incre > 0) goto wait_again;
    3200:	91 11       	cpse	r25, r1
    3202:	e4 cc       	rjmp	.-1592   	; 0x2bcc <.L211>

00003204 <.Loc.1256>:
shut_off:
    3204:	fa cb       	rjmp	.-2060   	; 0x29fa <.L133>

00003206 <.L221>:
          if ((wait_for_key_ms(TIME_TO_READ)) != 0)  break;	// key pressed 
 #ifdef WITH_ROTARY_SWITCH
          if (rotary.count < 0) goto start_help_text;
 #endif
       }
       sub_line = line_nr % LCD_LINES;
    3206:	85 2d       	mov	r24, r5

00003208 <.LVL452>:
    3208:	83 70       	andi	r24, 0x03	; 3

0000320a <.LVL453>:
       if (sub_line == 0) lcd_clear();  // clear display, line_nr is 0 or 4
    320a:	81 11       	cpse	r24, r1
    320c:	41 c0       	rjmp	.+130    	; 0x3290 <.L224>

0000320e <.Loc.1262>:
    320e:	3d c0       	rjmp	.+122    	; 0x328a <.L225>

00003210 <.L229>:
       lcd_set_cursor(sub_line*PAGES_PER_LINE ,0);
       uart_newline();
       wdt_reset();
       line_nr = (line_nr + 1) % LCD_LINES;
       for (ii=0;ii<space_pos;ii++) {
         zeich = pgm_read_byte(&HelpCalibration_str[ii+jj]);
    3210:	f5 01       	movw	r30, r10
    3212:	c4 91       	lpm	r28, Z

00003214 <.LBE23>:
         if (zeich == (char)0) break;	// end of text found
    3214:	c1 15       	cp	r28, r1
    3216:	79 f0       	breq	.+30     	; 0x3236 <.L222>

00003218 <.Loc.1271>:
         if (zeich == LCD_CHAR_INSEP) {
    3218:	cf 3f       	cpi	r28, 0xFF	; 255
    321a:	39 f4       	brne	.+14     	; 0x322a <.L227>

0000321c <.Loc.1273>:
            lcd_space();	// replace with space
    321c:	0e 94 b4 06 	call	0xd68	; 0xd68 <lcd_space>

00003220 <.L228>:
       for (ii=0;ii<space_pos;ii++) {
    3220:	33 94       	inc	r3

00003222 <.Loc.1275>:
    3222:	ff ef       	ldi	r31, 0xFF	; 255
    3224:	af 1a       	sub	r10, r31
    3226:	bf 0a       	sbc	r11, r31

00003228 <.LVL458>:
    3228:	3d c0       	rjmp	.+122    	; 0x32a4 <.L226>

0000322a <.L227>:
         } else {
            if (zeich != LCD_NO_SPACE) lcd_data(zeich);		// display the character without offset
    322a:	ce 3f       	cpi	r28, 0xFE	; 254
    322c:	c9 f3       	breq	.-14     	; 0x3220 <.L228>

0000322e <.Loc.1279>:
    322e:	8c 2f       	mov	r24, r28
    3230:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00003234 <.LVL460>:
    3234:	f5 cf       	rjmp	.-22     	; 0x3220 <.L228>

00003236 <.L222>:
       }
       if (zeich == (char)0) break;	// end of text found
       jj += space_pos;		// start position of line 2
       if((pgm_read_byte(&HelpCalibration_str[jj])) == ' ') jj++; // no space at begin of line
    }  /* end while */
    wait_for_key_ms(TIME_TO_READ);	// key pressed
    3236:	80 e2       	ldi	r24, 0x20	; 32
    3238:	9e e4       	ldi	r25, 0x4E	; 78
    323a:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <wait_for_key_ms>

0000323e <.LVL462>:
 #ifdef WITH_ROTARY_SWITCH
    if (rotary.count < 0) goto start_help_text;
    323e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rotary+0x5>
    3242:	87 ff       	sbrs	r24, 7
    3244:	de cb       	rjmp	.-2116   	; 0x2a02 <.L231>

00003246 <.L216>:
    line_nr = LCD_LINES;		// begin with the first LCD line, but don't wait
    3246:	24 e0       	ldi	r18, 0x04	; 4
    3248:	52 2e       	mov	r5, r18

0000324a <.Loc.1293>:
    jj = 0;
    324a:	00 e0       	ldi	r16, 0x00	; 0
    324c:	10 e0       	ldi	r17, 0x00	; 0

0000324e <.L218>:
       for (ii=0;ii<(LCD_LINE_LENGTH+1);ii++) {	// look for the last space character
    324e:	c8 01       	movw	r24, r16
    3250:	8f 5a       	subi	r24, 0xAF	; 175
    3252:	9d 4f       	sbci	r25, 0xFD	; 253
    3254:	5c 01       	movw	r10, r24

00003256 <.LBE30>:
  max_time = SHORT_WAIT_TIME;		// use allways the short wait time
    3256:	fc 01       	movw	r30, r24

00003258 <.LBB31>:
    3258:	80 e0       	ldi	r24, 0x00	; 0

0000325a <.Loc.1298>:
       space_pos = LCD_LINE_LENGTH;		// if no space is found
    325a:	92 e1       	ldi	r25, 0x12	; 18
    325c:	49 2e       	mov	r4, r25

0000325e <.L220>:
         zeich = pgm_read_byte(&HelpCalibration_str[ii+jj]);
    325e:	c4 91       	lpm	r28, Z

00003260 <.LBE24>:
         if ((zeich == ' ') || (zeich == LCD_NO_SPACE)) space_pos = ii; // save the position
    3260:	c0 32       	cpi	r28, 0x20	; 32
    3262:	11 f0       	breq	.+4      	; 0x3268 <.L240>

00003264 <.Loc.1307>:
    3264:	ce 3f       	cpi	r28, 0xFE	; 254
    3266:	09 f4       	brne	.+2      	; 0x326a <.L219>

00003268 <.L240>:
    3268:	48 2e       	mov	r4, r24

0000326a <.L219>:
       for (ii=0;ii<(LCD_LINE_LENGTH+1);ii++) {	// look for the last space character
    326a:	8f 5f       	subi	r24, 0xFF	; 255

0000326c <.Loc.1310>:
    326c:	31 96       	adiw	r30, 0x01	; 1

0000326e <.LVL469>:
    326e:	83 31       	cpi	r24, 0x13	; 19
    3270:	b1 f7       	brne	.-20     	; 0x325e <.L220>

00003272 <.Loc.1312>:
       if (line_nr == 0) {
    3272:	51 10       	cpse	r5, r1
    3274:	c8 cf       	rjmp	.-112    	; 0x3206 <.L221>

00003276 <.Loc.1314>:
          if ((wait_for_key_ms(TIME_TO_READ)) != 0)  break;	// key pressed 
    3276:	80 e2       	ldi	r24, 0x20	; 32
    3278:	9e e4       	ldi	r25, 0x4E	; 78

0000327a <.LVL470>:
    327a:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <wait_for_key_ms>

0000327e <.LVL471>:
    327e:	81 11       	cpse	r24, r1
    3280:	da cf       	rjmp	.-76     	; 0x3236 <.L222>

00003282 <.Loc.1318>:
          if (rotary.count < 0) goto start_help_text;
    3282:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rotary+0x5>
    3286:	87 fd       	sbrc	r24, 7
    3288:	de cf       	rjmp	.-68     	; 0x3246 <.L216>

0000328a <.L225>:
       if (sub_line == 0) lcd_clear();  // clear display, line_nr is 0 or 4
    328a:	0e 94 14 0b 	call	0x1628	; 0x1628 <lcd_clear>

0000328e <.LVL472>:
    328e:	80 e0       	ldi	r24, 0x00	; 0

00003290 <.L224>:
       lcd_set_cursor(sub_line*PAGES_PER_LINE ,0);
    3290:	60 e0       	ldi	r22, 0x00	; 0
    3292:	88 0f       	add	r24, r24
    3294:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <lcd_set_cursor>

00003298 <.LVL473>:
       wdt_reset();
    3298:	a8 95       	wdr

0000329a <.Loc.1324>:
       line_nr = (line_nr + 1) % LCD_LINES;
    329a:	53 94       	inc	r5

0000329c <.LVL474>:
    329c:	e5 2d       	mov	r30, r5
    329e:	e3 70       	andi	r30, 0x03	; 3
    32a0:	5e 2e       	mov	r5, r30

000032a2 <.LVL475>:
       for (ii=0;ii<space_pos;ii++) {
    32a2:	31 2c       	mov	r3, r1

000032a4 <.L226>:
    32a4:	34 10       	cpse	r3, r4
    32a6:	b4 cf       	rjmp	.-152    	; 0x3210 <.L229>

000032a8 <.Loc.1329>:
       if (zeich == (char)0) break;	// end of text found
    32a8:	c1 15       	cp	r28, r1
    32aa:	09 f4       	brne	.+2      	; 0x32ae <.Loc.1331>

000032ac <L0^A>:
    32ac:	c4 cf       	rjmp	.-120    	; 0x3236 <.L222>

000032ae <.Loc.1331>:
       jj += space_pos;		// start position of line 2
    32ae:	03 0d       	add	r16, r3
    32b0:	11 1d       	adc	r17, r1

000032b2 <.LBB25>:
       if((pgm_read_byte(&HelpCalibration_str[jj])) == ' ') jj++; // no space at begin of line
    32b2:	f8 01       	movw	r30, r16
    32b4:	ef 5a       	subi	r30, 0xAF	; 175
    32b6:	fd 4f       	sbci	r31, 0xFD	; 253

000032b8 <.LVL478>:
    32b8:	e4 91       	lpm	r30, Z

000032ba <.LBE25>:
    32ba:	e0 32       	cpi	r30, 0x20	; 32
    32bc:	09 f0       	breq	.+2      	; 0x32c0 <.Loc.1340>

000032be <L0^A>:
    32be:	c7 cf       	rjmp	.-114    	; 0x324e <.L218>

000032c0 <.Loc.1340>:
    32c0:	0f 5f       	subi	r16, 0xFF	; 255
    32c2:	1f 4f       	sbci	r17, 0xFF	; 255

000032c4 <.LVL480>:
    32c4:	c4 cf       	rjmp	.-120    	; 0x324e <.L218>

000032c6 <.L285>:
	     lcd_line1();
    32c6:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <lcd_line1>

000032ca <.LVL482>:
             lcd_MEM_string(TestTimedOut);	//Output Timeout
    32ca:	8d e5       	ldi	r24, 0x5D	; 93
    32cc:	92 e0       	ldi	r25, 0x02	; 2
    32ce:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

000032d2 <.LVL483>:
	     wait_about3s();			// time to read the Timeout message
    32d2:	8b ec       	ldi	r24, 0xCB	; 203
    32d4:	0e 94 c5 07 	call	0xf8a	; 0xf8a <sleep_5ms>

000032d8 <.LVL484>:
	     switch_tester_off();
    32d8:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <switch_tester_off>

000032dc <.LVL485>:
}   // end main
    32dc:	80 e0       	ldi	r24, 0x00	; 0
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	08 95       	ret

000032e2 <Battery_check>:

//	  Calibrate_UR();		// get Ref Voltages and Pin resistance
//        lcd_line1();			// Cursor to 1. row, column 1
	  
#ifdef BAT_CHECK
void Battery_check(void) {
    32e2:	0f 93       	push	r16

000032e4 <.LCFI0>:
    32e4:	1f 93       	push	r17

000032e6 <.LCFI1>:
    32e6:	cf 93       	push	r28

000032e8 <.LCFI2>:
    32e8:	df 93       	push	r29

000032ea <.LCFI3>:
 uint16_t bat_voltage;
 uint16_t bat_adc;
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
    32ea:	85 e0       	ldi	r24, 0x05	; 5
    32ec:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

000032f0 <.LVL0>:
  bat_adc = W5msReadADC(TPBAT); 	//with 5V reference
    32f0:	85 e0       	ldi	r24, 0x05	; 5
    32f2:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

000032f6 <.LVL1>:
    32f6:	ec 01       	movw	r28, r24

000032f8 <.LVL2>:
  // A good result can be get with multiply by 4 and divide by 10 (about 0.75%).
  #if BAT_NUMERATOR <= (0xffff/U_VCC)
	  bat_voltage = (bat_adc*BAT_NUMERATOR)/BAT_DENOMINATOR + BAT_OUT;
  #else
   #if (BAT_NUMERATOR == 133) && (BAT_DENOMINATOR == 33)
	  bat_voltage = (bat_adc*4)+BAT_OUT;		// usually output only 2 digits
    32f8:	8c 01       	movw	r16, r24
    32fa:	00 0f       	add	r16, r16
    32fc:	11 1f       	adc	r17, r17
    32fe:	00 0f       	add	r16, r16
    3300:	11 1f       	adc	r17, r17

00003302 <.LVL3>:
    3302:	0a 56       	subi	r16, 0x6A	; 106
    3304:	1f 4f       	sbci	r17, 0xFF	; 255

00003306 <.LVL4>:
   #else
	  bat_voltage = ((unsigned long)bat_adc*BAT_NUMERATOR)/BAT_DENOMINATOR + BAT_OUT;
   #endif
  #endif
  #if FLASHEND > 0x1fff
          DC_Pwr_mode = 0;
    3306:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <DC_Pwr_mode>

0000330a <.Loc.11>:
   #ifdef DC_PWR
          if ((bat_voltage < 900) || (bat_voltage > DC_PWR))
   #else
          if (bat_voltage < 900) 
    330a:	04 38       	cpi	r16, 0x84	; 132
    330c:	83 e0       	ldi	r24, 0x03	; 3
    330e:	18 07       	cpc	r17, r24
    3310:	70 f4       	brcc	.+28     	; 0x332e <.L2>

00003312 <.Loc.13>:
   #endif
          {
             // no battery present, don't check,
	     lcd_MEM_string(DC_Pwr_Mode_str);	// "DC Pwr Mode"
    3312:	89 e9       	ldi	r24, 0x99	; 153
    3314:	91 e0       	ldi	r25, 0x01	; 1
    3316:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

0000331a <.LVL5>:
             lcd_clear_line();			// clear to end of line
    331a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

0000331e <.LVL6>:
             DC_Pwr_mode = 1;
    331e:	81 e0       	ldi	r24, 0x01	; 1
    3320:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <DC_Pwr_mode>

00003324 <.L1>:
     lcd_MEM_string(BatWeak);		//Battery weak
  } else { // Battery-voltage OK
     lcd_MEM_string(OK_str); 		// "OK"
  }
  lcd_clear_line();			// clear to end of line
};
    3324:	df 91       	pop	r29
    3326:	cf 91       	pop	r28

00003328 <.LVL7>:
    3328:	1f 91       	pop	r17
    332a:	0f 91       	pop	r16

0000332c <.LVL8>:
    332c:	08 95       	ret

0000332e <.L2>:
         lcd_MEM_string(Bat_str);		//output: "Bat. "
    332e:	88 ea       	ldi	r24, 0xA8	; 168
    3330:	91 e0       	ldi	r25, 0x01	; 1
    3332:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00003336 <.LVL10>:
	 Display_mV(bat_voltage,2);		// Display 2 Digits of this 10mV units
    3336:	62 e0       	ldi	r22, 0x02	; 2
    3338:	c8 01       	movw	r24, r16
    333a:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Display_mV>

0000333e <.LVL11>:
         lcd_space();
    333e:	0e 94 b4 06 	call	0xd68	; 0xd68 <lcd_space>

00003342 <.LVL12>:
  if (bat_adc <  WARN_LEVEL) {
    3342:	ca 3f       	cpi	r28, 0xFA	; 250
    3344:	86 e0       	ldi	r24, 0x06	; 6
    3346:	d8 07       	cpc	r29, r24
    3348:	b0 f4       	brcc	.+44     	; 0x3376 <.L4>

0000334a <.Loc.26>:
     if(bat_adc < POOR_LEVEL) {	
    334a:	c3 33       	cpi	r28, 0x33	; 51
    334c:	d6 40       	sbci	r29, 0x06	; 6
    334e:	60 f4       	brcc	.+24     	; 0x3368 <.L5>

00003350 <.Loc.28>:
	lcd_MEM_string(BatEmpty);	//Battery empty!
    3350:	81 ea       	ldi	r24, 0xA1	; 161
    3352:	92 e0       	ldi	r25, 0x02	; 2
    3354:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00003358 <.LVL13>:
        lcd_clear_line();			// clear to end of line
    3358:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

0000335c <.LVL14>:
	wait_about5s();			// Let time to read the "empty" message
    335c:	8d ec       	ldi	r24, 0xCD	; 205
    335e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <sleep_5ms>

00003362 <.LVL15>:
        switch_tester_off();		// switch power off
    3362:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <switch_tester_off>

00003366 <.LVL16>:
	return;
    3366:	de cf       	rjmp	.-68     	; 0x3324 <.L1>

00003368 <.L5>:
     lcd_MEM_string(BatWeak);		//Battery weak
    3368:	8b ea       	ldi	r24, 0xAB	; 171
    336a:	92 e0       	ldi	r25, 0x02	; 2

0000336c <.L7>:
     lcd_MEM_string(OK_str); 		// "OK"
    336c:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00003370 <.LVL17>:
  lcd_clear_line();			// clear to end of line
    3370:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

00003374 <.LVL18>:
    3374:	d7 cf       	rjmp	.-82     	; 0x3324 <.L1>

00003376 <.L4>:
     lcd_MEM_string(OK_str); 		// "OK"
    3376:	85 ea       	ldi	r24, 0xA5	; 165
    3378:	91 e0       	ldi	r25, 0x01	; 1
    337a:	f8 cf       	rjmp	.-16     	; 0x336c <.L7>

0000337c <expand_FET_quadratic>:

#ifdef FET_Idss
uint16_t expand_FET_quadratic(uint16_t v0, uint16_t v1, uint16_t ii)
// assuming a datapoint of Vgs=v1, Id=ii, tries to calculate Idss (i.e., Id at Vgs=0)
// v0 must be the Vgs at which Id=0
{
    337c:	fc 01       	movw	r30, r24

0000337e <.Loc.2>:
   // Quadratic current curve can be calculated by:
   //  v1 = v0 - v1;
   //  return (uint32_t)((uint16_t)((uint32_t)(ii * v0) / v1) * v0) / v1;
   // But this simpler code need 100 bytes more flash than the following code!
   uint8_t drv, dri;	// needed for rounding
   v1 = v0 - v1;
    337e:	9c 01       	movw	r18, r24
    3380:	26 1b       	sub	r18, r22
    3382:	37 0b       	sbc	r19, r23

00003384 <.LVL1>:
    3384:	ca 01       	movw	r24, r20

00003386 <.LVL2>:
   drv = 0;
   dri = 0;
    3386:	70 e0       	ldi	r23, 0x00	; 0

00003388 <.Loc.9>:
   drv = 0;
    3388:	60 e0       	ldi	r22, 0x00	; 0

0000338a <.L3>:
   for (;;) {
      uint8_t dv, di;
      dv = (v1 + drv) >> 8;
    338a:	a9 01       	movw	r20, r18
    338c:	46 0f       	add	r20, r22
    338e:	51 1d       	adc	r21, r1

00003390 <.Loc.14>:
    3390:	45 2f       	mov	r20, r21
    3392:	55 27       	eor	r21, r21

00003394 <.LVL4>:
      drv = (v1 + drv) & 0xff;		// remainder of voltage division by 256
    3394:	62 0f       	add	r22, r18

00003396 <.Loc.17>:
//      if (dv == 0) dv = 1;		// prevent infinite loop
      v1 += dv;      // increase v by 0.4 %;  unfortunately the compiler doesn't do this very smartly, insists on creating a 16-bit temporary variable for d
    3396:	24 0f       	add	r18, r20
    3398:	35 1f       	adc	r19, r21

0000339a <.Loc.19>:
      di = (ii + dri) >> 8;
    339a:	ac 01       	movw	r20, r24

0000339c <.LVL7>:
    339c:	47 0f       	add	r20, r23
    339e:	51 1d       	adc	r21, r1

000033a0 <.Loc.22>:
    33a0:	45 2f       	mov	r20, r21
    33a2:	55 27       	eor	r21, r21

000033a4 <.LVL8>:
      dri = (ii + dri) & 0xff;		// remainder of current division by 256
    33a4:	78 0f       	add	r23, r24

000033a6 <.LVL9>:
      ii += di;     
      ii += di;      // increase ii by 0.8 %
    33a6:	da 01       	movw	r26, r20
    33a8:	aa 0f       	add	r26, r26
    33aa:	bb 1f       	adc	r27, r27
    33ac:	8a 0f       	add	r24, r26
    33ae:	9b 1f       	adc	r25, r27

000033b0 <.LVL10>:
      if (di > (60000>>8)) {
    33b0:	4b 3e       	cpi	r20, 0xEB	; 235
    33b2:	20 f4       	brcc	.+8      	; 0x33bc <.L4>

000033b4 <.Loc.30>:
         return 0;       
      }
         // no Idss measurement if Idss exceeds 40 mA, the ATmega's maximum pin current
         // note that this is actually quite safe, since by the time there's 40 mA running, the Vgs will be 40mA * 20 ohm = 0.8 V, so quite far from 0, so Id will be less than those 40 mA
      if (v1 > v0) return ii;      // V exceeds Vp, so we've reached Vgs=0 without Id exceeding 40 mA, so we can safely do the Idss measurement
    33b4:	e2 17       	cp	r30, r18
    33b6:	f3 07       	cpc	r31, r19
    33b8:	40 f7       	brcc	.-48     	; 0x338a <.L3>
    33ba:	08 95       	ret

000033bc <.L4>:
         return 0;       
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	90 e0       	ldi	r25, 0x00	; 0

000033c0 <.LBE2>:
   }
}
    33c0:	08 95       	ret

000033c2 <CheckPins>:
#endif

//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
    33c2:	a6 e1       	ldi	r26, 0x16	; 22
    33c4:	b0 e0       	ldi	r27, 0x00	; 0
    33c6:	e7 ee       	ldi	r30, 0xE7	; 231
    33c8:	f9 e1       	ldi	r31, 0x19	; 25
    33ca:	0c 94 8a 38 	jmp	0x7114	; 0x7114 <__prologue_saves__>

000033ce <.L1^B1>:
    33ce:	89 83       	std	Y+1, r24	; 0x01
    33d0:	6a 83       	std	Y+2, r22	; 0x02
    33d2:	4b 83       	std	Y+3, r20	; 0x03

000033d4 <.Loc.37>:
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
    33d4:	a8 95       	wdr

000033d6 <.Loc.58>:
  addr = &PinRLRHADCtab[LowPin-TP_MIN];		// Address of combined RL / RH / ADC pin table
    33d6:	2a 81       	ldd	r18, Y+2	; 0x02
    33d8:	e2 2f       	mov	r30, r18
    33da:	f0 e0       	ldi	r31, 0x00	; 0
    33dc:	e5 5b       	subi	r30, 0xB5	; 181
    33de:	fd 4f       	sbci	r31, 0xFD	; 253

000033e0 <.LBB3>:
  LoPinRL = pgm_read_byte(addr);		// instruction for LowPin R_L
    33e0:	34 91       	lpm	r19, Z
    33e2:	39 8b       	std	Y+17, r19	; 0x11

000033e4 <.LBE3>:
#if FLASHEND > 0x1fff
 #if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
  addr += 3;			// address of PinRHtab[LowPin]
  LoPinRH = pgm_read_byte(addr);		// instruction for LowPin R_H
 #else
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
    33e4:	33 0f       	add	r19, r19

000033e6 <.LVL15>:
    33e6:	3c 8b       	std	Y+20, r19	; 0x14

000033e8 <.LBB4>:
 #endif
  addr += 3;			// address of PinADCtab[LowPin]
    33e8:	33 96       	adiw	r30, 0x03	; 3

000033ea <.LBB5>:
  addr += 6;			// address of PinADCtab[LowPin]
 #else
  addr += 3;			// address of PinADCtab[LowPin], table PinRHtab is missing
 #endif
#endif
  LoADCp = pgm_read_byte(addr);		// instruction for ADC Low-Pin, including | TXD_VAL
    33ea:	74 90       	lpm	r7, Z

000033ec <.LBE5>:

  addr = &PinRLRHADCtab[TristatePin-TP_MIN];
    33ec:	e4 2f       	mov	r30, r20

000033ee <.LVL19>:
    33ee:	f0 e0       	ldi	r31, 0x00	; 0
    33f0:	e5 5b       	subi	r30, 0xB5	; 181
    33f2:	fd 4f       	sbci	r31, 0xFD	; 253

000033f4 <.LBB6>:
  TriPinRL = pgm_read_byte(addr);	// instruction for TristatePin R_L
    33f4:	44 91       	lpm	r20, Z

000033f6 <.LVL21>:
    33f6:	48 87       	std	Y+8, r20	; 0x08

000033f8 <.LBB7>:
  TriPinRH = pgm_read_byte(addr);	// instruction for TristatePin R_H
#else
  TriPinRH = TriPinRL + TriPinRL;			// instruction for TristatePin R_H
#endif
#ifdef SHOW_R_DS
  addr += 3;			// address of PinADCtab[TristatePin]
    33f8:	33 96       	adiw	r30, 0x03	; 3

000033fa <.LBB8>:
  TriADCp = pgm_read_byte(addr);	// instruction for ADC Tristate-Pin, including | TXD_VAL
    33fa:	b4 90       	lpm	r11, Z

000033fc <.LBE8>:
#endif

  addr = &PinRLRHADCtab[HighPin-TP_MIN];
    33fc:	e8 2f       	mov	r30, r24

000033fe <.LVL25>:
    33fe:	f0 e0       	ldi	r31, 0x00	; 0
    3400:	e5 5b       	subi	r30, 0xB5	; 181
    3402:	fd 4f       	sbci	r31, 0xFD	; 253

00003404 <.LBB9>:
  HiPinRL = pgm_read_byte(addr);		// instruction for HighPin R_L
    3404:	64 90       	lpm	r6, Z

00003406 <.LBE9>:
#if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
  addr += 3;			// address of PinRHtab[HighPin]
  HiPinRH = pgm_read_byte(addr);		// instruction for HighPin R_H
#else
  HiPinRH = HiPinRL + HiPinRL;				// instruction for HighPin R_H
    3406:	86 2d       	mov	r24, r6

00003408 <.LVL28>:
    3408:	88 0f       	add	r24, r24
    340a:	88 8b       	std	Y+16, r24	; 0x10

0000340c <.LBB10>:
#endif
  addr += 3;			// address of PinADCtab[HighPin]
    340c:	33 96       	adiw	r30, 0x03	; 3

0000340e <.LBB11>:
  HiADCp = pgm_read_byte(addr);		// instruction for ADC High-Pin, including | TXD_VAL 
    340e:	94 91       	lpm	r25, Z
    3410:	9e 8b       	std	Y+22, r25	; 0x16

00003412 <.LBE11>:
  }
#else
  // first try the common emitter circuit for P-Channel type
     uint16_t v_change_n;
     uint16_t v_change_p;
  R_PORT = TriPinRL;			//resistor-Port TriState to 1
    3412:	45 b9       	out	0x05, r20	; 5

00003414 <.LVL32>:
  R_DDR = LoPinRL | TriPinRL;		// resistor-Port Low-Pin to 0
    3414:	89 88       	ldd	r8, Y+17	; 0x11
    3416:	84 2a       	or	r8, r20
    3418:	84 b8       	out	0x04, r8	; 4

0000341a <.Loc.127>:
  ADC_DDR = HiADCm;		//High-Pin to output
    341a:	97 b9       	out	0x07, r25	; 7

0000341c <.Loc.129>:
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
    341c:	98 b9       	out	0x08, r25	; 8

0000341e <.Loc.131>:
  //for some MOSFET the gate (TristatePin) must be discharged
  adc.vCEs = W5msReadADC(LowPin);	// lp1 is the voltage at 680 Ohm with + Gate
    341e:	8a 81       	ldd	r24, Y+2	; 0x02

00003420 <.LVL33>:
    3420:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00003424 <.LVL34>:
    3424:	7c 01       	movw	r14, r24

00003426 <.LVL35>:
 #ifdef WITH_PUT
  R_PORT = TriPinRL | TriPinRH;
  R_DDR = LoPinRL | TriPinRH;           
  adc.lp_otrh = W5msReadADC(LowPin);	//read voltage of Low-Pin  , with tri-state ping to plus via RH; prevents accidental triggering of PUT
 #endif
  R_DDR = LoPinRL;		// resistor-Port Low-Pin to 0
    3426:	e9 89       	ldd	r30, Y+17	; 0x11
    3428:	e4 b9       	out	0x04, r30	; 4

0000342a <.Loc.137>:
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin  , without Gate current (+)
    342a:	8a 81       	ldd	r24, Y+2	; 0x02
    342c:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00003430 <.LVL36>:
    3430:	6c 01       	movw	r12, r24

00003432 <.LVL37>:
  R_DDR = 0;
    3432:	14 b8       	out	0x04, r1	; 4

00003434 <.Loc.141>:
  wait10ms();	 			// release all current (clear TRIAC and Thyristor)
    3434:	0e 94 ad 07 	call	0xf5a	; 0xf5a <wait10ms>

00003438 <.LVL38>:
  R_PORT = 0;
    3438:	15 b8       	out	0x05, r1	; 5

0000343a <.Loc.144>:
  R_DDR = LoPinRL | TriPinRL;		// start current again
    343a:	84 b8       	out	0x04, r8	; 4

0000343c <.Loc.146>:
  adc.lp2 = W5msReadADC(LowPin);	// lp2 is the voltage at 680 Ohm with - Gate
    343c:	8a 81       	ldd	r24, Y+2	; 0x02
    343e:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00003442 <.LVL39>:
  v_change_p = abs_diff(adc.lp2, adc.vCEs);
    3442:	b7 01       	movw	r22, r14
    3444:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <abs_diff>

00003448 <.LVL40>:
    3448:	8c 01       	movw	r16, r24

0000344a <.LVL41>:
     // switch to common emitter for NPN or N-channel FET
     ADC_DDR = LoADCm;		//Low-Pin to output
    344a:	77 b8       	out	0x07, r7	; 7

0000344c <.Loc.153>:
     ADC_PORT = TXD_VAL;		//Low-Pin fix to GND
    344c:	18 b8       	out	0x08, r1	; 8

0000344e <.Loc.155>:
     R_PORT = HiPinRL | TriPinRL;
    344e:	f8 85       	ldd	r31, Y+8	; 0x08
    3450:	f6 29       	or	r31, r6
    3452:	f9 87       	std	Y+9, r31	; 0x09
    3454:	f5 b9       	out	0x05, r31	; 5

00003456 <.Loc.157>:
     R_DDR = HiPinRL | TriPinRL;	// resistor-Port High-Pin and TriState-Pin to 1
    3456:	f4 b9       	out	0x04, r31	; 4

00003458 <.Loc.159>:
     adc.hp1 = vcc_diff(W5msReadADC(HighPin));		// voltage at 680 Ohm with + Gate
    3458:	89 81       	ldd	r24, Y+1	; 0x01
    345a:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

0000345e <.LVL42>:
    345e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vcc_diff>

00003462 <.LVL43>:
    3462:	98 2e       	mov	r9, r24
    3464:	a9 2e       	mov	r10, r25

00003466 <.LVL44>:
     R_PORT = 0;			// clear Thyristor
    3466:	15 b8       	out	0x05, r1	; 5

00003468 <.Loc.164>:
     wait10ms();				// release all current (clear TRIAC and Thyristor)
    3468:	0e 94 ad 07 	call	0xf5a	; 0xf5a <wait10ms>

0000346c <.LVL45>:
     R_PORT = HiPinRL;			//resistor-Port High-Pin to +, TriState to 0
    346c:	65 b8       	out	0x05, r6	; 5

0000346e <.Loc.167>:
     adc.hp2 = vcc_diff(W5msReadADC(HighPin));	// voltage at 680 Ohm with - Gate
    346e:	89 81       	ldd	r24, Y+1	; 0x01
    3470:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00003474 <.LVL46>:
    3474:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vcc_diff>

00003478 <.LVL47>:
    3478:	8e 87       	std	Y+14, r24	; 0x0e
    347a:	9f 87       	std	Y+15, r25	; 0x0f

0000347c <.LVL48>:
     R_DDR = HiPinRL;			// resistor-Port High-Pin to 1, TriState open
    347c:	64 b8       	out	0x04, r6	; 4

0000347e <.LVL49>:
     adc.hp3 = vcc_diff(W5msReadADC(HighPin)); // voltage at 680 Ohm with open Gate
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00003484 <.LVL50>:
    3484:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vcc_diff>

00003488 <.LVL51>:
    3488:	1c 01       	movw	r2, r24

0000348a <.LVL52>:
     v_change_n = abs_diff(adc.hp1, adc.hp2);
    348a:	6e 85       	ldd	r22, Y+14	; 0x0e
    348c:	7f 85       	ldd	r23, Y+15	; 0x0f
    348e:	89 2d       	mov	r24, r9
    3490:	9a 2d       	mov	r25, r10
    3492:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <abs_diff>

00003496 <.LVL53>:
    3496:	9c 01       	movw	r18, r24

00003498 <.LVL54>:
  } else {
     // if ((adc.vCEs+288) > adc.lp2) goto checkDiode;	// no significant change
     if (abs_diff(adc.lp2, adc.vCEs) < 288) goto checkDiode;    // no significant change
  }
#endif
  if ((v_change_n < 288)  && (v_change_p < 288)) goto checkDiode; // no significant change
    3498:	80 32       	cpi	r24, 0x20	; 32
    349a:	91 40       	sbci	r25, 0x01	; 1
    349c:	28 f4       	brcc	.+10     	; 0x34a8 <.L7>

0000349e <.Loc.179>:
    349e:	00 32       	cpi	r16, 0x20	; 32
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	18 07       	cpc	r17, r24
    34a4:	08 f4       	brcc	.+2      	; 0x34a8 <.L7>

000034a6 <L0^A>:
    34a6:	12 c1       	rjmp	.+548    	; 0x36cc <.L8>

000034a8 <.L7>:
//  if ((v_change_n+150) > (v_change_p + adc.hp3))
  if ((adc.hp2 + v_change_p) < (adc.vCEs + v_change_n))
    34a8:	ee 85       	ldd	r30, Y+14	; 0x0e
    34aa:	ff 85       	ldd	r31, Y+15	; 0x0f
    34ac:	0e 0f       	add	r16, r30
    34ae:	1f 1f       	adc	r17, r31

000034b0 <.LVL55>:
    34b0:	2e 0d       	add	r18, r14
    34b2:	3f 1d       	adc	r19, r15

000034b4 <.LVL56>:
    34b4:	02 17       	cp	r16, r18
    34b6:	13 07       	cpc	r17, r19
    34b8:	18 f0       	brcs	.+6      	; 0x34c0 <.L9>

000034ba <.Loc.184>:
  adc.vCEs = W5msReadADC(LowPin);	// lp1 is the voltage at 680 Ohm with + Gate
    34ba:	ff 86       	std	Y+15, r15	; 0x0f
    34bc:	ee 86       	std	Y+14, r14	; 0x0e

000034be <.Loc.185>:
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin  , without Gate current (+)
    34be:	16 01       	movw	r2, r12

000034c0 <.L9>:
  // a TRIAC is marked as two transistors at least (2 or 3)
  // both of NPN transistors (normal and inverse) are found, if ntrans.count == 2
  // both of PNP transistors (normal and inverse) are found, if ptrans.count == 2
  // If Transistor with protection diode is checked, all results are found,
  // if ntrans.count == 1 and ptrans.count == 1
  if ((ntrans.count + ptrans.count) > 1) {
    34c0:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <ntrans+0xf>

000034c4 <.Loc.189>:
    34c4:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <ptrans+0xf>

000034c8 <.Loc.190>:
    34c8:	82 0f       	add	r24, r18
    34ca:	99 27       	eor	r25, r25
    34cc:	99 1f       	adc	r25, r25

000034ce <.Loc.191>:
    34ce:	02 97       	sbiw	r24, 0x02	; 2
    34d0:	4c f0       	brlt	.+18     	; 0x34e4 <.L10>

000034d2 <.Loc.192>:
     // all transistors found, no more search is needed
     // but TRIAC can be detected as NPNp with same pins as PNPn
     if (!((ntrans.count == 1) && (ntrans.b == ptrans.b))) {
    34d2:	21 30       	cpi	r18, 0x01	; 1
    34d4:	09 f0       	breq	.+2      	; 0x34d8 <.Loc.194>

000034d6 <L0^A>:
    34d6:	f9 c0       	rjmp	.+498    	; 0x36ca <.L11>

000034d8 <.Loc.194>:
    34d8:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <ntrans+0xc>
    34dc:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ptrans+0xc>
    34e0:	98 13       	cpse	r25, r24
    34e2:	f3 c0       	rjmp	.+486    	; 0x36ca <.L11>

000034e4 <.L10>:
  TriPinRH = TriPinRL + TriPinRL;			// instruction for TristatePin R_H
    34e4:	18 85       	ldd	r17, Y+8	; 0x08
    34e6:	11 0f       	add	r17, r17

000034e8 <.Loc.196>:
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+599)) {
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
    34e8:	f1 2f       	mov	r31, r17
    34ea:	f6 29       	or	r31, r6
    34ec:	fd 8b       	std	Y+21, r31	; 0x15

000034ee <.Loc.198>:
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
    34ee:	09 89       	ldd	r16, Y+17	; 0x11
    34f0:	01 2b       	or	r16, r17

000034f2 <.Loc.199>:
  if((adc.vCEs > 115)  && ((adc.vCEs+adc.vCEs+20) > adc.lp_otr))
    34f2:	2e 85       	ldd	r18, Y+14	; 0x0e
    34f4:	3f 85       	ldd	r19, Y+15	; 0x0f
    34f6:	24 37       	cpi	r18, 0x74	; 116
    34f8:	31 05       	cpc	r19, r1
    34fa:	08 f4       	brcc	.+2      	; 0x34fe <.Loc.200>

000034fc <L0^A>:
    34fc:	5a c2       	rjmp	.+1204   	; 0x39b2 <.L12>

000034fe <.Loc.200>:
    34fe:	c9 01       	movw	r24, r18
    3500:	0a 96       	adiw	r24, 0x0a	; 10
    3502:	88 0f       	add	r24, r24
    3504:	99 1f       	adc	r25, r25

00003506 <.Loc.201>:
    3506:	28 16       	cp	r2, r24
    3508:	39 06       	cpc	r3, r25
    350a:	08 f0       	brcs	.+2      	; 0x350e <.Loc.202>

0000350c <L0^A>:
    350c:	52 c2       	rjmp	.+1188   	; 0x39b2 <.L12>

0000350e <.Loc.202>:
     ADC_DDR = HiADCm;		//High-Pin to output
    350e:	3e 89       	ldd	r19, Y+22	; 0x16
    3510:	37 b9       	out	0x07, r19	; 7

00003512 <.LVL58>:
     ADC_PORT = HiADCp;		//High-Pin fix to Vcc
    3512:	38 b9       	out	0x08, r19	; 8

00003514 <.Loc.206>:
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
    3514:	04 b9       	out	0x04, r16	; 4

00003516 <.Loc.208>:
     adc.lp1 = W10msReadADC(LowPin);	//measure voltage at the assumed Source 
    3516:	8a 81       	ldd	r24, Y+2	; 0x02
    3518:	0e 94 f5 07 	call	0xfea	; 0xfea <W10msReadADC>

0000351c <.LVL59>:
    351c:	7c 01       	movw	r14, r24

0000351e <.LVL60>:
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
    351e:	8b 81       	ldd	r24, Y+3	; 0x03
    3520:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00003524 <.LVL61>:
    3524:	d8 2e       	mov	r13, r24
    3526:	09 2f       	mov	r16, r25

00003528 <.LVL62>:
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
    3528:	15 b9       	out	0x05, r17	; 5

0000352a <.Loc.214>:
     adc.lp2 = W10msReadADC(LowPin);	//measure voltage at the assumed Source again
    352a:	8a 81       	ldd	r24, Y+2	; 0x02
    352c:	0e 94 f5 07 	call	0xfea	; 0xfea <W10msReadADC>

00003530 <.LVL63>:
     if(adc.lp2>(adc.lp1+599)) {
    3530:	97 01       	movw	r18, r14
    3532:	29 5a       	subi	r18, 0xA9	; 169
    3534:	3d 4f       	sbci	r19, 0xFD	; 253

00003536 <.Loc.218>:
        ADC_PORT = TXD_VAL;
    3536:	18 b8       	out	0x08, r1	; 8

00003538 <.Loc.219>:
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
    3538:	77 b8       	out	0x07, r7	; 7

0000353a <.Loc.221>:
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
    353a:	4d 89       	ldd	r20, Y+21	; 0x15
    353c:	44 b9       	out	0x04, r20	; 4

0000353e <.Loc.223>:
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
    353e:	45 b9       	out	0x05, r20	; 5

00003540 <.Loc.225>:
     if(adc.lp2>(adc.lp1+599)) {
    3540:	28 17       	cp	r18, r24
    3542:	39 07       	cpc	r19, r25
    3544:	08 f0       	brcs	.+2      	; 0x3548 <.Loc.226>

00003546 <L0^A>:
    3546:	ae c0       	rjmp	.+348    	; 0x36a4 <.L13>

00003548 <.Loc.226>:
        adc.lp2 = W10msReadADC(TristatePin); //read voltage of assumed Gate 
    3548:	8b 81       	ldd	r24, Y+3	; 0x03

0000354a <.LVL64>:
    354a:	0e 94 f5 07 	call	0xfea	; 0xfea <W10msReadADC>

0000354e <.LVL65>:
#if DebugOut == 5
        lcd_data('N');
#endif
        if(adc.lp2>3911) {  //MOSFET
    354e:	88 34       	cpi	r24, 0x48	; 72
    3550:	9f 40       	sbci	r25, 0x0F	; 15
    3552:	08 f0       	brcs	.+2      	; 0x3556 <L0^A+0x2>

00003554 <L0^A>:
    3554:	6d c0       	rjmp	.+218    	; 0x3630 <.L71>
    3556:	84 e2       	ldi	r24, 0x24	; 36

00003558 <.L14>:
           PartFound = PART_FET;	//N-Kanal-MOSFET
    3558:	95 e0       	ldi	r25, 0x05	; 5
    355a:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <PartFound>

0000355e <.Loc.233>:
           PartMode = PART_MODE_MOS|N_CHANNEL|D_MODE; //Depletion-MOSFET
    355e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <PartMode>

00003562 <.Loc.234>:
#if DebugOut == 5
        lcd_space();
#endif
//      if ((PartReady == 0) || (adc.lp1 > ntrans.uBE)) 
//      there is no way to find out the right Source / Drain
        ntrans.uBE = adc.lp1;
    3562:	f0 92 69 01 	sts	0x0169, r15	; 0x800169 <ntrans+0x5>
    3566:	e0 92 68 01 	sts	0x0168, r14	; 0x800168 <ntrans+0x4>

0000356a <.Loc.236>:
        ntrans.gthvoltage = unsigned_diff(adc.lp1, adc.tp1);	//voltage GS (Source - Gate)
    356a:	6d 2d       	mov	r22, r13
    356c:	70 2f       	mov	r23, r16
    356e:	c7 01       	movw	r24, r14
    3570:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

00003574 <.LVL67>:
    3574:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <ntrans+0xb>
    3578:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <ntrans+0xa>

0000357c <.Loc.239>:
        ntrans.current = (unsigned int)(((unsigned long)adc.lp1 * 10000) / RR680MI); // Id 1uA
    357c:	97 01       	movw	r18, r14
    357e:	a0 e1       	ldi	r26, 0x10	; 16
    3580:	b7 e2       	ldi	r27, 0x27	; 39
    3582:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

00003586 <.Loc.241>:
    3586:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <resis680mi>
    358a:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <resis680mi+0x1>
    358e:	40 e0       	ldi	r20, 0x00	; 0
    3590:	50 e0       	ldi	r21, 0x00	; 0
    3592:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00003596 <.Loc.242>:
    3596:	30 93 6b 01 	sts	0x016B, r19	; 0x80016b <ntrans+0x7>
    359a:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <ntrans+0x6>

0000359e <.Loc.243>:
#ifdef SHOW_ICE
 // Test for cutoff Voltage, idea from Pieter-Tjerk
        R_DDR = LoPinRH | TriPinRH;
    359e:	8c 89       	ldd	r24, Y+20	; 0x14
    35a0:	81 2b       	or	r24, r17
    35a2:	84 b9       	out	0x04, r24	; 4

000035a4 <.Loc.245>:
	R_PORT = 0;			// Low + Tristate Pin with 470k to 0V
    35a4:	15 b8       	out	0x05, r1	; 5

000035a6 <.Loc.247>:
	ADC_DDR = HiADCm;
    35a6:	fe 89       	ldd	r31, Y+22	; 0x16
    35a8:	f7 b9       	out	0x07, r31	; 7

000035aa <.Loc.249>:
	ADC_PORT = HiADCp;		// High Pin to VCC
    35aa:	f8 b9       	out	0x08, r31	; 8

000035ac <.Loc.251>:
	ntrans.ice0 = unsigned_diff(W10msReadADC(LowPin), ReadADC(TristatePin)); // Gate-Source Voltage
    35ac:	8b 81       	ldd	r24, Y+3	; 0x03
    35ae:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

000035b2 <.LVL68>:
    35b2:	f8 2e       	mov	r15, r24
    35b4:	09 2f       	mov	r16, r25

000035b6 <.LVL69>:
    35b6:	8a 81       	ldd	r24, Y+2	; 0x02
    35b8:	0e 94 f5 07 	call	0xfea	; 0xfea <W10msReadADC>

000035bc <.LVL70>:
    35bc:	6f 2d       	mov	r22, r15
    35be:	70 2f       	mov	r23, r16
    35c0:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

000035c4 <.LVL71>:
    35c4:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <ntrans+0x8>
    35c8:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <ntrans+0x9>

000035cc <.Loc.256>:
    lcd_line4();
    lcd_data('N');
    lcd_data('j');
    lcd_space();
  #endif
    if ((PartMode&0x0f) == PART_MODE_JFET)
    35cc:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <PartMode>
    35d0:	2f 70       	andi	r18, 0x0F	; 15
    35d2:	24 30       	cpi	r18, 0x04	; 4
    35d4:	79 f1       	breq	.+94     	; 0x3634 <.L15>

000035d6 <.L18>:
         {
            // For depletion MOSFET we try to put the Gate to the same level as Source.
            // The source level is higher than 0V because of the Port output resistance and current.
            // When the Drain-Source resistance is low, we can get nearly the same voltage increase
            // at the Gate with current from the 680 Ohm Port (RL).
            ADC_PORT = TXD_VAL;
    35d6:	18 b8       	out	0x08, r1	; 8

000035d8 <.Loc.260>:
            ADC_DDR = LoADCm | TriADCp;	//Low-Pin and Tristate-Pin fix to GND
    35d8:	b7 28       	or	r11, r7

000035da <.LVL73>:
    35da:	b7 b8       	out	0x07, r11	; 7

000035dc <.Loc.263>:
//            R_DDR = TriPinRL | HiPinRL;	// L-Resistor High-Pin and Tristate-Pin to output
            R_DDR =  HiPinRL;	// L-Resistor High-Pin and Tristate-Pin to output
    35dc:	64 b8       	out	0x04, r6	; 4

000035de <.Loc.265>:
            R_PORT = TriPinRL | HiPinRL;	//switch R_L for High-Pin and Tristate-Pin to VCC
    35de:	29 85       	ldd	r18, Y+9	; 0x09
    35e0:	25 b9       	out	0x05, r18	; 5

000035e2 <.Loc.267>:
            adc.hp2 = W5msReadADC(HighPin);	//measure the voltage at the Drain  
    35e2:	89 81       	ldd	r24, Y+1	; 0x01
    35e4:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

000035e8 <.LVL74>:
    35e8:	f8 2e       	mov	r15, r24
    35ea:	9c 83       	std	Y+4, r25	; 0x04

000035ec <.LVL75>:
            adc.rhp = vcc_diff(adc.hp2);	// voltage at the Drain resistor
    35ec:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vcc_diff>

000035f0 <.LVL76>:
    35f0:	8c 01       	movw	r16, r24

000035f2 <.LVL77>:
            adc.lp2 = ReadADC(LowPin);		// voltage at the Source 
    35f2:	8a 81       	ldd	r24, Y+2	; 0x02
    35f4:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

000035f8 <.LVL78>:
    35f8:	bc 01       	movw	r22, r24

000035fa <.LVL79>:
            ntrans.uBE = RR680PL * (unsigned long)unsigned_diff(adc.hp2, adc.lp2) / adc.rhp; // DS resistance in 0.1 OHm
    35fa:	c0 90 1b 01 	lds	r12, 0x011B	; 0x80011b <resis680pl>
    35fe:	d0 90 1c 01 	lds	r13, 0x011C	; 0x80011c <resis680pl+0x1>

00003602 <.Loc.276>:
    3602:	8f 2d       	mov	r24, r15
    3604:	9c 81       	ldd	r25, Y+4	; 0x04
    3606:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

0000360a <.LVL80>:
    360a:	96 01       	movw	r18, r12
    360c:	dc 01       	movw	r26, r24
    360e:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

00003612 <.Loc.278>:
    3612:	98 01       	movw	r18, r16
    3614:	40 e0       	ldi	r20, 0x00	; 0
    3616:	50 e0       	ldi	r21, 0x00	; 0

00003618 <.Loc.279>:
    3618:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

0000361c <.Loc.280>:
    361c:	30 93 69 01 	sts	0x0169, r19	; 0x800169 <ntrans+0x5>
    3620:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <ntrans+0x4>

00003624 <.L114>:
            while (ADCSRA&(1<<ADSC));	// wait until ADC finished
            tmp16 += ADCW;		// add result of ADC
         }
         tmp16 *= 4;	//is equal to 44 * ADCW
         ntrans.gthvoltage = tmp16/ 9;	//scale to mV
         ntrans.count++;		// count FET as two to accelerate  searching
    3624:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <ntrans+0xf>
    3628:	8f 5f       	subi	r24, 0xFF	; 255
    362a:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <ntrans+0xf>

0000362e <.Loc.283>:
         goto saveNresult;
    362e:	2a c4       	rjmp	.+2132   	; 0x3e84 <.L19>

00003630 <.L71>:
    3630:	82 e2       	ldi	r24, 0x22	; 34

00003632 <.LVL83>:
    3632:	92 cf       	rjmp	.-220    	; 0x3558 <.L14>

00003634 <.L15>:
           i16 = expand_FET_quadratic(ntrans.ice0,ntrans.gthvoltage,ntrans.current);
    3634:	40 91 6a 01 	lds	r20, 0x016A	; 0x80016a <ntrans+0x6>
    3638:	50 91 6b 01 	lds	r21, 0x016B	; 0x80016b <ntrans+0x7>
    363c:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <ntrans+0xa>
    3640:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <ntrans+0xb>
    3644:	9b de       	rcall	.-714    	; 0x337c <expand_FET_quadratic>

00003646 <.LVL85>:
    3646:	9c 01       	movw	r18, r24

00003648 <.LVL86>:
           if (i16 != 0) {
    3648:	89 2b       	or	r24, r25
    364a:	09 f1       	breq	.+66     	; 0x368e <.L17>

0000364c <.Loc.291>:
               R_DDR = TriPinRH;	// gate to ground via RH
    364c:	14 b9       	out	0x04, r17	; 4

0000364e <.Loc.293>:
               ADC_DDR = HiADCm|LoADCp;
    364e:	3e 89       	ldd	r19, Y+22	; 0x16
    3650:	37 29       	or	r19, r7
    3652:	37 b9       	out	0x07, r19	; 7

00003654 <.Loc.295>:
               adc.lp2 = W10msReadADC(LowPin);	//measure voltage at the Source; this is the voltage drop across the pin's ~20 ohm internal resistance!
    3654:	8a 81       	ldd	r24, Y+2	; 0x02
    3656:	0e 94 f5 07 	call	0xfea	; 0xfea <W10msReadADC>

0000365a <.LVL87>:
    365a:	18 2f       	mov	r17, r24
    365c:	9c 83       	std	Y+4, r25	; 0x04

0000365e <.LVL88>:
               ADC_DDR = TXD_MSK;             // disconnect drain and source immediately after measurement, since quite a lot of current may flow
    365e:	17 b8       	out	0x07, r1	; 7

00003660 <.Loc.300>:
               i16 = (unsigned int)(((unsigned long)adc.lp2 * 10000) / RRpinMI); // Idss 1uA
    3660:	28 2f       	mov	r18, r24
    3662:	3c 81       	ldd	r19, Y+4	; 0x04
    3664:	a0 e1       	ldi	r26, 0x10	; 16
    3666:	b7 e2       	ldi	r27, 0x27	; 39
    3668:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

0000366c <.Loc.302>:
    366c:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <pin_rmi>
    3670:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <pin_rmi+0x1>
    3674:	40 e0       	ldi	r20, 0x00	; 0
    3676:	50 e0       	ldi	r21, 0x00	; 0
    3678:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

0000367c <.LVL89>:
               i16 = expand_FET_quadratic(ntrans.ice0,adc.lp2,i16);
    367c:	a9 01       	movw	r20, r18
    367e:	61 2f       	mov	r22, r17
    3680:	7c 81       	ldd	r23, Y+4	; 0x04
    3682:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <ntrans+0x8>
    3686:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <ntrans+0x9>
    368a:	78 de       	rcall	.-784    	; 0x337c <expand_FET_quadratic>

0000368c <.LVL90>:
    368c:	9c 01       	movw	r18, r24

0000368e <.L17>:
           ntrans.uBE = i16;
    368e:	30 93 69 01 	sts	0x0169, r19	; 0x800169 <ntrans+0x5>
    3692:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <ntrans+0x4>

00003696 <.LBE12>:
    if ((PartMode&0x0f) != PART_MODE_JFET)
    3696:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <PartMode>
    369a:	8f 70       	andi	r24, 0x0F	; 15
    369c:	84 30       	cpi	r24, 0x04	; 4
    369e:	09 f4       	brne	.+2      	; 0x36a2 <.Loc.310>

000036a0 <L0^A>:
    36a0:	c1 cf       	rjmp	.-126    	; 0x3624 <.L114>

000036a2 <.Loc.310>:
    36a2:	99 cf       	rjmp	.-206    	; 0x35d6 <.L18>

000036a4 <.L13>:
     adc.hp1 = W10msReadADC(HighPin);	//measure voltage at assumed Source 
    36a4:	89 81       	ldd	r24, Y+1	; 0x01

000036a6 <.LVL93>:
    36a6:	0e 94 f5 07 	call	0xfea	; 0xfea <W10msReadADC>

000036aa <.LVL94>:
    36aa:	7c 01       	movw	r14, r24

000036ac <.LVL95>:
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
    36ac:	8b 81       	ldd	r24, Y+3	; 0x03
    36ae:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

000036b2 <.LVL96>:
    36b2:	d8 2e       	mov	r13, r24

000036b4 <.LVL97>:
    36b4:	09 2f       	mov	r16, r25

000036b6 <.LVL98>:
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
    36b6:	65 b8       	out	0x05, r6	; 5

000036b8 <.Loc.320>:
     adc.hp2 = W10msReadADC(HighPin);	//read voltage at assumed Source again
    36b8:	89 81       	ldd	r24, Y+1	; 0x01
    36ba:	0e 94 f5 07 	call	0xfea	; 0xfea <W10msReadADC>

000036be <.LVL99>:
     if(adc.hp1>(adc.hp2+599)) {
    36be:	89 5a       	subi	r24, 0xA9	; 169
    36c0:	9d 4f       	sbci	r25, 0xFD	; 253

000036c2 <.LVL100>:
    36c2:	8e 15       	cp	r24, r14
    36c4:	9f 05       	cpc	r25, r15
    36c6:	08 f4       	brcc	.+2      	; 0x36ca <.L11>

000036c8 <L0^A>:
    36c8:	c5 c0       	rjmp	.+394    	; 0x3854 <.L20>

000036ca <.L11>:
         tmp16 = 1;			// round up ((1*4)/9)
    36ca:	61 01       	movw	r12, r2

000036cc <.L8>:

//##########################################################################################
// Search for diodes
//##########################################################################################
checkDiode:
  R_DDR = 0;			//switch off resistor current
    36cc:	14 b8       	out	0x04, r1	; 4

000036ce <.Loc.328>:
  R_PORT = 0;
    36ce:	15 b8       	out	0x05, r1	; 5

000036d0 <.Loc.330>:
  ADC_DDR = TXD_MSK;		// switch ADC ports to input
    36d0:	17 b8       	out	0x07, r1	; 7

000036d2 <.Loc.332>:
//  if (adc.lp_otr < 977) 
  if (adc.lp_otr < 455) {
    36d2:	e7 ec       	ldi	r30, 0xC7	; 199
    36d4:	ce 16       	cp	r12, r30
    36d6:	e1 e0       	ldi	r30, 0x01	; 1
    36d8:	de 06       	cpc	r13, r30
    36da:	08 f4       	brcc	.+2      	; 0x36de <.Loc.334>

000036dc <L0^A>:
    36dc:	5d c5       	rjmp	.+2746   	; 0x4198 <.L59>

000036de <.Loc.334>:
#endif
     goto widmes;
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
    36de:	18 b8       	out	0x08, r1	; 8

000036e0 <.Loc.336>:
  R_DDR = HiPinRH;              // enable resistor from HiPin to ground during the upcoming discharge, so if there's some leakage in the circuit (e.g., via protection diodes) this can't upset the discharge test
    36e0:	f8 89       	ldd	r31, Y+16	; 0x10
    36e2:	f4 b9       	out	0x04, r31	; 4

000036e4 <.LVL103>:
    36e4:	18 ec       	ldi	r17, 0xC8	; 200

000036e6 <.Loc.341>:
  for (ii=0;ii<200;ii++) {
     ADC_DDR = LoADCm | HiADCm; // discharge by short of Low and High side
    36e6:	0e 89       	ldd	r16, Y+22	; 0x16
    36e8:	07 29       	or	r16, r7

000036ea <.L61>:
    36ea:	07 b9       	out	0x07, r16	; 7

000036ec <.Loc.344>:
     wait_about5ms();		// Low and Highpin to GND for discharge
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	0e 94 c5 07 	call	0xf8a	; 0xf8a <sleep_5ms>

000036f2 <.LVL105>:
     ADC_DDR = LoADCm;		// switch only Low-Pin fix to GND
    36f2:	77 b8       	out	0x07, r7	; 7

000036f4 <.Loc.347>:
     adc.hp1 = ReadADC(HighPin); // read voltage at High-Pin
    36f4:	89 81       	ldd	r24, Y+1	; 0x01
    36f6:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

000036fa <.LVL106>:
     if (adc.hp1 < (150/8)) break;
    36fa:	42 97       	sbiw	r24, 0x12	; 18
    36fc:	10 f0       	brcs	.+4      	; 0x3702 <.L60>

000036fe <.LVL107>:
  for (ii=0;ii<200;ii++) {
    36fe:	1a 95       	dec	r17

00003700 <.LVL108>:
    3700:	a1 f7       	brne	.-24     	; 0x36ea <.L61>

00003702 <.L60>:
 #if FLASHEND > 0x1fff
  /* It is difficult to detect the protection diode of D-mode MOSFET . */
  /* We have to generate a negative gate voltage to isolate the diode. */
  /* For P-mode the resistors must reside on the VCC side. */
  /* For N-mode the resistors must be moved to the GND side. */
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    3702:	28 89       	ldd	r18, Y+16	; 0x10
    3704:	24 b9       	out	0x04, r18	; 4

00003706 <.Loc.356>:
  R_PORT = HiPinRH;
    3706:	25 b9       	out	0x05, r18	; 5

00003708 <.Loc.358>:
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
    3708:	61 e0       	ldi	r22, 0x01	; 1
    370a:	88 85       	ldd	r24, Y+8	; 0x08

0000370c <.LVL110>:
    370c:	4b d7       	rcall	.+3734   	; 0x45a4 <ChargePin10ms>

0000370e <.LVL111>:
  adc.hp2 = W5msReadADC(HighPin); 		// GND--|<--HP--R_H--VCC
    370e:	89 81       	ldd	r24, Y+1	; 0x01
    3710:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00003714 <.LVL112>:
    3714:	5c 01       	movw	r10, r24

00003716 <.LVL113>:
  // now the resistor is moved to the Low side
  R_DDR = LoPinRH;
    3716:	3c 89       	ldd	r19, Y+20	; 0x14
    3718:	34 b9       	out	0x04, r19	; 4

0000371a <.Loc.364>:
  R_PORT = 0;
    371a:	15 b8       	out	0x05, r1	; 5

0000371c <.Loc.366>:
  ADC_DDR = HiADCm;		// switch High-Pin fix to VCC
    371c:	4e 89       	ldd	r20, Y+22	; 0x16
    371e:	47 b9       	out	0x07, r20	; 7

00003720 <.Loc.368>:
  ADC_PORT = HiADCp;
    3720:	48 b9       	out	0x08, r20	; 8

00003722 <.Loc.370>:
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    3722:	60 e0       	ldi	r22, 0x00	; 0
    3724:	88 85       	ldd	r24, Y+8	; 0x08
    3726:	3e d7       	rcall	.+3708   	; 0x45a4 <ChargePin10ms>

00003728 <.LVL114>:
  adc.hp3 = vcc_diff(W5msReadADC(LowPin)); // GND--R_H--LP--|<--VCC
    3728:	8a 81       	ldd	r24, Y+2	; 0x02
    372a:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

0000372e <.LVL115>:
    372e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vcc_diff>

00003732 <.LVL116>:
    3732:	8c 01       	movw	r16, r24

00003734 <.LVL117>:
  /* check with higher current (R_L=680) */
  R_DDR = LoPinRL;
    3734:	89 89       	ldd	r24, Y+17	; 0x11
    3736:	84 b9       	out	0x04, r24	; 4

00003738 <.Loc.376>:
  adc.hp1 = unsigned_diff(W5msReadADC(HighPin), ReadADC(LowPin)); // GND--R_L--LP--|<--VCC
    3738:	8a 81       	ldd	r24, Y+2	; 0x02
    373a:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

0000373e <.LVL118>:
    373e:	7c 01       	movw	r14, r24

00003740 <.Loc.378>:
    3740:	89 81       	ldd	r24, Y+1	; 0x01
    3742:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00003746 <.LVL119>:
    3746:	b7 01       	movw	r22, r14
    3748:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

0000374c <.LVL120>:
    374c:	7c 01       	movw	r14, r24

0000374e <.LVL121>:
  // test for capacitor behaviour
  adc.lp_otr = unsigned_diff(W5msReadADC(HighPin), ReadADC(LowPin)); // GND--R_L--LP--|<--VCC
    374e:	8a 81       	ldd	r24, Y+2	; 0x02
    3750:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00003754 <.LVL122>:
    3754:	6c 01       	movw	r12, r24

00003756 <.LVL123>:
    3756:	89 81       	ldd	r24, Y+1	; 0x01
    3758:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

0000375c <.LVL124>:
    375c:	b6 01       	movw	r22, r12
    375e:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

00003762 <.LVL125>:
     lcd_data('c');	// debug
     mVOut(adc.hp1);
     mVOut(adc.lp_otr);
#endif
 // if (adc.lp_otr > (adc.hp1+adc.hp1/8))
  if (adc.lp_otr > (adc.hp1+20))
    3762:	97 01       	movw	r18, r14
    3764:	2c 5e       	subi	r18, 0xEC	; 236
    3766:	3f 4f       	sbci	r19, 0xFF	; 255

00003768 <.Loc.386>:
    3768:	28 17       	cp	r18, r24
    376a:	39 07       	cpc	r19, r25
    376c:	08 f4       	brcc	.+2      	; 0x3770 <.Loc.387>

0000376e <L0^A>:
    376e:	67 c0       	rjmp	.+206    	; 0x383e <.L63>

00003770 <.Loc.387>:
     lcd_data('D');	// debug
#endif
     goto clean_ports;
  }
  //  the resistor is moved back to the High side
  ADC_PORT = TXD_VAL;
    3770:	18 b8       	out	0x08, r1	; 8

00003772 <.Loc.389>:
  ADC_DDR = LoADCm;		// switch only Low-Pin fix to GND
    3772:	77 b8       	out	0x07, r7	; 7

00003774 <.Loc.391>:
  R_DDR = HiPinRL;		//switch R_L port for High-Pin output (VCC)
    3774:	64 b8       	out	0x04, r6	; 4

00003776 <.Loc.393>:
  R_PORT = HiPinRL;
    3776:	65 b8       	out	0x05, r6	; 5

00003778 <.Loc.395>:
  ChargePin10ms(TriPinRL,1);	//discharge for P-Kanal-MOSFET gate
    3778:	61 e0       	ldi	r22, 0x01	; 1
    377a:	88 85       	ldd	r24, Y+8	; 0x08

0000377c <.LVL126>:
    377c:	13 d7       	rcall	.+3622   	; 0x45a4 <ChargePin10ms>

0000377e <.LVL127>:
  adc.lp_otr = unsigned_diff(W5msReadADC(HighPin), ReadADC(LowPin)); // GND--|<--HP--R_L--VCC
    377e:	8a 81       	ldd	r24, Y+2	; 0x02
    3780:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00003784 <.LVL128>:
    3784:	6c 01       	movw	r12, r24

00003786 <.Loc.399>:
    3786:	89 81       	ldd	r24, Y+1	; 0x01
    3788:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

0000378c <.LVL129>:
    378c:	b6 01       	movw	r22, r12
    378e:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

00003792 <.LVL130>:
    3792:	6c 01       	movw	r12, r24

00003794 <.LVL131>:
  if(adc.lp_otr > adc.hp1) {
    3794:	e8 16       	cp	r14, r24
    3796:	f9 06       	cpc	r15, r25
    3798:	08 f0       	brcs	.+2      	; 0x379c <.LVL132>

0000379a <L0^A>:
    379a:	e6 c4       	rjmp	.+2508   	; 0x4168 <.L64>

0000379c <.LVL132>:
      adc.hp1 = adc.lp_otr;	//the higher value wins
      adc.hp3 = adc.hp2;
      R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    379c:	98 89       	ldd	r25, Y+16	; 0x10
    379e:	94 b9       	out	0x04, r25	; 4

000037a0 <.Loc.407>:
      R_PORT = HiPinRH;
    37a0:	95 b9       	out	0x05, r25	; 5

000037a2 <.Loc.409>:
      adc.hp2 = W5msReadADC(HighPin); 		// GND--|<--HP--R_H--VCC
    37a2:	89 81       	ldd	r24, Y+1	; 0x01
    37a4:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

000037a8 <.LVL133>:
    37a8:	9c 01       	movw	r18, r24

000037aa <.LVL134>:
      adc.hp3 = adc.hp2;
    37aa:	85 01       	movw	r16, r10

000037ac <.L65>:
  mVOut(adc.hp1);
  lcd_data('H');	// debug
  mVOut(adc.hp2);
#endif
  volt_dif = adc.hp3/8;
  if (volt_dif > 200) volt_dif = 200;
    37ac:	e8 ec       	ldi	r30, 0xC8	; 200
    37ae:	f0 e0       	ldi	r31, 0x00	; 0

000037b0 <.Loc.415>:
    37b0:	08 34       	cpi	r16, 0x48	; 72
    37b2:	46 e0       	ldi	r20, 0x06	; 6
    37b4:	14 07       	cpc	r17, r20
    37b6:	30 f4       	brcc	.+12     	; 0x37c4 <.L66>

000037b8 <.Loc.416>:
  volt_dif = adc.hp3/8;
    37b8:	f8 01       	movw	r30, r16
    37ba:	43 e0       	ldi	r20, 0x03	; 3

000037bc <.L1^B2>:
    37bc:	f6 95       	lsr	r31
    37be:	e7 95       	ror	r30
    37c0:	4a 95       	dec	r20
    37c2:	e1 f7       	brne	.-8      	; 0x37bc <.L1^B2>

000037c4 <.L66>:
  if (adc.hp1 < 1000) tmp16 = adc.hp1/100;
    37c4:	88 ee       	ldi	r24, 0xE8	; 232
    37c6:	c8 16       	cp	r12, r24
    37c8:	83 e0       	ldi	r24, 0x03	; 3
    37ca:	d8 06       	cpc	r13, r24
    37cc:	08 f0       	brcs	.+2      	; 0x37d0 <.Loc.419>

000037ce <L0^A>:
    37ce:	dd c4       	rjmp	.+2490   	; 0x418a <.L67>

000037d0 <.Loc.419>:
    37d0:	c6 01       	movw	r24, r12
    37d2:	64 e6       	ldi	r22, 0x64	; 100
    37d4:	70 e0       	ldi	r23, 0x00	; 0
    37d6:	0e 94 00 38 	call	0x7000	; 0x7000 <__udivmodhi4>

000037da <.L68>:
  else                tmp16 = adc.hp1/16;

  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp2 < adc.hp1) && (adc.hp1 > (adc.hp3+volt_dif)) && (adc.hp3 > tmp16))
    37da:	c6 01       	movw	r24, r12
    37dc:	87 59       	subi	r24, 0x97	; 151
    37de:	91 09       	sbc	r25, r1

000037e0 <.Loc.423>:
    37e0:	89 38       	cpi	r24, 0x89	; 137
    37e2:	91 41       	sbci	r25, 0x11	; 17
    37e4:	08 f0       	brcs	.+2      	; 0x37e8 <.Loc.424>

000037e6 <L0^A>:
    37e6:	d8 c4       	rjmp	.+2480   	; 0x4198 <.L59>

000037e8 <.Loc.424>:
    37e8:	2c 15       	cp	r18, r12
    37ea:	3d 05       	cpc	r19, r13
    37ec:	08 f0       	brcs	.+2      	; 0x37f0 <.Loc.425>

000037ee <L0^A>:
    37ee:	d4 c4       	rjmp	.+2472   	; 0x4198 <.L59>

000037f0 <.Loc.425>:
    37f0:	c8 01       	movw	r24, r16
    37f2:	8e 0f       	add	r24, r30
    37f4:	9f 1f       	adc	r25, r31

000037f6 <.Loc.426>:
    37f6:	8c 15       	cp	r24, r12
    37f8:	9d 05       	cpc	r25, r13
    37fa:	08 f0       	brcs	.+2      	; 0x37fe <.Loc.427>

000037fc <L0^A>:
    37fc:	cd c4       	rjmp	.+2458   	; 0x4198 <.L59>

000037fe <.Loc.427>:
    37fe:	60 17       	cp	r22, r16
    3800:	71 07       	cpc	r23, r17
    3802:	08 f0       	brcs	.+2      	; 0x3806 <.Loc.428>

00003804 <L0^A>:
    3804:	c9 c4       	rjmp	.+2450   	; 0x4198 <.L59>

00003806 <.Loc.428>:
     {
     //voltage is above 0,15V and below 4,64V => Ok
     // hp2 >= hp1 is only possible with capacitor, not with a diode, hp2 is measured with 470k
     // (adc.hp3 > adc.hp1/16) was OK for most cases, but not for gate of a TRIAC (where adc.hp1/100 detect the diode)
     // for resistors the expected value is about adc.hp1/670, so adc.hp1/100 should also be OK to differ with resistor
     if(PartFound < PART_DIODE) {
    3806:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <PartFound>
    380a:	83 30       	cpi	r24, 0x03	; 3
    380c:	18 f4       	brcc	.+6      	; 0x3814 <.L69>

0000380e <.Loc.430>:
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
    380e:	83 e0       	ldi	r24, 0x03	; 3
    3810:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>

00003814 <.L69>:
        lcd_data('D');	// debug  for Diode found
     } else {
        lcd_data('d');  // debug  for Diode, but other part
#endif
     }
     diodes.Anode[NumOfDiodes] = HighPin;
    3814:	20 91 85 01 	lds	r18, 0x0185	; 0x800185 <NumOfDiodes>

00003818 <.LVL138>:
    3818:	82 2f       	mov	r24, r18
    381a:	90 e0       	ldi	r25, 0x00	; 0

0000381c <.Loc.435>:
    381c:	fc 01       	movw	r30, r24

0000381e <.LVL139>:
    381e:	ea 57       	subi	r30, 0x7A	; 122
    3820:	fe 4f       	sbci	r31, 0xFE	; 254
    3822:	39 81       	ldd	r19, Y+1	; 0x01
    3824:	30 83       	st	Z, r19

00003826 <.Loc.437>:
     diodes.Cathode[NumOfDiodes] = LowPin;
    3826:	4a 81       	ldd	r20, Y+2	; 0x02
    3828:	46 83       	std	Z+6, r20	; 0x06

0000382a <.Loc.439>:
     diodes.Voltage[NumOfDiodes] = adc.hp1;	// voltage in Millivolt 
    382a:	fc 01       	movw	r30, r24
    382c:	ee 0f       	add	r30, r30
    382e:	ff 1f       	adc	r31, r31
    3830:	ee 56       	subi	r30, 0x6E	; 110
    3832:	fe 4f       	sbci	r31, 0xFE	; 254
    3834:	d1 82       	std	Z+1, r13	; 0x01
    3836:	c0 82       	st	Z, r12

00003838 <.Loc.441>:
     NumOfDiodes++;
    3838:	2f 5f       	subi	r18, 0xFF	; 255
    383a:	20 93 85 01 	sts	0x0185, r18	; 0x800185 <NumOfDiodes>

0000383e <.L63>:
#ifdef DebugOut
 #if DebugOut < 10
//  wait_for_key_5s_line2();
 #endif
#endif
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
    383e:	17 b8       	out	0x07, r1	; 7

00003840 <.Loc.446>:
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
    3840:	18 b8       	out	0x08, r1	; 8

00003842 <.Loc.448>:
  R_DDR = 0;			// all resistor-outputs to Input
    3842:	14 b8       	out	0x04, r1	; 4

00003844 <.Loc.450>:
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
    3844:	15 b8       	out	0x05, r1	; 5

00003846 <.Loc.452>:
  lcd_data('.');		// report advance (suggested by Pieter-Tjerk)
    3846:	8e e2       	ldi	r24, 0x2E	; 46
    3848:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

0000384c <.LVL141>:
    ntrans.c = HighPin;
    ntrans.e = LowPin;
 }
 goto clean_ports;

} // end CheckPins()
    384c:	66 96       	adiw	r28, 0x16	; 22
    384e:	e2 e1       	ldi	r30, 0x12	; 18
    3850:	0c 94 a6 38 	jmp	0x714c	; 0x714c <__epilogue_restores__>

00003854 <.L20>:
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
    3854:	8e 89       	ldd	r24, Y+22	; 0x16

00003856 <.LVL143>:
    3856:	88 b9       	out	0x08, r24	; 8

00003858 <.Loc.459>:
        ADC_DDR = HiADCm;	//switch High-Pin to output
    3858:	87 b9       	out	0x07, r24	; 7

0000385a <.Loc.461>:
        adc.tp2 = W10msReadADC(TristatePin); //read voltage at the assumed Gate 
    385a:	8b 81       	ldd	r24, Y+3	; 0x03
    385c:	0e 94 f5 07 	call	0xfea	; 0xfea <W10msReadADC>

00003860 <.LVL144>:
        if(adc.tp2<977) { 		//MOSFET
    3860:	81 3d       	cpi	r24, 0xD1	; 209
    3862:	93 40       	sbci	r25, 0x03	; 3
    3864:	08 f4       	brcc	.+2      	; 0x3868 <L0^A+0x2>

00003866 <L0^A>:
    3866:	6a c0       	rjmp	.+212    	; 0x393c <.L72>
    3868:	84 e3       	ldi	r24, 0x34	; 52

0000386a <.L21>:
           PartFound = PART_FET;	//P-Kanal-MOSFET
    386a:	95 e0       	ldi	r25, 0x05	; 5
    386c:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <PartFound>

00003870 <.Loc.466>:
           PartMode = PART_MODE_MOS|P_CHANNEL|D_MODE; //Depletion-MOSFET
    3870:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <PartMode>

00003874 <.Loc.467>:
        ptrans.gthvoltage = unsigned_diff(adc.tp1, adc.hp1);	//voltage GS (Gate - Source)
    3874:	b7 01       	movw	r22, r14
    3876:	8d 2d       	mov	r24, r13
    3878:	90 2f       	mov	r25, r16
    387a:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

0000387e <.LVL146>:
    387e:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <ptrans+0xb>
    3882:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <ptrans+0xa>

00003886 <.Loc.470>:
        ptrans.current = (unsigned int)(((unsigned long)vcc_diff(adc.hp1) * 10000) / RR680PL); // Id 1uA
    3886:	c7 01       	movw	r24, r14
    3888:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vcc_diff>

0000388c <.LVL147>:
    388c:	9c 01       	movw	r18, r24
    388e:	a0 e1       	ldi	r26, 0x10	; 16
    3890:	b7 e2       	ldi	r27, 0x27	; 39
    3892:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

00003896 <.Loc.473>:
    3896:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <resis680pl>
    389a:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <resis680pl+0x1>
    389e:	40 e0       	ldi	r20, 0x00	; 0
    38a0:	50 e0       	ldi	r21, 0x00	; 0
    38a2:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

000038a6 <.Loc.474>:
    38a6:	30 93 7b 01 	sts	0x017B, r19	; 0x80017b <ptrans+0x7>
    38aa:	20 93 7a 01 	sts	0x017A, r18	; 0x80017a <ptrans+0x6>

000038ae <.Loc.475>:
        ADC_PORT = TXD_VAL;		// direct outputs to GND
    38ae:	18 b8       	out	0x08, r1	; 8

000038b0 <.Loc.477>:
        ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
    38b0:	77 b8       	out	0x07, r7	; 7

000038b2 <.Loc.479>:
        R_DDR = TriPinRH | HiPinRH;	//High-Pin to output
    38b2:	88 89       	ldd	r24, Y+16	; 0x10
    38b4:	81 2b       	or	r24, r17
    38b6:	84 b9       	out	0x04, r24	; 4

000038b8 <.Loc.481>:
        R_PORT = TriPinRH | HiPinRH;	//High-Pin and Tristate-Pin across R_H to Vcc
    38b8:	85 b9       	out	0x05, r24	; 5

000038ba <.Loc.483>:
        ptrans.ice0 = unsigned_diff(W10msReadADC(TristatePin), ReadADC(HighPin));	//measure voltage at assumed Source 
    38ba:	89 81       	ldd	r24, Y+1	; 0x01
    38bc:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

000038c0 <.LVL148>:
    38c0:	f8 2e       	mov	r15, r24
    38c2:	09 2f       	mov	r16, r25

000038c4 <.LVL149>:
    38c4:	8b 81       	ldd	r24, Y+3	; 0x03
    38c6:	0e 94 f5 07 	call	0xfea	; 0xfea <W10msReadADC>

000038ca <.LVL150>:
    38ca:	6f 2d       	mov	r22, r15
    38cc:	70 2f       	mov	r23, r16
    38ce:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

000038d2 <.LVL151>:
    38d2:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <ptrans+0x8>
    38d6:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <ptrans+0x9>

000038da <.Loc.488>:
        if ((PartMode&0x0f) == PART_MODE_JFET) 
    38da:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <PartMode>
    38de:	2f 70       	andi	r18, 0x0F	; 15
    38e0:	24 30       	cpi	r18, 0x04	; 4
    38e2:	71 f1       	breq	.+92     	; 0x3940 <.L22>

000038e4 <.L25>:
            ADC_PORT = HiADCp | TriADCp;	//switch High-Pin and Tristate-Pin to VCC
    38e4:	fe 89       	ldd	r31, Y+22	; 0x16
    38e6:	bf 2a       	or	r11, r31

000038e8 <.LVL153>:
    38e8:	b8 b8       	out	0x08, r11	; 8

000038ea <.Loc.493>:
            ADC_DDR = HiADCm | TriADCp;		//switch High-Pin and Tristate-Pin to output
    38ea:	b7 b8       	out	0x07, r11	; 7

000038ec <.Loc.495>:
            R_PORT = 0;			// switch R-Ports to 0
    38ec:	15 b8       	out	0x05, r1	; 5

000038ee <.Loc.497>:
            R_DDR = TriPinRL | HiPinRL;	// L-Resistor High-Pin and Tristate-Pin to output
    38ee:	29 85       	ldd	r18, Y+9	; 0x09
    38f0:	24 b9       	out	0x04, r18	; 4

000038f2 <.Loc.499>:
            adc.hp2 = W5msReadADC(HighPin);	//measure the voltage at the Source  
    38f2:	89 81       	ldd	r24, Y+1	; 0x01
    38f4:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

000038f8 <.LVL154>:
    38f8:	f8 2e       	mov	r15, r24
    38fa:	9c 83       	std	Y+4, r25	; 0x04

000038fc <.LVL155>:
            adc.lp1 = ReadADC(LowPin);		// voltage at the Drain 
    38fc:	8a 81       	ldd	r24, Y+2	; 0x02
    38fe:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00003902 <.LVL156>:
    3902:	8c 01       	movw	r16, r24

00003904 <.LVL157>:
            ptrans.uBE = RR680MI * (unsigned long)unsigned_diff(adc.hp2, adc.lp1) / adc.lp1; // DS resistance in 0.1 OHm
    3904:	c0 90 19 01 	lds	r12, 0x0119	; 0x800119 <resis680mi>
    3908:	d0 90 1a 01 	lds	r13, 0x011A	; 0x80011a <resis680mi+0x1>

0000390c <.Loc.506>:
    390c:	bc 01       	movw	r22, r24
    390e:	8f 2d       	mov	r24, r15
    3910:	9c 81       	ldd	r25, Y+4	; 0x04
    3912:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

00003916 <.LVL158>:
    3916:	96 01       	movw	r18, r12
    3918:	dc 01       	movw	r26, r24
    391a:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

0000391e <.Loc.508>:
    391e:	98 01       	movw	r18, r16
    3920:	40 e0       	ldi	r20, 0x00	; 0
    3922:	50 e0       	ldi	r21, 0x00	; 0

00003924 <.Loc.509>:
    3924:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00003928 <.Loc.510>:
    3928:	30 93 79 01 	sts	0x0179, r19	; 0x800179 <ptrans+0x5>
    392c:	20 93 78 01 	sts	0x0178, r18	; 0x800178 <ptrans+0x4>

00003930 <.L113>:
           ptrans.count++;		// count FET as two for accelerate searching
    3930:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <ptrans+0xf>
    3934:	8f 5f       	subi	r24, 0xFF	; 255
    3936:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <ptrans+0xf>

0000393a <.Loc.513>:
           goto savePresult;
    393a:	45 c1       	rjmp	.+650    	; 0x3bc6 <.L26>

0000393c <.L72>:
    393c:	82 e3       	ldi	r24, 0x32	; 50

0000393e <.LVL161>:
    393e:	95 cf       	rjmp	.-214    	; 0x386a <.L21>

00003940 <.L22>:
           i16 = expand_FET_quadratic(ptrans.ice0,ptrans.gthvoltage,ptrans.current);
    3940:	40 91 7a 01 	lds	r20, 0x017A	; 0x80017a <ptrans+0x6>
    3944:	50 91 7b 01 	lds	r21, 0x017B	; 0x80017b <ptrans+0x7>
    3948:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <ptrans+0xa>
    394c:	70 91 7f 01 	lds	r23, 0x017F	; 0x80017f <ptrans+0xb>
    3950:	15 dd       	rcall	.-1494   	; 0x337c <expand_FET_quadratic>

00003952 <.LVL163>:
    3952:	9c 01       	movw	r18, r24

00003954 <.LVL164>:
           if (i16 != 0) {
    3954:	89 2b       	or	r24, r25
    3956:	11 f1       	breq	.+68     	; 0x399c <.L24>

00003958 <.Loc.521>:
               R_PORT = TriPinRH; 
    3958:	15 b9       	out	0x05, r17	; 5

0000395a <.Loc.523>:
               R_DDR = TriPinRH;	// gate to VCC via RH
    395a:	14 b9       	out	0x04, r17	; 4

0000395c <.Loc.525>:
               ADC_PORT = HiADCp;       // drain to GND, source to VCC, both without resistors
    395c:	3e 89       	ldd	r19, Y+22	; 0x16
    395e:	38 b9       	out	0x08, r19	; 8

00003960 <.Loc.527>:
               ADC_DDR = HiADCm|LoADCm;
    3960:	73 2a       	or	r7, r19

00003962 <.LVL165>:
    3962:	77 b8       	out	0x07, r7	; 7

00003964 <.Loc.530>:
               adc.hp3 = vcc_diff(W10msReadADC(HighPin));	//measure voltage at the Source; this is the voltage drop across the pin's ~20 ohm internal resistance!
    3964:	89 81       	ldd	r24, Y+1	; 0x01
    3966:	0e 94 f5 07 	call	0xfea	; 0xfea <W10msReadADC>

0000396a <.LVL166>:
    396a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vcc_diff>

0000396e <.LVL167>:
    396e:	8c 01       	movw	r16, r24

00003970 <.LVL168>:
               ADC_DDR = TXD_MSK;	// disconnect drain and source immediately after measurement, since quite a lot of current may flow
    3970:	17 b8       	out	0x07, r1	; 7

00003972 <.Loc.535>:
               i16 = (unsigned int)(((unsigned long)adc.hp3 * 10000) / RRpinPL); // Idss 1uA
    3972:	9c 01       	movw	r18, r24
    3974:	a0 e1       	ldi	r26, 0x10	; 16
    3976:	b7 e2       	ldi	r27, 0x27	; 39
    3978:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

0000397c <.Loc.537>:
    397c:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <pin_rpl>
    3980:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <pin_rpl+0x1>
    3984:	40 e0       	ldi	r20, 0x00	; 0
    3986:	50 e0       	ldi	r21, 0x00	; 0
    3988:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

0000398c <.LVL169>:
               i16 =expand_FET_quadratic(ptrans.ice0,adc.hp3,i16);
    398c:	a9 01       	movw	r20, r18
    398e:	b8 01       	movw	r22, r16
    3990:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ptrans+0x8>
    3994:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <ptrans+0x9>

00003998 <.LVL170>:
    3998:	f1 dc       	rcall	.-1566   	; 0x337c <expand_FET_quadratic>

0000399a <.LVL171>:
    399a:	9c 01       	movw	r18, r24

0000399c <.L24>:
           ptrans.uBE = i16;
    399c:	30 93 79 01 	sts	0x0179, r19	; 0x800179 <ptrans+0x5>
    39a0:	20 93 78 01 	sts	0x0178, r18	; 0x800178 <ptrans+0x4>

000039a4 <.LBE13>:
    if ((PartMode&0x0f) != PART_MODE_JFET)
    39a4:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <PartMode>
    39a8:	8f 70       	andi	r24, 0x0F	; 15
    39aa:	84 30       	cpi	r24, 0x04	; 4
    39ac:	09 f4       	brne	.+2      	; 0x39b0 <.Loc.546>

000039ae <L0^A>:
    39ae:	c0 cf       	rjmp	.-128    	; 0x3930 <.L113>

000039b0 <.Loc.546>:
    39b0:	99 cf       	rjmp	.-206    	; 0x38e4 <.L25>

000039b2 <.L12>:
  ADC_PORT = TXD_VAL;
    39b2:	18 b8       	out	0x08, r1	; 8

000039b4 <.LVL174>:
  ADC_DDR = LoADCm;			// Collector direct to GND
    39b4:	77 b8       	out	0x07, r7	; 7

000039b6 <.Loc.551>:
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
    39b6:	65 b8       	out	0x05, r6	; 5

000039b8 <.Loc.553>:
  R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
    39b8:	4d 89       	ldd	r20, Y+21	; 0x15
    39ba:	44 b9       	out	0x04, r20	; 4

000039bc <.Loc.555>:
  adc.hp1 = W5msReadADC(HighPin);
    39bc:	89 81       	ldd	r24, Y+1	; 0x01
    39be:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

000039c2 <.LVL175>:
    39c2:	8a 8b       	std	Y+18, r24	; 0x12
    39c4:	9b 8b       	std	Y+19, r25	; 0x13

000039c6 <.LVL176>:
  adc.rhp = vcc_diff(adc.hp1);	// voltage at the Emitter resistor
    39c6:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vcc_diff>

000039ca <.LVL177>:
    39ca:	8c 83       	std	Y+4, r24	; 0x04
    39cc:	9d 83       	std	Y+5, r25	; 0x05

000039ce <.LVL178>:
  adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
    39ce:	8b 81       	ldd	r24, Y+3	; 0x03
    39d0:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

000039d4 <.LVL179>:
    39d4:	8e 83       	std	Y+6, r24	; 0x06
    39d6:	9f 83       	std	Y+7, r25	; 0x07

000039d8 <.LVL180>:
  if (adc.rhp > (100+adc.lp_otr)) {
    39d8:	51 01       	movw	r10, r2
    39da:	84 e6       	ldi	r24, 0x64	; 100
    39dc:	a8 0e       	add	r10, r24
    39de:	b1 1c       	adc	r11, r1

000039e0 <.Loc.564>:
    39e0:	ec 81       	ldd	r30, Y+4	; 0x04
    39e2:	fd 81       	ldd	r31, Y+5	; 0x05

000039e4 <.Loc.565>:
     tmp16 = unsigned_diff(adc.rhp, adc.lp_otr);	// subtract residual current
    39e4:	b1 01       	movw	r22, r2

000039e6 <.Loc.566>:
  if (adc.rhp > (100+adc.lp_otr)) {
    39e6:	ae 16       	cp	r10, r30
    39e8:	bf 06       	cpc	r11, r31
    39ea:	08 f0       	brcs	.+2      	; 0x39ee <.Loc.567>

000039ec <L0^A>:
    39ec:	ee c0       	rjmp	.+476    	; 0x3bca <.L27>

000039ee <.Loc.567>:
     tmp16 = unsigned_diff(adc.rhp, adc.lp_otr);	// subtract residual current
    39ee:	cf 01       	movw	r24, r30
    39f0:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

000039f4 <.LVL181>:
    39f4:	7c 01       	movw	r14, r24

000039f6 <.LVL182>:
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
    39f6:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <resis680pl>
    39fa:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <resis680pl+0x1>
    39fe:	40 e0       	ldi	r20, 0x00	; 0
    3a00:	50 e0       	ldi	r21, 0x00	; 0

00003a02 <.Loc.571>:
     c_hfe = ((unsigned long)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 10000) / 
    3a02:	60 e8       	ldi	r22, 0x80	; 128
    3a04:	71 ea       	ldi	r23, 0xA1	; 161
    3a06:	83 e0       	ldi	r24, 0x03	; 3
    3a08:	9c e1       	ldi	r25, 0x1C	; 28
    3a0a:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00003a0e <.Loc.572>:
    3a0e:	d7 01       	movw	r26, r14
    3a10:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <__muluhisi3>

00003a14 <.L111>:
     c_hfe = (unsigned long)((unsigned long)unsigned_diff(tmp16, adc.tp1) * 100) / adc.tp1;
    3a14:	ee 81       	ldd	r30, Y+6	; 0x06
    3a16:	ff 81       	ldd	r31, Y+7	; 0x07
    3a18:	9f 01       	movw	r18, r30
    3a1a:	40 e0       	ldi	r20, 0x00	; 0
    3a1c:	50 e0       	ldi	r21, 0x00	; 0

00003a1e <.Loc.574>:
    3a1e:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>
    3a22:	69 01       	movw	r12, r18
    3a24:	7a 01       	movw	r14, r20

00003a26 <.LVL184>:
  R_DDR = 0;			//all Resistor Ports to Input
    3a26:	14 b8       	out	0x04, r1	; 4

00003a28 <.LVL185>:
  R_PORT = 0;			//switch all resistor ports to GND
    3a28:	15 b8       	out	0x05, r1	; 5

00003a2a <.Loc.579>:
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    3a2a:	fe 89       	ldd	r31, Y+22	; 0x16
    3a2c:	f8 b9       	out	0x08, r31	; 8

00003a2e <.Loc.581>:
  ADC_DDR = HiADCm;		//switch High-Pin to output
    3a2e:	f7 b9       	out	0x07, r31	; 7

00003a30 <.Loc.583>:
  wait_about5ms();
    3a30:	81 e0       	ldi	r24, 0x01	; 1
    3a32:	0e 94 c5 07 	call	0xf8a	; 0xf8a <sleep_5ms>

00003a36 <.LVL186>:
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
    3a36:	84 b8       	out	0x04, r8	; 4

00003a38 <.Loc.586>:
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
    3a38:	8a 81       	ldd	r24, Y+2	; 0x02
    3a3a:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00003a3e <.LVL187>:
     if(adc.lp1 > 3422) {
    3a3e:	8f 35       	cpi	r24, 0x5F	; 95
    3a40:	9d 40       	sbci	r25, 0x0D	; 13
    3a42:	08 f4       	brcc	.+2      	; 0x3a46 <.Loc.590>

00003a44 <L0^A>:
    3a44:	6b c1       	rjmp	.+726    	; 0x3d1c <.L29>

00003a46 <.Loc.590>:
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
    3a46:	04 b9       	out	0x04, r16	; 4

00003a48 <.Loc.592>:
        adc.lp1 = W10msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
    3a48:	8a 81       	ldd	r24, Y+2	; 0x02

00003a4a <.LVL188>:
    3a4a:	0e 94 f5 07 	call	0xfea	; 0xfea <W10msReadADC>

00003a4e <.LVL189>:
    3a4e:	2c 01       	movw	r4, r24

00003a50 <.LVL190>:
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
    3a50:	8b 81       	ldd	r24, Y+3	; 0x03
    3a52:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00003a56 <.LVL191>:
    3a56:	8c 87       	std	Y+12, r24	; 0x0c
    3a58:	9d 87       	std	Y+13, r25	; 0x0d

00003a5a <.LVL192>:
        adc.hp2 = ReadADC(HighPin);	//measure voltage at HighPin (assumed Emitter)
    3a5a:	89 81       	ldd	r24, Y+1	; 0x01
    3a5c:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00003a60 <.LVL193>:
    3a60:	8a 87       	std	Y+10, r24	; 0x0a
    3a62:	9b 87       	std	Y+11, r25	; 0x0b

00003a64 <.LVL194>:
        if(adc.tp2 > 2000) {
    3a64:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a66:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a68:	81 3d       	cpi	r24, 0xD1	; 209
    3a6a:	97 40       	sbci	r25, 0x07	; 7
    3a6c:	08 f4       	brcc	.+2      	; 0x3a70 <.Loc.601>

00003a6e <L0^A>:
    3a6e:	e3 c0       	rjmp	.+454    	; 0x3c36 <.L30>

00003a70 <.Loc.601>:
           PartFound = PART_TRANSISTOR;
    3a70:	84 e0       	ldi	r24, 0x04	; 4
    3a72:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>

00003a76 <.Loc.603>:
           PartMode = PART_MODE_PNP;
    3a76:	8d e0       	ldi	r24, 0x0D	; 13
    3a78:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <PartMode>

00003a7c <.LVL195>:
              tmp16 -= adc.lp_otr;
    3a7c:	82 01       	movw	r16, r4

00003a7e <.Loc.609>:
           if (tmp16 > adc.lp_otr) {
    3a7e:	24 14       	cp	r2, r4
    3a80:	35 04       	cpc	r3, r5
    3a82:	10 f4       	brcc	.+4      	; 0x3a88 <.L31>

00003a84 <.Loc.610>:
              tmp16 -= adc.lp_otr;
    3a84:	02 19       	sub	r16, r2
    3a86:	13 09       	sbc	r17, r3

00003a88 <.L31>:
              (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
    3a88:	80 90 19 01 	lds	r8, 0x0119	; 0x800119 <resis680mi>
    3a8c:	90 90 1a 01 	lds	r9, 0x011A	; 0x80011a <resis680mi+0x1>
    3a90:	a1 2c       	mov	r10, r1
    3a92:	b1 2c       	mov	r11, r1

00003a94 <.Loc.614>:
           e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 10000) / 
    3a94:	60 e8       	ldi	r22, 0x80	; 128
    3a96:	71 ea       	ldi	r23, 0xA1	; 161
    3a98:	83 e0       	ldi	r24, 0x03	; 3
    3a9a:	9c e1       	ldi	r25, 0x1C	; 28
    3a9c:	a5 01       	movw	r20, r10
    3a9e:	94 01       	movw	r18, r8
    3aa0:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00003aa4 <.Loc.615>:
    3aa4:	d8 01       	movw	r26, r16
    3aa6:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <__muluhisi3>

00003aaa <.Loc.616>:
              (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
    3aaa:	ec 85       	ldd	r30, Y+12	; 0x0c
    3aac:	fd 85       	ldd	r31, Y+13	; 0x0d
    3aae:	9f 01       	movw	r18, r30
    3ab0:	40 e0       	ldi	r20, 0x00	; 0
    3ab2:	50 e0       	ldi	r21, 0x00	; 0

00003ab4 <.Loc.617>:
           e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 10000) / 
    3ab4:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00003ab8 <.LVL197>:
           if ((ptrans.count == 0) || (e_hfe > ptrans.hfe)){
    3ab8:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <ptrans+0xf>
    3abc:	81 15       	cp	r24, r1
    3abe:	71 f0       	breq	.+28     	; 0x3adc <.L32>

00003ac0 <.Loc.620>:
    3ac0:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <ptrans>
    3ac4:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <ptrans+0x1>
    3ac8:	a0 91 76 01 	lds	r26, 0x0176	; 0x800176 <ptrans+0x2>
    3acc:	b0 91 77 01 	lds	r27, 0x0177	; 0x800177 <ptrans+0x3>
    3ad0:	82 17       	cp	r24, r18
    3ad2:	93 07       	cpc	r25, r19
    3ad4:	a4 07       	cpc	r26, r20
    3ad6:	b5 07       	cpc	r27, r21
    3ad8:	08 f0       	brcs	.+2      	; 0x3adc <.L32>

00003ada <L0^A>:
    3ada:	97 c0       	rjmp	.+302    	; 0x3c0a <.L74>

00003adc <.L32>:
              ptrans.hfe = e_hfe;				// hFE with common emitter
    3adc:	20 93 74 01 	sts	0x0174, r18	; 0x800174 <ptrans>
    3ae0:	30 93 75 01 	sts	0x0175, r19	; 0x800175 <ptrans+0x1>
    3ae4:	40 93 76 01 	sts	0x0176, r20	; 0x800176 <ptrans+0x2>
    3ae8:	50 93 77 01 	sts	0x0177, r21	; 0x800177 <ptrans+0x3>

00003aec <.Loc.623>:
              ptrans.current = (unsigned int)(((unsigned long)adc.lp1 * 10000) / RR680MI); // Ic 1uA
    3aec:	92 01       	movw	r18, r4

00003aee <.LVL198>:
    3aee:	a0 e1       	ldi	r26, 0x10	; 16
    3af0:	b7 e2       	ldi	r27, 0x27	; 39
    3af2:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

00003af6 <.Loc.626>:
    3af6:	a5 01       	movw	r20, r10
    3af8:	94 01       	movw	r18, r8
    3afa:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00003afe <.Loc.627>:
    3afe:	30 93 7b 01 	sts	0x017B, r19	; 0x80017b <ptrans+0x7>
    3b02:	20 93 7a 01 	sts	0x017A, r18	; 0x80017a <ptrans+0x6>

00003b06 <.Loc.628>:
              ptrans.uBE = unsigned_diff(adc.hp2, adc.tp2);	// Base Emitter Voltage
    3b06:	6c 85       	ldd	r22, Y+12	; 0x0c
    3b08:	7d 85       	ldd	r23, Y+13	; 0x0d
    3b0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b0e:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

00003b12 <.LVL199>:
    3b12:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <ptrans+0x5>
    3b16:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <ptrans+0x4>

00003b1a <.LVL200>:
              update_pins = 1;		// trans.ebc must be updated
    3b1a:	81 e0       	ldi	r24, 0x01	; 1

00003b1c <.L33>:
           if (c_hfe > ptrans.hfe)  // trans.hfe is allready e_hfe or last c_hFE
    3b1c:	40 91 74 01 	lds	r20, 0x0174	; 0x800174 <ptrans>
    3b20:	50 91 75 01 	lds	r21, 0x0175	; 0x800175 <ptrans+0x1>
    3b24:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <ptrans+0x2>
    3b28:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <ptrans+0x3>
    3b2c:	4c 15       	cp	r20, r12
    3b2e:	5d 05       	cpc	r21, r13
    3b30:	6e 05       	cpc	r22, r14
    3b32:	7f 05       	cpc	r23, r15
    3b34:	08 f0       	brcs	.+2      	; 0x3b38 <.Loc.635>

00003b36 <L0^A>:
    3b36:	6b c0       	rjmp	.+214    	; 0x3c0e <.L34>

00003b38 <.Loc.635>:
              ptrans.hfe = c_hfe;		// c_hfe is the best
    3b38:	c0 92 74 01 	sts	0x0174, r12	; 0x800174 <ptrans>
    3b3c:	d0 92 75 01 	sts	0x0175, r13	; 0x800175 <ptrans+0x1>
    3b40:	e0 92 76 01 	sts	0x0176, r14	; 0x800176 <ptrans+0x2>
    3b44:	f0 92 77 01 	sts	0x0177, r15	; 0x800177 <ptrans+0x3>

00003b48 <.Loc.637>:
              ptrans.uBE = unsigned_diff(adc.hp1, adc.tp1);	// Base Emitter Voltage common collector
    3b48:	6e 81       	ldd	r22, Y+6	; 0x06
    3b4a:	7f 81       	ldd	r23, Y+7	; 0x07
    3b4c:	8a 89       	ldd	r24, Y+18	; 0x12

00003b4e <.LVL202>:
    3b4e:	9b 89       	ldd	r25, Y+19	; 0x13
    3b50:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

00003b54 <.LVL203>:
    3b54:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <ptrans+0x5>
    3b58:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <ptrans+0x4>

00003b5c <.Loc.641>:
              ptrans.current = (unsigned int)(((unsigned long)adc.rhp * 10000) / RR680PL); // Ie 1uA
    3b5c:	2c 81       	ldd	r18, Y+4	; 0x04
    3b5e:	3d 81       	ldd	r19, Y+5	; 0x05
    3b60:	a0 e1       	ldi	r26, 0x10	; 16
    3b62:	b7 e2       	ldi	r27, 0x27	; 39
    3b64:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

00003b68 <.Loc.644>:
    3b68:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <resis680pl>
    3b6c:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <resis680pl+0x1>
    3b70:	40 e0       	ldi	r20, 0x00	; 0
    3b72:	50 e0       	ldi	r21, 0x00	; 0
    3b74:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00003b78 <.Loc.645>:
              ptrans.current += 10000;		// current at emitter!
    3b78:	20 5f       	subi	r18, 0xF0	; 240
    3b7a:	38 4d       	sbci	r19, 0xD8	; 216
    3b7c:	30 93 7b 01 	sts	0x017B, r19	; 0x80017b <ptrans+0x7>
    3b80:	20 93 7a 01 	sts	0x017A, r18	; 0x80017a <ptrans+0x6>

00003b84 <.L35>:
              ptrans.ice0 = (unsigned int)(((unsigned long)adc.lp_otr * 10000) / RR680MI); // ICE0 1uA
    3b84:	c0 90 19 01 	lds	r12, 0x0119	; 0x800119 <resis680mi>
    3b88:	d0 90 1a 01 	lds	r13, 0x011A	; 0x80011a <resis680mi+0x1>

00003b8c <.LVL205>:
    3b8c:	e1 2c       	mov	r14, r1
    3b8e:	f1 2c       	mov	r15, r1

00003b90 <.Loc.651>:
    3b90:	91 01       	movw	r18, r2
    3b92:	a0 e1       	ldi	r26, 0x10	; 16
    3b94:	b7 e2       	ldi	r27, 0x27	; 39
    3b96:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

00003b9a <.Loc.652>:
    3b9a:	a7 01       	movw	r20, r14
    3b9c:	96 01       	movw	r18, r12
    3b9e:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00003ba2 <.Loc.653>:
    3ba2:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <ptrans+0x9>
    3ba6:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <ptrans+0x8>

00003baa <.Loc.654>:
              ptrans.ices = (unsigned int)(((unsigned long)adc.vCEs * 10000) / RR680MI); // ICEs 1uA
    3baa:	2e 85       	ldd	r18, Y+14	; 0x0e
    3bac:	3f 85       	ldd	r19, Y+15	; 0x0f
    3bae:	a0 e1       	ldi	r26, 0x10	; 16
    3bb0:	b7 e2       	ldi	r27, 0x27	; 39
    3bb2:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

00003bb6 <.Loc.656>:
    3bb6:	a7 01       	movw	r20, r14
    3bb8:	96 01       	movw	r18, r12
    3bba:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00003bbe <.Loc.657>:
    3bbe:	30 93 7f 01 	sts	0x017F, r19	; 0x80017f <ptrans+0xb>
    3bc2:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <ptrans+0xa>

00003bc6 <.L26>:
  update_pins = 1;			// if a part is found, always update the pins
    3bc6:	81 e0       	ldi	r24, 0x01	; 1
    3bc8:	24 c0       	rjmp	.+72     	; 0x3c12 <.L36>

00003bca <.L27>:
     tmp16 = unsigned_diff(adc.rhp, adc.lp_otr);
    3bca:	8c 81       	ldd	r24, Y+4	; 0x04
    3bcc:	9d 81       	ldd	r25, Y+5	; 0x05
    3bce:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

00003bd2 <.LVL208>:
    3bd2:	7c 01       	movw	r14, r24

00003bd4 <.LVL209>:
     R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
    3bd4:	f9 85       	ldd	r31, Y+9	; 0x09
    3bd6:	f4 b9       	out	0x04, r31	; 4

00003bd8 <.LVL210>:
     adc.hp1 = W5msReadADC(HighPin);	// voltage at the Emitter resistor
    3bd8:	89 81       	ldd	r24, Y+1	; 0x01
    3bda:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00003bde <.LVL211>:
    3bde:	8a 8b       	std	Y+18, r24	; 0x12
    3be0:	9b 8b       	std	Y+19, r25	; 0x13

00003be2 <.LVL212>:
     adc.rhp = vcc_diff(adc.hp1);	// voltage at the Emitter resistor
    3be2:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vcc_diff>

00003be6 <.LVL213>:
    3be6:	8c 83       	std	Y+4, r24	; 0x04
    3be8:	9d 83       	std	Y+5, r25	; 0x05

00003bea <.LVL214>:
     adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor (RL)
    3bea:	8b 81       	ldd	r24, Y+3	; 0x03
    3bec:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00003bf0 <.LVL215>:
    3bf0:	8e 83       	std	Y+6, r24	; 0x06
    3bf2:	9f 83       	std	Y+7, r25	; 0x07

00003bf4 <.LVL216>:
     c_hfe = (unsigned long)((unsigned long)unsigned_diff(tmp16, adc.tp1) * 100) / adc.tp1;
    3bf4:	6e 81       	ldd	r22, Y+6	; 0x06
    3bf6:	7f 81       	ldd	r23, Y+7	; 0x07
    3bf8:	c7 01       	movw	r24, r14
    3bfa:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

00003bfe <.LVL217>:
    3bfe:	9c 01       	movw	r18, r24
    3c00:	a4 e6       	ldi	r26, 0x64	; 100
    3c02:	b0 e0       	ldi	r27, 0x00	; 0
    3c04:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>
    3c08:	05 cf       	rjmp	.-502    	; 0x3a14 <.L111>

00003c0a <.L74>:
           update_pins = 0;		// only update pins, if hFE is higher or Thyristor 
    3c0a:	80 e0       	ldi	r24, 0x00	; 0
    3c0c:	87 cf       	rjmp	.-242    	; 0x3b1c <.L33>

00003c0e <.L34>:
           if (update_pins != 0) {
    3c0e:	81 11       	cpse	r24, r1
    3c10:	b9 cf       	rjmp	.-142    	; 0x3b84 <.L35>

00003c12 <.L36>:
 ptrans.count++;
    3c12:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <ptrans+0xf>
    3c16:	9f 5f       	subi	r25, 0xFF	; 255
    3c18:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <ptrans+0xf>

00003c1c <.Loc.678>:
 if (update_pins != 0) {
    3c1c:	81 15       	cp	r24, r1
    3c1e:	09 f4       	brne	.+2      	; 0x3c22 <.LVL221>

00003c20 <L0^A>:
    3c20:	0e ce       	rjmp	.-996    	; 0x383e <.L63>

00003c22 <.LVL221>:
    ptrans.b = TristatePin;	// save Pin-constellation
    3c22:	8b 81       	ldd	r24, Y+3	; 0x03
    3c24:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <ptrans+0xc>

00003c28 <.Loc.682>:
    ptrans.c = LowPin;
    3c28:	9a 81       	ldd	r25, Y+2	; 0x02
    3c2a:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <ptrans+0xd>

00003c2e <.Loc.684>:
    ptrans.e = HighPin;
    3c2e:	e9 81       	ldd	r30, Y+1	; 0x01
    3c30:	e0 93 82 01 	sts	0x0182, r30	; 0x800182 <ptrans+0xe>
    3c34:	04 ce       	rjmp	.-1016   	; 0x383e <.L63>

00003c36 <.L30>:
        if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
    3c36:	f1 e6       	ldi	r31, 0x61	; 97
    3c38:	2f 16       	cp	r2, r31
    3c3a:	31 04       	cpc	r3, r1
    3c3c:	08 f0       	brcs	.+2      	; 0x3c40 <.Loc.688>

00003c3e <L0^A>:
    3c3e:	6e c0       	rjmp	.+220    	; 0x3d1c <.L29>

00003c40 <.Loc.688>:
    3c40:	21 ed       	ldi	r18, 0xD1	; 209
    3c42:	42 16       	cp	r4, r18
    3c44:	27 e0       	ldi	r18, 0x07	; 7
    3c46:	52 06       	cpc	r5, r18
    3c48:	08 f4       	brcc	.+2      	; 0x3c4c <.Loc.689>

00003c4a <L0^A>:
    3c4a:	68 c0       	rjmp	.+208    	; 0x3d1c <.L29>

00003c4c <.Loc.689>:
           PartFound = PART_FET;		//P-Kanal-MOSFET is found (Basis/Gate moves not to VCC)
    3c4c:	85 e0       	ldi	r24, 0x05	; 5
    3c4e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>

00003c52 <.Loc.691>:
           PartMode = PART_MODE_MOS|P_CHANNEL|E_MODE;
    3c52:	82 e1       	ldi	r24, 0x12	; 18
    3c54:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <PartMode>

00003c58 <.Loc.693>:
           if (adc.hp2 > (adc.lp1+250)) {
    3c58:	c2 01       	movw	r24, r4
    3c5a:	86 50       	subi	r24, 0x06	; 6
    3c5c:	9f 4f       	sbci	r25, 0xFF	; 255

00003c5e <.Loc.695>:
    3c5e:	ea 85       	ldd	r30, Y+10	; 0x0a
    3c60:	fb 85       	ldd	r31, Y+11	; 0x0b
    3c62:	8e 17       	cp	r24, r30
    3c64:	9f 07       	cpc	r25, r31
    3c66:	08 f0       	brcs	.+2      	; 0x3c6a <.Loc.696>

00003c68 <L0^A>:
    3c68:	42 c0       	rjmp	.+132    	; 0x3cee <.L37>

00003c6a <.Loc.696>:
              PartMode = PART_MODE_IGBT|P_CHANNEL|E_MODE;
    3c6a:	83 e1       	ldi	r24, 0x13	; 19
    3c6c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <PartMode>

00003c70 <.L38>:
           PinMSK = LoADCm & 7;
    3c70:	17 2d       	mov	r17, r7
    3c72:	17 70       	andi	r17, 0x07	; 7

00003c74 <.LVL223>:
       	   ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
    3c74:	8b 81       	ldd	r24, Y+3	; 0x03
    3c76:	80 64       	ori	r24, 0x40	; 64
    3c78:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

00003c7c <.LVL224>:
    3c7c:	fb e0       	ldi	r31, 0x0B	; 11
    3c7e:	fc 83       	std	Y+4, r31	; 0x04

00003c80 <.Loc.706>:
       	   tmp16 = 1;			// round up ((1*4)/9)
    3c80:	cc 24       	eor	r12, r12
    3c82:	c3 94       	inc	r12
    3c84:	d1 2c       	mov	r13, r1

00003c86 <.LVL225>:
      	      tmp16 += (1023 - ADCW);	// Add Tristatepin-Voltage
    3c86:	ee 24       	eor	r14, r14
    3c88:	ea 94       	dec	r14
    3c8a:	e3 e0       	ldi	r30, 0x03	; 3
    3c8c:	fe 2e       	mov	r15, r30

00003c8e <.L41>:
       	      wdt_reset();
    3c8e:	a8 95       	wdr

00003c90 <.Loc.709>:
       	      ChargePin10ms(TriPinRL,1);
    3c90:	61 e0       	ldi	r22, 0x01	; 1
    3c92:	88 85       	ldd	r24, Y+8	; 0x08
    3c94:	87 d4       	rcall	.+2318   	; 0x45a4 <ChargePin10ms>

00003c96 <.LVL227>:
                R_DDR = LoPinRL | TriPinRH;		//switch R_H for Tristate-Pin (Basis) to GND
    3c96:	04 b9       	out	0x04, r16	; 4

00003c98 <.L39>:
       	      while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
    3c98:	86 b1       	in	r24, 0x06	; 6

00003c9a <.Loc.715>:
    3c9a:	81 23       	and	r24, r17
    3c9c:	81 15       	cp	r24, r1
    3c9e:	e1 f3       	breq	.-8      	; 0x3c98 <.L39>

00003ca0 <.Loc.716>:
       	      R_DDR = LoPinRL;
    3ca0:	29 89       	ldd	r18, Y+17	; 0x11
    3ca2:	24 b9       	out	0x04, r18	; 4

00003ca4 <.Loc.718>:
       	      ADCSRA |= (1<<ADSC);		// Start Conversion
    3ca4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

00003ca8 <.Loc.719>:
    3ca8:	80 64       	ori	r24, 0x40	; 64
    3caa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

00003cae <.L40>:
       	      while (ADCSRA&(1<<ADSC));		// wait
    3cae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3cb2:	86 fd       	sbrc	r24, 6
    3cb4:	fc cf       	rjmp	.-8      	; 0x3cae <.L40>

00003cb6 <.Loc.722>:
      	      tmp16 += (1023 - ADCW);	// Add Tristatepin-Voltage
    3cb6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    3cba:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>

00003cbe <.Loc.724>:
    3cbe:	f7 01       	movw	r30, r14
    3cc0:	e8 1b       	sub	r30, r24
    3cc2:	f9 0b       	sbc	r31, r25

00003cc4 <.Loc.725>:
    3cc4:	ce 0e       	add	r12, r30
    3cc6:	df 1e       	adc	r13, r31

00003cc8 <.LVL229>:
       	   for(ii=0;ii<11;ii++) {
    3cc8:	fc 81       	ldd	r31, Y+4	; 0x04
    3cca:	f1 50       	subi	r31, 0x01	; 1
    3ccc:	fc 83       	std	Y+4, r31	; 0x04

00003cce <.LVL230>:
    3cce:	f1 11       	cpse	r31, r1
    3cd0:	de cf       	rjmp	.-68     	; 0x3c8e <.L41>

00003cd2 <.LVL231>:
           tmp16 *= 4;		// is equal to 44*ADCW
    3cd2:	c6 01       	movw	r24, r12
    3cd4:	88 0f       	add	r24, r24
    3cd6:	99 1f       	adc	r25, r25
    3cd8:	88 0f       	add	r24, r24
    3cda:	99 1f       	adc	r25, r25

00003cdc <.LVL232>:
           ptrans.gthvoltage = tmp16 / 9;		// gives resolution in mV
    3cdc:	69 e0       	ldi	r22, 0x09	; 9
    3cde:	70 e0       	ldi	r23, 0x00	; 0
    3ce0:	0e 94 00 38 	call	0x7000	; 0x7000 <__udivmodhi4>

00003ce4 <.LVL233>:
    3ce4:	70 93 7f 01 	sts	0x017F, r23	; 0x80017f <ptrans+0xb>
    3ce8:	60 93 7e 01 	sts	0x017E, r22	; 0x80017e <ptrans+0xa>
    3cec:	21 ce       	rjmp	.-958    	; 0x3930 <.L113>

00003cee <.L37>:
              ptrans.uBE = RR680MI * (unsigned long)unsigned_diff(adc.hp2, adc.lp1) / adc.lp1; // DS resistance in 0.1 OHm
    3cee:	e0 90 19 01 	lds	r14, 0x0119	; 0x800119 <resis680mi>
    3cf2:	f0 90 1a 01 	lds	r15, 0x011A	; 0x80011a <resis680mi+0x1>

00003cf6 <.Loc.736>:
    3cf6:	b2 01       	movw	r22, r4
    3cf8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3cfa:	9b 85       	ldd	r25, Y+11	; 0x0b
    3cfc:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

00003d00 <.LVL235>:
    3d00:	97 01       	movw	r18, r14
    3d02:	dc 01       	movw	r26, r24
    3d04:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

00003d08 <.Loc.738>:
    3d08:	92 01       	movw	r18, r4
    3d0a:	40 e0       	ldi	r20, 0x00	; 0
    3d0c:	50 e0       	ldi	r21, 0x00	; 0

00003d0e <.Loc.739>:
    3d0e:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00003d12 <.Loc.740>:
    3d12:	30 93 79 01 	sts	0x0179, r19	; 0x800179 <ptrans+0x5>
    3d16:	20 93 78 01 	sts	0x0178, r18	; 0x800178 <ptrans+0x4>
    3d1a:	aa cf       	rjmp	.-172    	; 0x3c70 <.L38>

00003d1c <.L29>:
    R_DDR = LoPinRL | TriPinRH;
    3d1c:	04 b9       	out	0x04, r16	; 4

00003d1e <.Loc.743>:
    R_PORT = TriPinRH;		// Tripin=RH+
    3d1e:	15 b9       	out	0x05, r17	; 5

00003d20 <.Loc.745>:
    adc.lp1 = W5msReadADC(LowPin);
    3d20:	8a 81       	ldd	r24, Y+2	; 0x02
    3d22:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00003d26 <.LVL237>:
    3d26:	6c 01       	movw	r12, r24

00003d28 <.LVL238>:
    adc.tp1 = ReadADC(TristatePin);	// voltage at the Base 
    3d28:	8b 81       	ldd	r24, Y+3	; 0x03
    3d2a:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00003d2e <.LVL239>:
    3d2e:	8e 83       	std	Y+6, r24	; 0x06
    3d30:	9c 87       	std	Y+12, r25	; 0x0c

00003d32 <.LVL240>:
    adc.rtp = vcc_diff(adc.tp1);	// voltage at Base resistor
    3d32:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vcc_diff>

00003d36 <.LVL241>:
    3d36:	8c 01       	movw	r16, r24

00003d38 <.LVL242>:
    if (adc.lp1 > (100+adc.lp_otr)) {
    3d38:	ac 14       	cp	r10, r12
    3d3a:	bd 04       	cpc	r11, r13
    3d3c:	08 f0       	brcs	.+2      	; 0x3d40 <.Loc.754>

00003d3e <L0^A>:
    3d3e:	a4 c0       	rjmp	.+328    	; 0x3e88 <.L42>

00003d40 <.Loc.754>:
       tmp16 = unsigned_diff(adc.lp1, adc.lp_otr);
    3d40:	b1 01       	movw	r22, r2
    3d42:	c6 01       	movw	r24, r12
    3d44:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

00003d48 <.LVL243>:
    3d48:	7c 01       	movw	r14, r24

00003d4a <.LVL244>:
              (unsigned int)RR680MI)) / (unsigned int)adc.rtp;	
    3d4a:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <resis680mi>
    3d4e:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <resis680mi+0x1>
    3d52:	40 e0       	ldi	r20, 0x00	; 0
    3d54:	50 e0       	ldi	r21, 0x00	; 0

00003d56 <.Loc.758>:
       c_hfe = ((unsigned long)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 10000) / 
    3d56:	60 e8       	ldi	r22, 0x80	; 128
    3d58:	71 ea       	ldi	r23, 0xA1	; 161
    3d5a:	83 e0       	ldi	r24, 0x03	; 3
    3d5c:	9c e1       	ldi	r25, 0x1C	; 28
    3d5e:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00003d62 <.Loc.759>:
    3d62:	d7 01       	movw	r26, r14
    3d64:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <__muluhisi3>

00003d68 <.L112>:
       c_hfe = (unsigned long)((unsigned long)unsigned_diff(tmp16, adc.rtp) * 100) / adc.rtp;
    3d68:	98 01       	movw	r18, r16
    3d6a:	40 e0       	ldi	r20, 0x00	; 0
    3d6c:	50 e0       	ldi	r21, 0x00	; 0

00003d6e <.Loc.761>:
    3d6e:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>
    3d72:	49 01       	movw	r8, r18
    3d74:	5a 01       	movw	r10, r20

00003d76 <.LVL246>:
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
    3d76:	77 b8       	out	0x07, r7	; 7

00003d78 <.LVL247>:
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
    3d78:	18 b8       	out	0x08, r1	; 8

00003d7a <.Loc.766>:
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
    3d7a:	39 85       	ldd	r19, Y+9	; 0x09
    3d7c:	34 b9       	out	0x04, r19	; 4

00003d7e <.Loc.768>:
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
    3d7e:	35 b9       	out	0x05, r19	; 5

00003d80 <.Loc.770>:
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
    3d80:	89 81       	ldd	r24, Y+1	; 0x01
    3d82:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00003d86 <.LVL248>:
    3d86:	8c 01       	movw	r16, r24

00003d88 <.LVL249>:
    adc.tp2 = ReadADC(TristatePin);	//voltage of gate
    3d88:	8b 81       	ldd	r24, Y+3	; 0x03
    3d8a:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00003d8e <.LVL250>:
    3d8e:	8a 8b       	std	Y+18, r24	; 0x12
    3d90:	9b 8b       	std	Y+19, r25	; 0x13

00003d92 <.LVL251>:
    adc.lp2 = ReadADC(LowPin);		//voltage of Cathode
    3d92:	8a 81       	ldd	r24, Y+2	; 0x02

00003d94 <.LVL252>:
    3d94:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00003d98 <.LVL253>:
    3d98:	8c 83       	std	Y+4, r24	; 0x04
    3d9a:	9a 87       	std	Y+10, r25	; 0x0a

00003d9c <.LVL254>:
    if(adc.hp1 < 4400)    /* limit for opto-coupler with low hFE */
    3d9c:	00 33       	cpi	r16, 0x30	; 48
    3d9e:	41 e1       	ldi	r20, 0x11	; 17
    3da0:	14 07       	cpc	r17, r20
    3da2:	08 f0       	brcs	.+2      	; 0x3da6 <.Loc.780>

00003da4 <L0^A>:
    3da4:	de c1       	rjmp	.+956    	; 0x4162 <.L45>

00003da6 <.Loc.780>:
       R_PORT = HiPinRL;
    3da6:	65 b8       	out	0x05, r6	; 5

00003da8 <.LVL255>:
       adc.hp4 = W5msReadADC(HighPin);  //read voltage with switched back base
    3da8:	89 81       	ldd	r24, Y+1	; 0x01

00003daa <.LVL256>:
    3daa:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00003dae <.LVL257>:
    3dae:	7c 01       	movw	r14, r24

00003db0 <.LVL258>:
       R_DDR = HiPinRL;			// base to input
    3db0:	64 b8       	out	0x04, r6	; 4

00003db2 <.Loc.787>:
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
    3db2:	89 81       	ldd	r24, Y+1	; 0x01
    3db4:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00003db8 <.LVL259>:
    3db8:	2c 01       	movw	r4, r24

00003dba <.LVL260>:
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
    3dba:	15 b8       	out	0x05, r1	; 5

00003dbc <.Loc.791>:
       wait_about5ms();
    3dbc:	81 e0       	ldi	r24, 0x01	; 1
    3dbe:	0e 94 c5 07 	call	0xf8a	; 0xf8a <sleep_5ms>

00003dc2 <.LVL261>:
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
    3dc2:	65 b8       	out	0x05, r6	; 5

00003dc4 <.Loc.794>:
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
    3dc4:	89 81       	ldd	r24, Y+1	; 0x01
    3dc6:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00003dca <.LVL262>:
    3dca:	9c 01       	movw	r18, r24

00003dcc <.LVL263>:
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)
    3dcc:	80 e4       	ldi	r24, 0x40	; 64
    3dce:	48 16       	cp	r4, r24
    3dd0:	86 e0       	ldi	r24, 0x06	; 6
    3dd2:	58 06       	cpc	r5, r24
    3dd4:	08 f0       	brcs	.+2      	; 0x3dd8 <.Loc.798>

00003dd6 <L0^A>:
    3dd6:	76 c0       	rjmp	.+236    	; 0x3ec4 <.L46>

00003dd8 <.Loc.798>:
    3dd8:	21 33       	cpi	r18, 0x31	; 49
    3dda:	31 41       	sbci	r19, 0x11	; 17
    3ddc:	08 f4       	brcc	.+2      	; 0x3de0 <.Loc.799>

00003dde <L0^A>:
    3dde:	72 c0       	rjmp	.+228    	; 0x3ec4 <.L46>

00003de0 <.Loc.799>:
           && ((adc.hp1+150) > adc.hp4)
    3de0:	c8 01       	movw	r24, r16
    3de2:	8a 56       	subi	r24, 0x6A	; 106
    3de4:	9f 4f       	sbci	r25, 0xFF	; 255

00003de6 <.Loc.800>:
    3de6:	e8 16       	cp	r14, r24
    3de8:	f9 06       	cpc	r15, r25
    3dea:	08 f0       	brcs	.+2      	; 0x3dee <.Loc.801>

00003dec <L0^A>:
    3dec:	6b c0       	rjmp	.+214    	; 0x3ec4 <.L46>

00003dee <.Loc.801>:
          PartFound = PART_THYRISTOR;
    3dee:	86 e0       	ldi	r24, 0x06	; 6
    3df0:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>

00003df4 <.Loc.803>:
          ntrans.count++;		// mark as two N-type transistors
    3df4:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <ntrans+0xf>
    3df8:	8f 5f       	subi	r24, 0xFF	; 255
    3dfa:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <ntrans+0xf>

00003dfe <.Loc.805>:
          ntrans.uBE = unsigned_diff(adc.tp2, adc.lp2);	// Gate - Cathode Voltage 
    3dfe:	6c 81       	ldd	r22, Y+4	; 0x04
    3e00:	7a 85       	ldd	r23, Y+10	; 0x0a
    3e02:	8a 89       	ldd	r24, Y+18	; 0x12
    3e04:	9b 89       	ldd	r25, Y+19	; 0x13
    3e06:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

00003e0a <.LVL264>:
    3e0a:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <ntrans+0x5>
    3e0e:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <ntrans+0x4>

00003e12 <.Loc.808>:
          ntrans.gthvoltage = unsigned_diff(adc.hp1, adc.lp2);	// Anode-Cathode Voltage
    3e12:	6c 81       	ldd	r22, Y+4	; 0x04
    3e14:	7a 85       	ldd	r23, Y+10	; 0x0a
    3e16:	c8 01       	movw	r24, r16
    3e18:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

00003e1c <.LVL265>:
    3e1c:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <ntrans+0xb>
    3e20:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <ntrans+0xa>

00003e24 <.Loc.811>:
          R_DDR = 0;
    3e24:	14 b8       	out	0x04, r1	; 4

00003e26 <.Loc.813>:
          R_PORT = 0;
    3e26:	15 b8       	out	0x05, r1	; 5

00003e28 <.Loc.815>:
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
    3e28:	78 b8       	out	0x08, r7	; 8

00003e2a <.Loc.817>:
          wait_about5ms();
    3e2a:	81 e0       	ldi	r24, 0x01	; 1
    3e2c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <sleep_5ms>

00003e30 <.LVL266>:
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
    3e30:	64 b8       	out	0x04, r6	; 4

00003e32 <.Loc.820>:
          if(W5msReadADC(HighPin) > 244) {
    3e32:	89 81       	ldd	r24, Y+1	; 0x01
    3e34:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00003e38 <.LVL267>:
    3e38:	85 3f       	cpi	r24, 0xF5	; 245
    3e3a:	91 05       	cpc	r25, r1
    3e3c:	18 f5       	brcc	.+70     	; 0x3e84 <.L19>

00003e3e <.Loc.823>:
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
    3e3e:	e9 85       	ldd	r30, Y+9	; 0x09
    3e40:	e4 b9       	out	0x04, r30	; 4

00003e42 <.Loc.825>:
          if(W5msReadADC(TristatePin) < 977) {
    3e42:	8b 81       	ldd	r24, Y+3	; 0x03
    3e44:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00003e48 <.LVL268>:
    3e48:	81 3d       	cpi	r24, 0xD1	; 209
    3e4a:	93 40       	sbci	r25, 0x03	; 3
    3e4c:	d8 f0       	brcs	.+54     	; 0x3e84 <.L19>

00003e4e <.Loc.828>:
          if(ReadADC(HighPin) < 733) {
    3e4e:	89 81       	ldd	r24, Y+1	; 0x01
    3e50:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00003e54 <.LVL269>:
    3e54:	8d 3d       	cpi	r24, 0xDD	; 221
    3e56:	92 40       	sbci	r25, 0x02	; 2
    3e58:	a8 f0       	brcs	.+42     	; 0x3e84 <.L19>

00003e5a <.Loc.831>:
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
    3e5a:	64 b8       	out	0x04, r6	; 4

00003e5c <.Loc.833>:
          if(W5msReadADC(HighPin) < 733) {
    3e5c:	89 81       	ldd	r24, Y+1	; 0x01
    3e5e:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00003e62 <.LVL270>:
    3e62:	8d 3d       	cpi	r24, 0xDD	; 221
    3e64:	92 40       	sbci	r25, 0x02	; 2
    3e66:	70 f0       	brcs	.+28     	; 0x3e84 <.L19>

00003e68 <.Loc.836>:
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
    3e68:	65 b8       	out	0x05, r6	; 5

00003e6a <.Loc.838>:
          wait_about5ms();
    3e6a:	81 e0       	ldi	r24, 0x01	; 1
    3e6c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <sleep_5ms>

00003e70 <.LVL271>:
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
    3e70:	15 b8       	out	0x05, r1	; 5

00003e72 <.Loc.841>:
          if(W5msReadADC(HighPin) > 244) {
    3e72:	89 81       	ldd	r24, Y+1	; 0x01
    3e74:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00003e78 <.LVL272>:
    3e78:	85 3f       	cpi	r24, 0xF5	; 245
    3e7a:	91 05       	cpc	r25, r1
    3e7c:	18 f4       	brcc	.+6      	; 0x3e84 <.L19>

00003e7e <.Loc.844>:
          PartFound = PART_TRIAC;
    3e7e:	87 e0       	ldi	r24, 0x07	; 7
    3e80:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>

00003e84 <.L19>:
  update_pins = 1;			// if a part is found, always update the pins
    3e84:	81 e0       	ldi	r24, 0x01	; 1
    3e86:	f2 c0       	rjmp	.+484    	; 0x406c <.L53>

00003e88 <.L42>:
      R_DDR = LoPinRL | TriPinRL;
    3e88:	84 b8       	out	0x04, r8	; 4

00003e8a <.LVL275>:
      R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
    3e8a:	28 85       	ldd	r18, Y+8	; 0x08
    3e8c:	25 b9       	out	0x05, r18	; 5

00003e8e <.Loc.852>:
      adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
    3e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e90:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00003e94 <.LVL276>:
    3e94:	6c 01       	movw	r12, r24

00003e96 <.LVL277>:
      adc.tp1 = ReadADC(TristatePin);	// voltage at the Base 
    3e96:	8b 81       	ldd	r24, Y+3	; 0x03
    3e98:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00003e9c <.LVL278>:
    3e9c:	8e 83       	std	Y+6, r24	; 0x06
    3e9e:	9c 87       	std	Y+12, r25	; 0x0c

00003ea0 <.LVL279>:
      adc.rtp = vcc_diff(adc.tp1);	// voltage at Base resistor
    3ea0:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vcc_diff>

00003ea4 <.LVL280>:
    3ea4:	8c 01       	movw	r16, r24

00003ea6 <.LVL281>:
          tmp16 -= adc.lp_otr;
    3ea6:	c6 01       	movw	r24, r12

00003ea8 <.Loc.862>:
       if (tmp16 > adc.lp_otr) {
    3ea8:	2c 14       	cp	r2, r12
    3eaa:	3d 04       	cpc	r3, r13
    3eac:	10 f4       	brcc	.+4      	; 0x3eb2 <.L44>

00003eae <.Loc.863>:
          tmp16 -= adc.lp_otr;
    3eae:	82 19       	sub	r24, r2
    3eb0:	93 09       	sbc	r25, r3

00003eb2 <.L44>:
       c_hfe = (unsigned long)((unsigned long)unsigned_diff(tmp16, adc.rtp) * 100) / adc.rtp;
    3eb2:	b8 01       	movw	r22, r16
    3eb4:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

00003eb8 <.LVL283>:
    3eb8:	9c 01       	movw	r18, r24
    3eba:	a4 e6       	ldi	r26, 0x64	; 100
    3ebc:	b0 e0       	ldi	r27, 0x00	; 0
    3ebe:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>
    3ec2:	52 cf       	rjmp	.-348    	; 0x3d68 <.L112>

00003ec4 <.L46>:
      ADC_DDR = LoADCm;	//Low-Pin to output 0V
    3ec4:	77 b8       	out	0x07, r7	; 7

00003ec6 <.Loc.870>:
      R_DDR =  TriPinRL;	//R_L port of Tristate-Pin (Basis) to output
    3ec6:	48 85       	ldd	r20, Y+8	; 0x08
    3ec8:	44 b9       	out	0x04, r20	; 4

00003eca <.Loc.872>:
      R_PORT = TriPinRL;	//R_L port of Tristate-Pin (Basis) to VCC
    3eca:	45 b9       	out	0x05, r20	; 5

00003ecc <.Loc.874>:
      wait_about5ms();			// load gate capacitor
    3ecc:	81 e0       	ldi	r24, 0x01	; 1
    3ece:	0e 94 c5 07 	call	0xf8a	; 0xf8a <sleep_5ms>

00003ed2 <.LVL285>:
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
    3ed2:	8d 89       	ldd	r24, Y+21	; 0x15
    3ed4:	84 b9       	out	0x04, r24	; 4

00003ed6 <.Loc.877>:
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
    3ed6:	85 b9       	out	0x05, r24	; 5

00003ed8 <.Loc.879>:
      adc.hp2 = W5msReadADC(HighPin);	//measure the voltage at the collector  
    3ed8:	89 81       	ldd	r24, Y+1	; 0x01
    3eda:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00003ede <.LVL286>:
    3ede:	8c 01       	movw	r16, r24

00003ee0 <.LVL287>:
      adc.rhp = vcc_diff(adc.hp2);	// voltage at the collector resistor
    3ee0:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vcc_diff>

00003ee4 <.LVL288>:
    3ee4:	2c 01       	movw	r4, r24

00003ee6 <.LVL289>:
      adc.tp2 = ReadADC(TristatePin);	//measure the voltage at the base 
    3ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ee8:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00003eec <.LVL290>:
    3eec:	89 87       	std	Y+9, r24	; 0x09
    3eee:	9a 87       	std	Y+10, r25	; 0x0a

00003ef0 <.LVL291>:
      adc.rtp = vcc_diff(adc.tp2);	// voltage at the base resistor
    3ef0:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vcc_diff>

00003ef4 <.LVL292>:
    3ef4:	8c 83       	std	Y+4, r24	; 0x04
    3ef6:	9d 83       	std	Y+5, r25	; 0x05

00003ef8 <.LVL293>:
      adc.lp2 = ReadADC(LowPin);
    3ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    3efa:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00003efe <.LVL294>:
    3efe:	7c 01       	movw	r14, r24

00003f00 <.LVL295>:
      if(adc.rtp > 2557) {		// Basis-voltage R_H is low enough
    3f00:	ec 81       	ldd	r30, Y+4	; 0x04
    3f02:	fd 81       	ldd	r31, Y+5	; 0x05
    3f04:	ee 3f       	cpi	r30, 0xFE	; 254
    3f06:	f9 40       	sbci	r31, 0x09	; 9
    3f08:	08 f4       	brcc	.+2      	; 0x3f0c <.Loc.892>

00003f0a <L0^A>:
    3f0a:	c2 c0       	rjmp	.+388    	; 0x4090 <.L48>

00003f0c <.Loc.892>:
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
    3f0c:	84 e0       	ldi	r24, 0x04	; 4
    3f0e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>

00003f12 <.Loc.894>:
         PartMode = PART_MODE_NPN;
    3f12:	8c e0       	ldi	r24, 0x0C	; 12
    3f14:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <PartMode>

00003f18 <.LVL296>:
         tmp16 = unsigned_diff(adc.rhp, adc.lp_otr);	// subtract residual current
    3f18:	b1 01       	movw	r22, r2
    3f1a:	c2 01       	movw	r24, r4
    3f1c:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

00003f20 <.LVL297>:
    3f20:	8c 01       	movw	r16, r24

00003f22 <.LVL298>:
              (unsigned int)RR680PL)) / (unsigned int)adc.rtp;	
    3f22:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <resis680pl>
    3f26:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <resis680pl+0x1>
    3f2a:	40 e0       	ldi	r20, 0x00	; 0
    3f2c:	50 e0       	ldi	r21, 0x00	; 0

00003f2e <.Loc.901>:
         e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 10000) / 
    3f2e:	60 e8       	ldi	r22, 0x80	; 128
    3f30:	71 ea       	ldi	r23, 0xA1	; 161
    3f32:	83 e0       	ldi	r24, 0x03	; 3
    3f34:	9c e1       	ldi	r25, 0x1C	; 28
    3f36:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00003f3a <.Loc.902>:
    3f3a:	d8 01       	movw	r26, r16
    3f3c:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <__muluhisi3>

00003f40 <.Loc.903>:
              (unsigned int)RR680PL)) / (unsigned int)adc.rtp;	
    3f40:	ec 81       	ldd	r30, Y+4	; 0x04
    3f42:	fd 81       	ldd	r31, Y+5	; 0x05
    3f44:	9f 01       	movw	r18, r30
    3f46:	40 e0       	ldi	r20, 0x00	; 0
    3f48:	50 e0       	ldi	r21, 0x00	; 0

00003f4a <.Loc.904>:
         e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 10000) / 
    3f4a:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00003f4e <.LVL299>:
         if ((ntrans.count == 0) || (e_hfe > ntrans.hfe)){
    3f4e:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <ntrans+0xf>
    3f52:	81 15       	cp	r24, r1
    3f54:	71 f0       	breq	.+28     	; 0x3f72 <.L49>

00003f56 <.Loc.907>:
    3f56:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <ntrans>
    3f5a:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <ntrans+0x1>
    3f5e:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <ntrans+0x2>
    3f62:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <ntrans+0x3>
    3f66:	82 17       	cp	r24, r18
    3f68:	93 07       	cpc	r25, r19
    3f6a:	a4 07       	cpc	r26, r20
    3f6c:	b5 07       	cpc	r27, r21
    3f6e:	08 f0       	brcs	.+2      	; 0x3f72 <.L49>

00003f70 <L0^A>:
    3f70:	79 c0       	rjmp	.+242    	; 0x4064 <.L76>

00003f72 <.L49>:
            ntrans.hfe = e_hfe;
    3f72:	20 93 64 01 	sts	0x0164, r18	; 0x800164 <ntrans>
    3f76:	30 93 65 01 	sts	0x0165, r19	; 0x800165 <ntrans+0x1>
    3f7a:	40 93 66 01 	sts	0x0166, r20	; 0x800166 <ntrans+0x2>
    3f7e:	50 93 67 01 	sts	0x0167, r21	; 0x800167 <ntrans+0x3>

00003f82 <.Loc.910>:
            ntrans.uBE = unsigned_diff(adc.tp2, adc.lp2);
    3f82:	b7 01       	movw	r22, r14
    3f84:	89 85       	ldd	r24, Y+9	; 0x09
    3f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f88:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

00003f8c <.LVL300>:
    3f8c:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <ntrans+0x5>
    3f90:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <ntrans+0x4>

00003f94 <.Loc.913>:
            ntrans.current = (unsigned int)(((unsigned long)adc.rhp * 10000) / RR680PL); // Ic 1uA
    3f94:	92 01       	movw	r18, r4
    3f96:	a0 e1       	ldi	r26, 0x10	; 16
    3f98:	b7 e2       	ldi	r27, 0x27	; 39
    3f9a:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

00003f9e <.Loc.915>:
    3f9e:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <resis680pl>
    3fa2:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <resis680pl+0x1>
    3fa6:	40 e0       	ldi	r20, 0x00	; 0
    3fa8:	50 e0       	ldi	r21, 0x00	; 0
    3faa:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00003fae <.Loc.916>:
    3fae:	30 93 6b 01 	sts	0x016B, r19	; 0x80016b <ntrans+0x7>
    3fb2:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <ntrans+0x6>

00003fb6 <.LVL301>:
            update_pins = 1;
    3fb6:	81 e0       	ldi	r24, 0x01	; 1

00003fb8 <.L50>:
          if (c_hfe >  ntrans.hfe)
    3fb8:	40 91 64 01 	lds	r20, 0x0164	; 0x800164 <ntrans>
    3fbc:	50 91 65 01 	lds	r21, 0x0165	; 0x800165 <ntrans+0x1>
    3fc0:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <ntrans+0x2>
    3fc4:	70 91 67 01 	lds	r23, 0x0167	; 0x800167 <ntrans+0x3>
    3fc8:	48 15       	cp	r20, r8
    3fca:	59 05       	cpc	r21, r9
    3fcc:	6a 05       	cpc	r22, r10
    3fce:	7b 05       	cpc	r23, r11
    3fd0:	08 f0       	brcs	.+2      	; 0x3fd4 <.Loc.921>

00003fd2 <L0^A>:
    3fd2:	4a c0       	rjmp	.+148    	; 0x4068 <.L51>

00003fd4 <.Loc.921>:
            ntrans.hfe = c_hfe;
    3fd4:	80 92 64 01 	sts	0x0164, r8	; 0x800164 <ntrans>
    3fd8:	90 92 65 01 	sts	0x0165, r9	; 0x800165 <ntrans+0x1>
    3fdc:	a0 92 66 01 	sts	0x0166, r10	; 0x800166 <ntrans+0x2>
    3fe0:	b0 92 67 01 	sts	0x0167, r11	; 0x800167 <ntrans+0x3>

00003fe4 <.Loc.923>:
            ntrans.uBE = unsigned_diff(adc.tp1, adc.lp1);
    3fe4:	b6 01       	movw	r22, r12
    3fe6:	8e 81       	ldd	r24, Y+6	; 0x06

00003fe8 <.LVL303>:
    3fe8:	9c 85       	ldd	r25, Y+12	; 0x0c
    3fea:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

00003fee <.LVL304>:
    3fee:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <ntrans+0x5>
    3ff2:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <ntrans+0x4>

00003ff6 <.Loc.927>:
            ntrans.current = (unsigned int)(((unsigned long)adc.lp1 * 10000) / RR680MI); // Ie 1uA
    3ff6:	96 01       	movw	r18, r12
    3ff8:	a0 e1       	ldi	r26, 0x10	; 16
    3ffa:	b7 e2       	ldi	r27, 0x27	; 39
    3ffc:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

00004000 <.Loc.930>:
    4000:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <resis680mi>
    4004:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <resis680mi+0x1>
    4008:	40 e0       	ldi	r20, 0x00	; 0
    400a:	50 e0       	ldi	r21, 0x00	; 0
    400c:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00004010 <.Loc.931>:
            ntrans.current += 10000;	// mark current at emitter!
    4010:	20 5f       	subi	r18, 0xF0	; 240
    4012:	38 4d       	sbci	r19, 0xD8	; 216
    4014:	30 93 6b 01 	sts	0x016B, r19	; 0x80016b <ntrans+0x7>
    4018:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <ntrans+0x6>

0000401c <.L52>:
            ntrans.ice0 = (unsigned int)(((unsigned long)adc.lp_otr * 10000) / RR680MI); // ICE0 0.01mA
    401c:	91 01       	movw	r18, r2
    401e:	a0 e1       	ldi	r26, 0x10	; 16
    4020:	b7 e2       	ldi	r27, 0x27	; 39
    4022:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

00004026 <.Loc.936>:
    4026:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <resis680mi>
    402a:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <resis680mi+0x1>
    402e:	40 e0       	ldi	r20, 0x00	; 0
    4030:	50 e0       	ldi	r21, 0x00	; 0
    4032:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00004036 <.Loc.937>:
    4036:	30 93 6d 01 	sts	0x016D, r19	; 0x80016d <ntrans+0x9>
    403a:	20 93 6c 01 	sts	0x016C, r18	; 0x80016c <ntrans+0x8>

0000403e <.Loc.938>:
            ntrans.ices = (unsigned int)(((unsigned long)adc.vCEs * 10000) / RR680PL); // ICEs 0.01mA
    403e:	2e 85       	ldd	r18, Y+14	; 0x0e
    4040:	3f 85       	ldd	r19, Y+15	; 0x0f
    4042:	a0 e1       	ldi	r26, 0x10	; 16
    4044:	b7 e2       	ldi	r27, 0x27	; 39
    4046:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

0000404a <.Loc.940>:
    404a:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <resis680pl>
    404e:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <resis680pl+0x1>
    4052:	40 e0       	ldi	r20, 0x00	; 0
    4054:	50 e0       	ldi	r21, 0x00	; 0
    4056:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

0000405a <.Loc.941>:
    405a:	30 93 6f 01 	sts	0x016F, r19	; 0x80016f <ntrans+0xb>
    405e:	20 93 6e 01 	sts	0x016E, r18	; 0x80016e <ntrans+0xa>
    4062:	10 cf       	rjmp	.-480    	; 0x3e84 <.L19>

00004064 <.L76>:
         update_pins = 0;		// only update pins, if better hFE
    4064:	80 e0       	ldi	r24, 0x00	; 0
    4066:	a8 cf       	rjmp	.-176    	; 0x3fb8 <.L50>

00004068 <.L51>:
         if (update_pins != 0) {
    4068:	81 11       	cpse	r24, r1
    406a:	d8 cf       	rjmp	.-80     	; 0x401c <.L52>

0000406c <.L53>:
 ntrans.count++;
    406c:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <ntrans+0xf>
    4070:	9f 5f       	subi	r25, 0xFF	; 255
    4072:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <ntrans+0xf>

00004076 <.Loc.947>:
 if (update_pins != 0) {
    4076:	81 15       	cp	r24, r1
    4078:	09 f4       	brne	.+2      	; 0x407c <.LVL309>

0000407a <L0^A>:
    407a:	e1 cb       	rjmp	.-2110   	; 0x383e <.L63>

0000407c <.LVL309>:
    ntrans.b = TristatePin;	// save Pin-constellation
    407c:	fb 81       	ldd	r31, Y+3	; 0x03
    407e:	f0 93 70 01 	sts	0x0170, r31	; 0x800170 <ntrans+0xc>

00004082 <.Loc.951>:
    ntrans.c = HighPin;
    4082:	29 81       	ldd	r18, Y+1	; 0x01
    4084:	20 93 71 01 	sts	0x0171, r18	; 0x800171 <ntrans+0xd>

00004088 <.Loc.953>:
    ntrans.e = LowPin;
    4088:	3a 81       	ldd	r19, Y+2	; 0x02
    408a:	30 93 72 01 	sts	0x0172, r19	; 0x800172 <ntrans+0xe>
    408e:	d7 cb       	rjmp	.-2130   	; 0x383e <.L63>

00004090 <.L48>:
      if((adc.lp_otr < 97) && (adc.rhp > 3400)) {
    4090:	f1 e6       	ldi	r31, 0x61	; 97
    4092:	2f 16       	cp	r2, r31
    4094:	31 04       	cpc	r3, r1
    4096:	08 f0       	brcs	.+2      	; 0x409a <.Loc.957>

00004098 <L0^A>:
    4098:	64 c0       	rjmp	.+200    	; 0x4162 <.L45>

0000409a <.Loc.957>:
    409a:	29 e4       	ldi	r18, 0x49	; 73
    409c:	42 16       	cp	r4, r18
    409e:	2d e0       	ldi	r18, 0x0D	; 13
    40a0:	52 06       	cpc	r5, r18
    40a2:	08 f4       	brcc	.+2      	; 0x40a6 <.Loc.958>

000040a4 <L0^A>:
    40a4:	5e c0       	rjmp	.+188    	; 0x4162 <.L45>

000040a6 <.Loc.958>:
         PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
    40a6:	85 e0       	ldi	r24, 0x05	; 5
    40a8:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>

000040ac <.Loc.960>:
         PartMode = PART_MODE_MOS|N_CHANNEL|E_MODE;
    40ac:	82 e0       	ldi	r24, 0x02	; 2
    40ae:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <PartMode>

000040b2 <.Loc.962>:
         if (adc.hp2 > (250+adc.lp2)) {
    40b2:	c7 01       	movw	r24, r14
    40b4:	86 50       	subi	r24, 0x06	; 6
    40b6:	9f 4f       	sbci	r25, 0xFF	; 255

000040b8 <.Loc.964>:
    40b8:	80 17       	cp	r24, r16
    40ba:	91 07       	cpc	r25, r17
    40bc:	e0 f5       	brcc	.+120    	; 0x4136 <.L54>

000040be <.Loc.965>:
            PartMode = PART_MODE_IGBT|N_CHANNEL|E_MODE;
    40be:	83 e0       	ldi	r24, 0x03	; 3
    40c0:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <PartMode>

000040c4 <.L55>:
         PinMSK = HiADCm & 7;
    40c4:	3e 89       	ldd	r19, Y+22	; 0x16
    40c6:	37 70       	andi	r19, 0x07	; 7
    40c8:	f3 2e       	mov	r15, r19

000040ca <.LVL312>:
         ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
    40ca:	8b 81       	ldd	r24, Y+3	; 0x03
    40cc:	80 64       	ori	r24, 0x40	; 64
    40ce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

000040d2 <.LVL313>:
    40d2:	4b e0       	ldi	r20, 0x0B	; 11
    40d4:	4c 83       	std	Y+4, r20	; 0x04

000040d6 <.Loc.975>:
         tmp16 = 1;			// round up ((1*4)/9)
    40d6:	01 e0       	ldi	r16, 0x01	; 1
    40d8:	10 e0       	ldi	r17, 0x00	; 0

000040da <.L58>:
            wdt_reset();
    40da:	a8 95       	wdr

000040dc <.Loc.977>:
            ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
    40dc:	60 e0       	ldi	r22, 0x00	; 0
    40de:	88 85       	ldd	r24, Y+8	; 0x08
    40e0:	61 d2       	rcall	.+1218   	; 0x45a4 <ChargePin10ms>

000040e2 <.LVL315>:
            R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
    40e2:	8d 89       	ldd	r24, Y+21	; 0x15
    40e4:	84 b9       	out	0x04, r24	; 4

000040e6 <.LVL316>:
            R_PORT = HiPinRL | TriPinRH;
    40e6:	85 b9       	out	0x05, r24	; 5

000040e8 <.L56>:
            while ((ADC_PIN&PinMSK));	// Wait, until the MOSFET switch and Drain moved to low 
    40e8:	86 b1       	in	r24, 0x06	; 6

000040ea <.Loc.985>:
    40ea:	8f 21       	and	r24, r15
    40ec:	81 11       	cpse	r24, r1
    40ee:	fc cf       	rjmp	.-8      	; 0x40e8 <.L56>

000040f0 <.Loc.986>:
            R_DDR = HiPinRL;		// switch off current
    40f0:	64 b8       	out	0x04, r6	; 4

000040f2 <.Loc.988>:
            ADCSRA |= (1<<ADSC);		// start ADC conversion
    40f2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

000040f6 <.Loc.989>:
    40f6:	80 64       	ori	r24, 0x40	; 64
    40f8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

000040fc <.L57>:
            while (ADCSRA&(1<<ADSC));	// wait until ADC finished
    40fc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    4100:	86 fd       	sbrc	r24, 6
    4102:	fc cf       	rjmp	.-8      	; 0x40fc <.L57>

00004104 <.Loc.992>:
            tmp16 += ADCW;		// add result of ADC
    4104:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    4108:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>

0000410c <.Loc.994>:
    410c:	08 0f       	add	r16, r24
    410e:	19 1f       	adc	r17, r25

00004110 <.LVL317>:
         for(ii=0;ii<11;ii++) {
    4110:	9c 81       	ldd	r25, Y+4	; 0x04
    4112:	91 50       	subi	r25, 0x01	; 1
    4114:	9c 83       	std	Y+4, r25	; 0x04

00004116 <.LVL318>:
    4116:	91 11       	cpse	r25, r1
    4118:	e0 cf       	rjmp	.-64     	; 0x40da <.L58>

0000411a <.LVL319>:
         tmp16 *= 4;	//is equal to 44 * ADCW
    411a:	c8 01       	movw	r24, r16
    411c:	88 0f       	add	r24, r24
    411e:	99 1f       	adc	r25, r25
    4120:	88 0f       	add	r24, r24
    4122:	99 1f       	adc	r25, r25

00004124 <.LVL320>:
         ntrans.gthvoltage = tmp16/ 9;	//scale to mV
    4124:	69 e0       	ldi	r22, 0x09	; 9
    4126:	70 e0       	ldi	r23, 0x00	; 0
    4128:	0e 94 00 38 	call	0x7000	; 0x7000 <__udivmodhi4>

0000412c <.LVL321>:
    412c:	70 93 6f 01 	sts	0x016F, r23	; 0x80016f <ntrans+0xb>
    4130:	60 93 6e 01 	sts	0x016E, r22	; 0x80016e <ntrans+0xa>
    4134:	77 ca       	rjmp	.-2834   	; 0x3624 <.L114>

00004136 <.L54>:
            ntrans.uBE = RR680PL * (unsigned long)unsigned_diff(adc.hp2, adc.lp2) / adc.rhp; // DS resistance in 0.1 OHm
    4136:	c0 90 1b 01 	lds	r12, 0x011B	; 0x80011b <resis680pl>
    413a:	d0 90 1c 01 	lds	r13, 0x011C	; 0x80011c <resis680pl+0x1>

0000413e <.LVL323>:
    413e:	b7 01       	movw	r22, r14
    4140:	c8 01       	movw	r24, r16
    4142:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

00004146 <.LVL324>:
    4146:	96 01       	movw	r18, r12
    4148:	dc 01       	movw	r26, r24
    414a:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

0000414e <.Loc.1007>:
    414e:	92 01       	movw	r18, r4
    4150:	40 e0       	ldi	r20, 0x00	; 0
    4152:	50 e0       	ldi	r21, 0x00	; 0

00004154 <.Loc.1008>:
    4154:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00004158 <.Loc.1009>:
    4158:	30 93 69 01 	sts	0x0169, r19	; 0x800169 <ntrans+0x5>
    415c:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <ntrans+0x4>
    4160:	b1 cf       	rjmp	.-158    	; 0x40c4 <.L55>

00004162 <.L45>:
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
    4162:	17 b8       	out	0x07, r1	; 7

00004164 <.Loc.1012>:
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
    4164:	18 b8       	out	0x08, r1	; 8
    4166:	b1 ca       	rjmp	.-2718   	; 0x36ca <.L11>

00004168 <.L64>:
      R_DDR = LoPinRH;
    4168:	ec 89       	ldd	r30, Y+20	; 0x14
    416a:	e4 b9       	out	0x04, r30	; 4

0000416c <.Loc.1016>:
      R_PORT = 0;
    416c:	15 b8       	out	0x05, r1	; 5

0000416e <.Loc.1018>:
      ADC_DDR = HiADCm;		// switch High-Pin fix to VCC
    416e:	fe 89       	ldd	r31, Y+22	; 0x16
    4170:	f7 b9       	out	0x07, r31	; 7

00004172 <.Loc.1020>:
      ADC_PORT = HiADCp;
    4172:	f8 b9       	out	0x08, r31	; 8

00004174 <.Loc.1022>:
      ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    4174:	60 e0       	ldi	r22, 0x00	; 0
    4176:	88 85       	ldd	r24, Y+8	; 0x08
    4178:	15 d2       	rcall	.+1066   	; 0x45a4 <ChargePin10ms>

0000417a <.LVL327>:
      adc.hp2 = vcc_diff(W5msReadADC(LowPin)); // GND--R_H--LP--|<--VCC
    417a:	8a 81       	ldd	r24, Y+2	; 0x02
    417c:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00004180 <.LVL328>:
    4180:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vcc_diff>

00004184 <.LVL329>:
    4184:	9c 01       	movw	r18, r24

00004186 <.LVL330>:
  adc.hp1 = unsigned_diff(W5msReadADC(HighPin), ReadADC(LowPin)); // GND--R_L--LP--|<--VCC
    4186:	67 01       	movw	r12, r14

00004188 <.LVL331>:
    4188:	11 cb       	rjmp	.-2526   	; 0x37ac <.L65>

0000418a <.L67>:
  else                tmp16 = adc.hp1/16;
    418a:	b6 01       	movw	r22, r12
    418c:	94 e0       	ldi	r25, 0x04	; 4

0000418e <.L1^B3>:
    418e:	76 95       	lsr	r23
    4190:	67 95       	ror	r22
    4192:	9a 95       	dec	r25
    4194:	e1 f7       	brne	.-8      	; 0x418e <.L1^B3>

00004196 <.LVL333>:
    4196:	21 cb       	rjmp	.-2494   	; 0x37da <.L68>

00004198 <.L59>:
  GetResistance(HighPin, LowPin);
    4198:	6a 81       	ldd	r22, Y+2	; 0x02
    419a:	89 81       	ldd	r24, Y+1	; 0x01
    419c:	01 d0       	rcall	.+2      	; 0x41a0 <GetResistance>

0000419e <.LVL335>:
    419e:	4f cb       	rjmp	.-2402   	; 0x383e <.L63>

000041a0 <GetResistance>:
#include <stdlib.h>
#include "Transistortester.h"

//******************************************************************
void GetResistance(uint8_t HighPin, uint8_t LowPin)
  {
    41a0:	a6 e0       	ldi	r26, 0x06	; 6
    41a2:	b0 e0       	ldi	r27, 0x00	; 0
    41a4:	e6 ed       	ldi	r30, 0xD6	; 214
    41a6:	f0 e2       	ldi	r31, 0x20	; 32
    41a8:	0c 94 8c 38 	jmp	0x7118	; 0x7118 <.Loc.2>

000041ac <.L1^B1>:
    41ac:	8d 83       	std	Y+5, r24	; 0x05
    41ae:	6e 83       	std	Y+6, r22	; 0x06

000041b0 <.Loc.10>:
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
    41b0:	a8 95       	wdr

000041b2 <.Loc.17>:
  addr = &PinRLRHADCtab[LowPin-TP_MIN];		// address of the combined RL / RH / ADC pin table
    41b2:	2e 81       	ldd	r18, Y+6	; 0x06
    41b4:	82 2f       	mov	r24, r18

000041b6 <.LVL1>:
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	fc 01       	movw	r30, r24
    41ba:	e5 5b       	subi	r30, 0xB5	; 181
    41bc:	fd 4f       	sbci	r31, 0xFD	; 253

000041be <.LBB2>:
  LoPinRL = pgm_read_byte(addr);		// instruction for LowPin R_L
    41be:	54 90       	lpm	r5, Z

000041c0 <.LBB3>:
  addr += 3;			// address of PinRHtab[LowPin]
  LoPinRH = pgm_read_byte(addr);		// instruction for LowPin R_H
#else
  LoPinRH = (LoPinRL + LoPinRL);
#endif
  addr += 3;			// address of PinADCtab[LowPin]
    41c0:	33 96       	adiw	r30, 0x03	; 3

000041c2 <.LBB4>:
  LoADCp = pgm_read_byte(addr);		// instruction for ADC Low-Pin, including | TXD_VAL
    41c2:	24 91       	lpm	r18, Z

000041c4 <.LBE4>:

  addr = &PinRLRHADCtab[HighPin-TP_MIN];
    41c4:	3d 81       	ldd	r19, Y+5	; 0x05
    41c6:	43 2f       	mov	r20, r19
    41c8:	50 e0       	ldi	r21, 0x00	; 0
    41ca:	fa 01       	movw	r30, r20

000041cc <.LVL6>:
    41cc:	e5 5b       	subi	r30, 0xB5	; 181
    41ce:	fd 4f       	sbci	r31, 0xFD	; 253

000041d0 <.LBB5>:
  HiPinRL = pgm_read_byte(addr);		// instruction for HighPin R_L
    41d0:	d4 90       	lpm	r13, Z

000041d2 <.LBB6>:
  addr += 3;			// address of PinRLtab[HighPin]
  HiPinRH = pgm_read_byte(addr);		// instruction for HighPin R_H
#else
  HiPinRH = (HiPinRL + HiPinRL);
#endif
  addr += 3;			// address of PinADCtab[HighPin]
    41d2:	33 96       	adiw	r30, 0x03	; 3

000041d4 <.LBB7>:
  HiADCp = pgm_read_byte(addr);		// instruction for ADC High-Pin, including | TXD_VAL
    41d4:	b4 90       	lpm	r11, Z

000041d6 <.LBE7>:

//##########################################################################################
// Search for resistors
//##########################################################################################
  if ((ptrans.count  + ntrans.count) > 0) {
    41d6:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <ptrans+0xf>

000041da <.LVL11>:
    41da:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <ntrans+0xf>

000041de <.Loc.58>:
    41de:	63 0f       	add	r22, r19
    41e0:	77 27       	eor	r23, r23
    41e2:	77 1f       	adc	r23, r23

000041e4 <.Loc.59>:
    41e4:	67 2b       	or	r22, r23
    41e6:	09 f0       	breq	.+2      	; 0x41ea <.LVL12>

000041e8 <L0^A>:
    41e8:	66 c0       	rjmp	.+204    	; 0x42b6 <.L1>

000041ea <.LVL12>:
     return;	// no resistors are searched, if transistors are detected
  }
  resnum = (LowPin - TP_MIN + HighPin - TP_MIN - 1);	// resistor-Number 0:1 = 0, 0:2 = 1, 1:2 = 2
  // resistor measurement
  wdt_reset();
    41ea:	a8 95       	wdr

000041ec <.Loc.62>:
// U_SCALE can be set to 4 for better resolution of ReadADC result
#if U_SCALE != 1
  ADCconfig.U_AVCC = (adc_vcc_reference * U_SCALE);	// scale to higher resolution, mV scale is not required
    41ec:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <adc_vcc_reference>
    41f0:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <adc_vcc_reference+0x1>
    41f4:	66 0f       	add	r22, r22
    41f6:	77 1f       	adc	r23, r23
    41f8:	66 0f       	add	r22, r22
    41fa:	77 1f       	adc	r23, r23

000041fc <.Loc.64>:
    41fc:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <ADCconfig+0x5>
    4200:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <ADCconfig+0x4>

00004204 <.Loc.65>:
  ADCconfig.U_Bandgap = (adc_internal_reference * U_SCALE);
    4204:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <adc_internal_reference>
    4208:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <adc_internal_reference+0x1>
    420c:	66 0f       	add	r22, r22
    420e:	77 1f       	adc	r23, r23
    4210:	66 0f       	add	r22, r22
    4212:	77 1f       	adc	r23, r23

00004214 <.Loc.67>:
    4214:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <ADCconfig+0x3>
    4218:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <ADCconfig+0x2>

0000421c <.Loc.68>:
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
    421c:	3e eb       	ldi	r19, 0xBE	; 190
    421e:	30 93 1e 01 	sts	0x011E, r19	; 0x80011e <ADCconfig>

00004222 <.LVL13>:
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
#if FLASHEND > 0x1fff
  for (ii=0; ii<NumOfDiodes; ii++) {
    4222:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <NumOfDiodes>
    4226:	66 e8       	ldi	r22, 0x86	; 134
    4228:	71 e0       	ldi	r23, 0x01	; 1

0000422a <.Loc.72>:
    422a:	db 01       	movw	r26, r22

0000422c <.Loc.73>:
     // never search a resistor at the same place, where a diode is detected
     if ((diodes.Anode[ii] + diodes.Cathode[ii]) ==  (HighPin + LowPin)) goto testend;
    422c:	48 0f       	add	r20, r24
    422e:	59 1f       	adc	r21, r25

00004230 <.L3>:
  for (ii=0; ii<NumOfDiodes; ii++) {
    4230:	8a 2f       	mov	r24, r26
    4232:	86 1b       	sub	r24, r22
    4234:	83 17       	cp	r24, r19
    4236:	10 f1       	brcs	.+68     	; 0x427c <.L5>

00004238 <.Loc.75>:
  }
#endif
  ADC_PORT = TXD_VAL;
    4238:	18 b8       	out	0x08, r1	; 8

0000423a <.LVL15>:
  ADC_DDR = LoADCp | TXD_MSK;		//switch Low-Pin to output (GND)
    423a:	27 b9       	out	0x07, r18	; 7

0000423c <.Loc.79>:
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    423c:	d4 b8       	out	0x04, r13	; 4

0000423e <.Loc.81>:
  R_PORT = HiPinRL;	
    423e:	d5 b8       	out	0x05, r13	; 5

00004240 <.LVL16>:
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
    4240:	00 e0       	ldi	r16, 0x00	; 0
    4242:	10 e0       	ldi	r17, 0x00	; 0

00004244 <.Loc.87>:
  for (ii=1;ii<MAX_REPEAT;ii++) {
    4244:	cc 24       	eor	r12, r12
    4246:	c3 94       	inc	r12

00004248 <.L8>:
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
    4248:	8e 81       	ldd	r24, Y+6	; 0x06
    424a:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

0000424e <.LVL18>:
    424e:	98 2e       	mov	r9, r24
    4250:	89 2e       	mov	r8, r25

00004252 <.LVL19>:
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    4252:	78 01       	movw	r14, r16

00004254 <.Loc.91>:
    4254:	8d 81       	ldd	r24, Y+5	; 0x05

00004256 <.LVL20>:
    4256:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

0000425a <.LVL21>:
    425a:	8c 01       	movw	r16, r24

0000425c <.LVL22>:
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
    425c:	8e 19       	sub	r24, r14
    425e:	9f 09       	sbc	r25, r15
    4260:	97 ff       	sbrs	r25, 7
    4262:	03 c0       	rjmp	.+6      	; 0x426a <.L7>
    4264:	91 95       	neg	r25
    4266:	81 95       	neg	r24
    4268:	91 09       	sbc	r25, r1

0000426a <.L7>:
     if (udiff < 3) break;
    426a:	03 97       	sbiw	r24, 0x03	; 3
    426c:	0c f4       	brge	.+2      	; 0x4270 <.LVL23>

0000426e <L0^A>:
    426e:	6b c1       	rjmp	.+726    	; 0x4546 <.L6>

00004270 <.LVL23>:
     adc.hp2 = adc.hp1;
     wdt_reset();
    4270:	a8 95       	wdr

00004272 <.Loc.100>:
  for (ii=1;ii<MAX_REPEAT;ii++) {
    4272:	c3 94       	inc	r12

00004274 <.Loc.101>:
    4274:	89 e1       	ldi	r24, 0x19	; 25
    4276:	c8 12       	cpse	r12, r24
    4278:	e7 cf       	rjmp	.-50     	; 0x4248 <.L8>
    427a:	0a c0       	rjmp	.+20     	; 0x4290 <.L4>

0000427c <.L5>:
     if ((diodes.Anode[ii] + diodes.Cathode[ii]) ==  (HighPin + LowPin)) goto testend;
    427c:	9d 91       	ld	r25, X+

0000427e <.Loc.104>:
    427e:	15 96       	adiw	r26, 0x05	; 5
    4280:	8c 91       	ld	r24, X
    4282:	15 97       	sbiw	r26, 0x05	; 5

00004284 <.Loc.105>:
    4284:	89 0f       	add	r24, r25
    4286:	99 27       	eor	r25, r25
    4288:	99 1f       	adc	r25, r25

0000428a <.Loc.106>:
    428a:	84 17       	cp	r24, r20
    428c:	95 07       	cpc	r25, r21
    428e:	81 f6       	brne	.-96     	; 0x4230 <.L3>

00004290 <.L4>:
        } // end  ResistorChecked[] != 0
     }	/* end if (PartFound < PART_TRANSISTOR) */
  }
  testend:			// end of resistor measurement
#if U_SCALE != 1
  ADCconfig.U_AVCC = adc_vcc_reference;	// scale to higher resolution, mV scale is not required
    4290:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <adc_vcc_reference>
    4294:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <adc_vcc_reference+0x1>
    4298:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <ADCconfig+0x5>
    429c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <ADCconfig+0x4>

000042a0 <.Loc.109>:
  ADCconfig.U_Bandgap = adc_internal_reference;	// set back to normal resolution
    42a0:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <adc_internal_reference>
    42a4:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <adc_internal_reference+0x1>
    42a8:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <ADCconfig+0x3>
    42ac:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <ADCconfig+0x2>

000042b0 <.Loc.111>:
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
    42b0:	89 e1       	ldi	r24, 0x19	; 25
    42b2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ADCconfig>

000042b6 <.L1>:
#endif

  return;
} // end GetResistance()
    42b6:	26 96       	adiw	r28, 0x06	; 6
    42b8:	e0 e1       	ldi	r30, 0x10	; 16
    42ba:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <.Loc.2>

000042be <.L26>:
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    42be:	a5 e8       	ldi	r26, 0x85	; 133
    42c0:	ca 16       	cp	r12, r26
    42c2:	a1 e0       	ldi	r26, 0x01	; 1
    42c4:	da 06       	cpc	r13, r26

000042c6 <.L37>:
  if (adc.hp2 < (4972*U_SCALE)) { 
    42c6:	20 f7       	brcc	.-56     	; 0x4290 <.L4>

000042c8 <.Loc.117>:
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
    42c8:	24 ea       	ldi	r18, 0xA4	; 164
    42ca:	e2 16       	cp	r14, r18
    42cc:	22 e0       	ldi	r18, 0x02	; 2
    42ce:	f2 06       	cpc	r15, r18
    42d0:	08 f0       	brcs	.+2      	; 0x42d4 <.Loc.119>

000042d2 <L0^A>:
    42d2:	b3 c0       	rjmp	.+358    	; 0x443a <.L14>

000042d4 <.Loc.119>:
        if (adc.lp2 < (38*U_SCALE)) {
    42d4:	38 e9       	ldi	r19, 0x98	; 152
    42d6:	a3 16       	cp	r10, r19
    42d8:	b1 04       	cpc	r11, r1
    42da:	d0 f2       	brcs	.-76     	; 0x4290 <.L4>

000042dc <.Loc.121>:
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / vcc_diff(adc.hp2);
    42dc:	c6 01       	movw	r24, r12
    42de:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vcc_diff>

000042e2 <.LVL30>:
    42e2:	ac 01       	movw	r20, r24

000042e4 <.Loc.123>:
    42e4:	96 01       	movw	r18, r12
    42e6:	a8 e9       	ldi	r26, 0x98	; 152
    42e8:	b7 eb       	ldi	r27, 0xB7	; 183
    42ea:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

000042ee <.Loc.124>:
    42ee:	9a 01       	movw	r18, r20
    42f0:	40 e0       	ldi	r20, 0x00	; 0
    42f2:	50 e0       	ldi	r21, 0x00	; 0

000042f4 <.Loc.125>:
    42f4:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>
    42f8:	29 01       	movw	r4, r18
    42fa:	3a 01       	movw	r6, r20

000042fc <.LVL31>:
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)vcc_diff(adc.lp2) / adc.lp2;
    42fc:	c5 01       	movw	r24, r10
    42fe:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vcc_diff>

00004302 <.LVL32>:
    4302:	9c 01       	movw	r18, r24
    4304:	a8 e9       	ldi	r26, 0x98	; 152
    4306:	b7 eb       	ldi	r27, 0xB7	; 183
    4308:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

0000430c <.Loc.129>:
    430c:	95 01       	movw	r18, r10
    430e:	40 e0       	ldi	r20, 0x00	; 0
    4310:	50 e0       	ldi	r21, 0x00	; 0

00004312 <.Loc.130>:
    4312:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00004316 <.LVL33>:
        if (adc.hp2 < U_INT_LIMIT) {
    4316:	88 e7       	ldi	r24, 0x78	; 120
    4318:	c8 16       	cp	r12, r24
    431a:	8f e0       	ldi	r24, 0x0F	; 15
    431c:	d8 06       	cpc	r13, r24
    431e:	08 f0       	brcs	.+2      	; 0x4322 <.Loc.133>

00004320 <L0^A>:
    4320:	70 c0       	rjmp	.+224    	; 0x4402 <.L15>

00004322 <.Loc.133>:
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    4322:	f2 e0       	ldi	r31, 0x02	; 2

00004324 <.L1^B2>:
    4324:	44 0c       	add	r4, r4
    4326:	55 1c       	adc	r5, r5
    4328:	66 1c       	adc	r6, r6
    432a:	77 1c       	adc	r7, r7
    432c:	fa 95       	dec	r31
    432e:	d1 f7       	brne	.-12     	; 0x4324 <.L1^B2>

00004330 <.LVL34>:
    4330:	c3 01       	movw	r24, r6
    4332:	b2 01       	movw	r22, r4
    4334:	62 0f       	add	r22, r18
    4336:	73 1f       	adc	r23, r19
    4338:	84 1f       	adc	r24, r20
    433a:	95 1f       	adc	r25, r21

0000433c <.L38>:
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    433c:	25 e0       	ldi	r18, 0x05	; 5
    433e:	30 e0       	ldi	r19, 0x00	; 0
    4340:	40 e0       	ldi	r20, 0x00	; 0
    4342:	50 e0       	ldi	r21, 0x00	; 0

00004344 <.LVL35>:
    4344:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00004348 <.L16>:
        lrx1 *= 100;
    4348:	a4 e6       	ldi	r26, 0x64	; 100
    434a:	b0 e0       	ldi	r27, 0x00	; 0
    434c:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <__muluhisi3>

00004350 <.LVL37>:
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
    4350:	64 55       	subi	r22, 0x54	; 84
    4352:	72 4f       	sbci	r23, 0xF2	; 242
    4354:	8f 4f       	sbci	r24, 0xFF	; 255
    4356:	9f 4f       	sbci	r25, 0xFF	; 255

00004358 <.LVL38>:
    4358:	4b 01       	movw	r8, r22
    435a:	5c 01       	movw	r10, r24

0000435c <.L18>:
     if(PartFound < PART_TRANSISTOR) {
    435c:	10 91 2f 01 	lds	r17, 0x012F	; 0x80012f <PartFound>

00004360 <.Loc.145>:
    4360:	14 30       	cpi	r17, 0x04	; 4
    4362:	08 f0       	brcs	.+2      	; 0x4366 <.Loc.146>

00004364 <L0^A>:
    4364:	95 cf       	rjmp	.-214    	; 0x4290 <.L4>

00004366 <.Loc.146>:
  resnum = (LowPin - TP_MIN + HighPin - TP_MIN - 1);	// resistor-Number 0:1 = 0, 0:2 = 1, 1:2 = 2
    4366:	9d 81       	ldd	r25, Y+5	; 0x05
    4368:	91 50       	subi	r25, 0x01	; 1
    436a:	ae 81       	ldd	r26, Y+6	; 0x06
    436c:	9a 0f       	add	r25, r26
    436e:	99 83       	std	Y+1, r25	; 0x01

00004370 <.Loc.147>:
        if (ResistorChecked[resnum] != 0) {
    4370:	89 2f       	mov	r24, r25
    4372:	90 e0       	ldi	r25, 0x00	; 0
    4374:	fc 01       	movw	r30, r24
    4376:	ec 55       	subi	r30, 0x5C	; 92
    4378:	fe 4f       	sbci	r31, 0xFE	; 254

0000437a <.Loc.149>:
    437a:	20 81       	ld	r18, Z
    437c:	88 0f       	add	r24, r24
    437e:	99 1f       	adc	r25, r25
    4380:	88 0f       	add	r24, r24
    4382:	99 1f       	adc	r25, r25

00004384 <.Loc.150>:
           lirx1 = (labs((long)lrx1 - (long)ResistorVal[resnum]) * 10) / (lrx1 + ResistorVal[resnum] + 100);
    4384:	86 55       	subi	r24, 0x56	; 86
    4386:	9e 4f       	sbci	r25, 0xFE	; 254
    4388:	dc 01       	movw	r26, r24

0000438a <.Loc.151>:
        if (ResistorChecked[resnum] != 0) {
    438a:	21 15       	cp	r18, r1
    438c:	09 f4       	brne	.+2      	; 0x4390 <.Loc.152>

0000438e <L0^A>:
    438e:	c3 c0       	rjmp	.+390    	; 0x4516 <.L23>

00004390 <.Loc.152>:
           lirx1 = (labs((long)lrx1 - (long)ResistorVal[resnum]) * 10) / (lrx1 + ResistorVal[resnum] + 100);
    4390:	cd 90       	ld	r12, X+
    4392:	dd 90       	ld	r13, X+
    4394:	ed 90       	ld	r14, X+
    4396:	fc 90       	ld	r15, X

00004398 <.LVL40>:
    4398:	a5 01       	movw	r20, r10
    439a:	94 01       	movw	r18, r8
    439c:	2c 19       	sub	r18, r12
    439e:	3d 09       	sbc	r19, r13
    43a0:	4e 09       	sbc	r20, r14
    43a2:	5f 09       	sbc	r21, r15
    43a4:	57 ff       	sbrs	r21, 7
    43a6:	07 c0       	rjmp	.+14     	; 0x43b6 <.L24>
    43a8:	50 95       	com	r21
    43aa:	40 95       	com	r20
    43ac:	30 95       	com	r19
    43ae:	21 95       	neg	r18
    43b0:	3f 4f       	sbci	r19, 0xFF	; 255
    43b2:	4f 4f       	sbci	r20, 0xFF	; 255
    43b4:	5f 4f       	sbci	r21, 0xFF	; 255

000043b6 <.L24>:
    43b6:	aa e0       	ldi	r26, 0x0A	; 10
    43b8:	b0 e0       	ldi	r27, 0x00	; 0
    43ba:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <__muluhisi3>

000043be <.Loc.157>:
    43be:	b4 e6       	ldi	r27, 0x64	; 100
    43c0:	cb 0e       	add	r12, r27
    43c2:	d1 1c       	adc	r13, r1
    43c4:	e1 1c       	adc	r14, r1
    43c6:	f1 1c       	adc	r15, r1

000043c8 <.LVL41>:
    43c8:	c8 0c       	add	r12, r8
    43ca:	d9 1c       	adc	r13, r9
    43cc:	ea 1c       	adc	r14, r10
    43ce:	fb 1c       	adc	r15, r11

000043d0 <.Loc.159>:
           if (lirx1  > 0) {
    43d0:	6c 15       	cp	r22, r12
    43d2:	7d 05       	cpc	r23, r13
    43d4:	8e 05       	cpc	r24, r14
    43d6:	9f 05       	cpc	r25, r15
    43d8:	08 f0       	brcs	.+2      	; 0x43dc <.Loc.160>

000043da <L0^A>:
    43da:	5a cf       	rjmp	.-332    	; 0x4290 <.L4>

000043dc <.Loc.160>:
              if (PartFound < PART_DIODE) {
    43dc:	13 30       	cpi	r17, 0x03	; 3
    43de:	19 f0       	breq	.+6      	; 0x43e6 <.L25>

000043e0 <.Loc.162>:
                 PartFound = PART_RESISTOR;	// only mark as resistor, if no other part found
    43e0:	81 e0       	ldi	r24, 0x01	; 1

000043e2 <.LVL42>:
    43e2:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>

000043e6 <.L25>:
              ResistorChecked[resnum] = 2;		// mark as checked in both direction
    43e6:	82 e0       	ldi	r24, 0x02	; 2
    43e8:	80 83       	st	Z, r24

000043ea <.Loc.167>:
              ResistorList[ResistorsFound] = resnum;	// save number of this resistor
    43ea:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <ResistorsFound>
    43ee:	e8 2f       	mov	r30, r24

000043f0 <.Loc.169>:
    43f0:	f0 e0       	ldi	r31, 0x00	; 0

000043f2 <.Loc.170>:
    43f2:	e9 55       	subi	r30, 0x59	; 89
    43f4:	fe 4f       	sbci	r31, 0xFE	; 254
    43f6:	29 81       	ldd	r18, Y+1	; 0x01
    43f8:	20 83       	st	Z, r18

000043fa <.Loc.171>:
              ResistorsFound++;			// 1 more resistor found
    43fa:	8f 5f       	subi	r24, 0xFF	; 255
    43fc:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <ResistorsFound>
    4400:	47 cf       	rjmp	.-370    	; 0x4290 <.L4>

00004402 <.L15>:
        } else if (adc.lp2 < U_INT_LIMIT){
    4402:	98 e7       	ldi	r25, 0x78	; 120
    4404:	a9 16       	cp	r10, r25
    4406:	9f e0       	ldi	r25, 0x0F	; 15
    4408:	b9 06       	cpc	r11, r25
    440a:	70 f4       	brcc	.+28     	; 0x4428 <.L17>

0000440c <.Loc.175>:
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    440c:	ca 01       	movw	r24, r20
    440e:	b9 01       	movw	r22, r18
    4410:	e2 e0       	ldi	r30, 0x02	; 2

00004412 <.L1^B3>:
    4412:	66 0f       	add	r22, r22
    4414:	77 1f       	adc	r23, r23
    4416:	88 1f       	adc	r24, r24
    4418:	99 1f       	adc	r25, r25
    441a:	ea 95       	dec	r30
    441c:	d1 f7       	brne	.-12     	; 0x4412 <.L1^B3>

0000441e <.Loc.177>:
    441e:	64 0d       	add	r22, r4
    4420:	75 1d       	adc	r23, r5
    4422:	86 1d       	adc	r24, r6
    4424:	97 1d       	adc	r25, r7
    4426:	8a cf       	rjmp	.-236    	; 0x433c <.L38>

00004428 <.L17>:
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
    4428:	24 0d       	add	r18, r4
    442a:	35 1d       	adc	r19, r5
    442c:	46 1d       	adc	r20, r6
    442e:	57 1d       	adc	r21, r7

00004430 <.LVL45>:
    4430:	56 95       	lsr	r21
    4432:	47 95       	ror	r20
    4434:	37 95       	ror	r19
    4436:	27 95       	ror	r18

00004438 <.LVL46>:
    4438:	87 cf       	rjmp	.-242    	; 0x4348 <.L16>

0000443a <.L14>:
        lirx1 =(unsigned long)RR680PL * (unsigned long)unsigned_diff(adc.hp1, adc.tp1) / vcc_diff(adc.hp1);
    443a:	c0 90 1b 01 	lds	r12, 0x011B	; 0x80011b <resis680pl>
    443e:	d0 90 1c 01 	lds	r13, 0x011C	; 0x80011c <resis680pl+0x1>

00004442 <.LVL48>:
  if (adc.tp1 > adc.hp1) {
    4442:	69 2d       	mov	r22, r9
    4444:	78 2d       	mov	r23, r8
    4446:	06 17       	cp	r16, r22
    4448:	17 07       	cpc	r17, r23
    444a:	08 f4       	brcc	.+2      	; 0x444e <.L19>
    444c:	b8 01       	movw	r22, r16

0000444e <.L19>:
        lirx1 =(unsigned long)RR680PL * (unsigned long)unsigned_diff(adc.hp1, adc.tp1) / vcc_diff(adc.hp1);
    444e:	c8 01       	movw	r24, r16
    4450:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

00004454 <.LVL49>:
    4454:	96 01       	movw	r18, r12
    4456:	dc 01       	movw	r26, r24
    4458:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>
    445c:	69 83       	std	Y+1, r22	; 0x01
    445e:	7a 83       	std	Y+2, r23	; 0x02
    4460:	8b 83       	std	Y+3, r24	; 0x03
    4462:	9c 83       	std	Y+4, r25	; 0x04

00004464 <.Loc.188>:
    4464:	c8 01       	movw	r24, r16
    4466:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vcc_diff>

0000446a <.LVL50>:
    446a:	9c 01       	movw	r18, r24
    446c:	40 e0       	ldi	r20, 0x00	; 0
    446e:	50 e0       	ldi	r21, 0x00	; 0

00004470 <.Loc.190>:
    4470:	69 81       	ldd	r22, Y+1	; 0x01
    4472:	7a 81       	ldd	r23, Y+2	; 0x02
    4474:	8b 81       	ldd	r24, Y+3	; 0x03
    4476:	9c 81       	ldd	r25, Y+4	; 0x04
    4478:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>
    447c:	49 01       	movw	r8, r18
    447e:	5a 01       	movw	r10, r20

00004480 <.LVL51>:
        lirx2 =(unsigned long)RR680MI * (unsigned long)unsigned_diff(adc.tp2, adc.lp1) / adc.lp1;
    4480:	c0 90 19 01 	lds	r12, 0x0119	; 0x800119 <resis680mi>
    4484:	d0 90 1a 01 	lds	r13, 0x011A	; 0x80011a <resis680mi+0x1>

00004488 <.Loc.194>:
  if (adc.tp2 < adc.lp1) {
    4488:	c3 01       	movw	r24, r6
    448a:	6e 14       	cp	r6, r14
    448c:	7f 04       	cpc	r7, r15
    448e:	08 f4       	brcc	.+2      	; 0x4492 <.L20>

00004490 <.Loc.195>:
    4490:	c7 01       	movw	r24, r14

00004492 <.L20>:
        lirx2 =(unsigned long)RR680MI * (unsigned long)unsigned_diff(adc.tp2, adc.lp1) / adc.lp1;
    4492:	b7 01       	movw	r22, r14
    4494:	0e 94 65 08 	call	0x10ca	; 0x10ca <unsigned_diff>

00004498 <.LVL52>:
    4498:	96 01       	movw	r18, r12
    449a:	dc 01       	movw	r26, r24
    449c:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

000044a0 <.Loc.198>:
    44a0:	97 01       	movw	r18, r14
    44a2:	40 e0       	ldi	r20, 0x00	; 0
    44a4:	50 e0       	ldi	r21, 0x00	; 0

000044a6 <.Loc.199>:
    44a6:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

000044aa <.LVL53>:
        if (adc.hp1 < U_INT_LIMIT) {
    44aa:	08 37       	cpi	r16, 0x78	; 120
    44ac:	bf e0       	ldi	r27, 0x0F	; 15
    44ae:	1b 07       	cpc	r17, r27
    44b0:	b0 f4       	brcc	.+44     	; 0x44de <.L21>

000044b2 <.Loc.202>:
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    44b2:	62 e0       	ldi	r22, 0x02	; 2

000044b4 <.L1^B4>:
    44b4:	88 0c       	add	r8, r8
    44b6:	99 1c       	adc	r9, r9
    44b8:	aa 1c       	adc	r10, r10
    44ba:	bb 1c       	adc	r11, r11
    44bc:	6a 95       	dec	r22
    44be:	d1 f7       	brne	.-12     	; 0x44b4 <.L1^B4>

000044c0 <.LVL54>:
    44c0:	c5 01       	movw	r24, r10
    44c2:	b4 01       	movw	r22, r8
    44c4:	62 0f       	add	r22, r18
    44c6:	73 1f       	adc	r23, r19
    44c8:	84 1f       	adc	r24, r20
    44ca:	95 1f       	adc	r25, r21

000044cc <.L39>:
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    44cc:	25 e0       	ldi	r18, 0x05	; 5
    44ce:	30 e0       	ldi	r19, 0x00	; 0
    44d0:	40 e0       	ldi	r20, 0x00	; 0
    44d2:	50 e0       	ldi	r21, 0x00	; 0

000044d4 <.LVL55>:
    44d4:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>
    44d8:	49 01       	movw	r8, r18
    44da:	5a 01       	movw	r10, r20

000044dc <.LVL56>:
    44dc:	3f cf       	rjmp	.-386    	; 0x435c <.L18>

000044de <.L21>:
        } else if (adc.lp1 < U_INT_LIMIT) {
    44de:	88 e7       	ldi	r24, 0x78	; 120
    44e0:	e8 16       	cp	r14, r24
    44e2:	8f e0       	ldi	r24, 0x0F	; 15
    44e4:	f8 06       	cpc	r15, r24
    44e6:	70 f4       	brcc	.+28     	; 0x4504 <.L22>

000044e8 <.Loc.210>:
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    44e8:	ca 01       	movw	r24, r20
    44ea:	b9 01       	movw	r22, r18
    44ec:	52 e0       	ldi	r21, 0x02	; 2

000044ee <.L1^B5>:
    44ee:	66 0f       	add	r22, r22
    44f0:	77 1f       	adc	r23, r23
    44f2:	88 1f       	adc	r24, r24
    44f4:	99 1f       	adc	r25, r25
    44f6:	5a 95       	dec	r21
    44f8:	d1 f7       	brne	.-12     	; 0x44ee <.L1^B5>

000044fa <.Loc.212>:
    44fa:	68 0d       	add	r22, r8
    44fc:	79 1d       	adc	r23, r9
    44fe:	8a 1d       	adc	r24, r10
    4500:	9b 1d       	adc	r25, r11
    4502:	e4 cf       	rjmp	.-56     	; 0x44cc <.L39>

00004504 <.L22>:
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
    4504:	82 0e       	add	r8, r18
    4506:	93 1e       	adc	r9, r19
    4508:	a4 1e       	adc	r10, r20
    450a:	b5 1e       	adc	r11, r21

0000450c <.LVL58>:
    450c:	b6 94       	lsr	r11
    450e:	a7 94       	ror	r10
    4510:	97 94       	ror	r9
    4512:	87 94       	ror	r8

00004514 <.LVL59>:
    4514:	23 cf       	rjmp	.-442    	; 0x435c <.L18>

00004516 <.L23>:
           ResistorVal[resnum] = lrx1;	// save register value
    4516:	8d 92       	st	X+, r8
    4518:	9d 92       	st	X+, r9
    451a:	ad 92       	st	X+, r10
    451c:	bc 92       	st	X, r11
    451e:	13 97       	sbiw	r26, 0x03	; 3

00004520 <.Loc.219>:
           ResistorChecked[resnum] = 1;		// is checked in one direction
    4520:	81 e0       	ldi	r24, 0x01	; 1
    4522:	80 83       	st	Z, r24
    4524:	b5 ce       	rjmp	.-662    	; 0x4290 <.L4>

00004526 <.L10>:
  LoPinRH = (LoPinRL + LoPinRL);
    4526:	55 0c       	add	r5, r5

00004528 <.LVL62>:
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
    4528:	54 b8       	out	0x04, r5	; 4

0000452a <.Loc.226>:
  adc.lp2 = W5msReadADC(LowPin);
    452a:	8e 81       	ldd	r24, Y+6	; 0x06
    452c:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00004530 <.LVL63>:
    4530:	5c 01       	movw	r10, r24

00004532 <.LVL64>:
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    4532:	00 3c       	cpi	r16, 0xC0	; 192
    4534:	b4 e4       	ldi	r27, 0x44	; 68
    4536:	1b 07       	cpc	r17, r27
    4538:	08 f4       	brcc	.+2      	; 0x453c <.Loc.230>

0000453a <L0^A>:
    453a:	c1 ce       	rjmp	.-638    	; 0x42be <.L26>

0000453c <.Loc.230>:
  if (adc.hp2 < (4972*U_SCALE)) { 
    453c:	b0 eb       	ldi	r27, 0xB0	; 176
    453e:	cb 16       	cp	r12, r27
    4540:	bd e4       	ldi	r27, 0x4D	; 77
    4542:	db 06       	cpc	r13, r27
    4544:	c0 ce       	rjmp	.-640    	; 0x42c6 <.L37>

00004546 <.L6>:
  HiPinRH = (HiPinRL + HiPinRL);
    4546:	dd 0c       	add	r13, r13

00004548 <.LVL66>:
  R_PORT = 0;
    4548:	15 b8       	out	0x05, r1	; 5

0000454a <.Loc.237>:
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
    454a:	d4 b8       	out	0x04, r13	; 4

0000454c <.Loc.239>:
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
    454c:	8d 81       	ldd	r24, Y+5	; 0x05
    454e:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00004552 <.LVL67>:
  if (adc.hp2 > (20*U_SCALE)) {
    4552:	81 35       	cpi	r24, 0x51	; 81
    4554:	91 05       	cpc	r25, r1
    4556:	08 f0       	brcs	.+2      	; 0x455a <.Loc.243>

00004558 <L0^A>:
    4558:	9b ce       	rjmp	.-714    	; 0x4290 <.L4>

0000455a <.Loc.243>:
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
    455a:	d5 b8       	out	0x05, r13	; 5

0000455c <.Loc.245>:
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
    455c:	8d 81       	ldd	r24, Y+5	; 0x05

0000455e <.LVL68>:
    455e:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00004562 <.LVL69>:
    4562:	6c 01       	movw	r12, r24

00004564 <.LVL70>:
  ADC_DDR = HiADCp | TXD_MSK;		//switch High-Pin to output
    4564:	b7 b8       	out	0x07, r11	; 7

00004566 <.Loc.250>:
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    4566:	b8 b8       	out	0x08, r11	; 8

00004568 <.Loc.252>:
  R_PORT = 0;
    4568:	15 b8       	out	0x05, r1	; 5

0000456a <.Loc.254>:
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
    456a:	54 b8       	out	0x04, r5	; 4

0000456c <.LVL71>:
  adc.lp2 = 0;
    456c:	e1 2c       	mov	r14, r1
    456e:	f1 2c       	mov	r15, r1

00004570 <.LVL72>:
  for (ii=1;ii<MAX_REPEAT;ii++) {
    4570:	44 24       	eor	r4, r4
    4572:	43 94       	inc	r4

00004574 <.L12>:
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
    4574:	8d 81       	ldd	r24, Y+5	; 0x05
    4576:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

0000457a <.LVL74>:
    457a:	3c 01       	movw	r6, r24

0000457c <.LVL75>:
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    457c:	57 01       	movw	r10, r14

0000457e <.Loc.264>:
    457e:	8e 81       	ldd	r24, Y+6	; 0x06
    4580:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00004584 <.LVL76>:
    4584:	7c 01       	movw	r14, r24

00004586 <.LVL77>:
     if (udiff < 0) udiff = -udiff;
    4586:	8a 19       	sub	r24, r10
    4588:	9b 09       	sbc	r25, r11
    458a:	97 ff       	sbrs	r25, 7
    458c:	03 c0       	rjmp	.+6      	; 0x4594 <.L11>
    458e:	91 95       	neg	r25
    4590:	81 95       	neg	r24
    4592:	91 09       	sbc	r25, r1

00004594 <.L11>:
     if (udiff < 3) break;
    4594:	03 97       	sbiw	r24, 0x03	; 3
    4596:	3c f2       	brlt	.-114    	; 0x4526 <.L10>

00004598 <.LVL78>:
     wdt_reset();
    4598:	a8 95       	wdr

0000459a <.Loc.272>:
  for (ii=1;ii<MAX_REPEAT;ii++) {
    459a:	43 94       	inc	r4

0000459c <.Loc.273>:
    459c:	99 e1       	ldi	r25, 0x19	; 25
    459e:	49 12       	cpse	r4, r25
    45a0:	e9 cf       	rjmp	.-46     	; 0x4574 <.L12>
    45a2:	76 ce       	rjmp	.-788    	; 0x4290 <.L4>

000045a4 <ChargePin10ms>:
#include "Transistortester.h"


//******************************************************************

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
    45a4:	cf 93       	push	r28

000045a6 <.LCFI0>:
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
    45a6:	c8 2f       	mov	r28, r24
    45a8:	c0 95       	com	r28

000045aa <.Loc.4>:
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
    45aa:	95 b1       	in	r25, 0x05	; 5

000045ac <.Loc.5>:
   if(ChargeDirection&1) {
    45ac:	60 ff       	sbrs	r22, 0
    45ae:	0f c0       	rjmp	.+30     	; 0x45ce <.L2>

000045b0 <.Loc.6>:
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
    45b0:	98 2b       	or	r25, r24

000045b2 <.L4>:
      R_PORT &= ~PinToCharge; // or 0 (GND)
    45b2:	95 b9       	out	0x05, r25	; 5

000045b4 <.Loc.9>:
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
    45b4:	94 b1       	in	r25, 0x04	; 4

000045b6 <.Loc.10>:
    45b6:	89 2b       	or	r24, r25

000045b8 <.LVL1>:
    45b8:	84 b9       	out	0x04, r24	; 4

000045ba <.Loc.12>:
   wait_about10ms();			// wait about 10ms
    45ba:	0e 94 c4 07 	call	0xf88	; 0xf88 <sleep_10ms>

000045be <.LVL2>:
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
    45be:	84 b1       	in	r24, 0x04	; 4

000045c0 <.Loc.14>:
    45c0:	8c 23       	and	r24, r28
    45c2:	84 b9       	out	0x04, r24	; 4

000045c4 <.Loc.15>:
   R_PORT &= ~PinToCharge;	// no Pull up
    45c4:	85 b1       	in	r24, 0x05	; 5

000045c6 <.Loc.16>:
    45c6:	8c 23       	and	r24, r28
    45c8:	85 b9       	out	0x05, r24	; 5

000045ca <.Loc.17>:
}
    45ca:	cf 91       	pop	r28

000045cc <.LVL3>:
    45cc:	08 95       	ret

000045ce <.L2>:
      R_PORT &= ~PinToCharge; // or 0 (GND)
    45ce:	9c 23       	and	r25, r28
    45d0:	f0 cf       	rjmp	.-32     	; 0x45b2 <.L4>

000045d2 <EntladePins>:
#include <avr/pgmspace.h>
#include "Transistortester.h"


// first discharge any charge of capacitors
void EntladePins() {
    45d2:	a0 e0       	ldi	r26, 0x00	; 0
    45d4:	b0 e0       	ldi	r27, 0x00	; 0
    45d6:	ef ee       	ldi	r30, 0xEF	; 239
    45d8:	f2 e2       	ldi	r31, 0x22	; 34
    45da:	0c 94 93 38 	jmp	0x7126	; 0x7126 <.Loc.9>

000045de <.L1^B1>:
    45de:	8a e0       	ldi	r24, 0x0A	; 10
    45e0:	d8 2e       	mov	r13, r24

000045e2 <.Loc.8>:
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
//     R_DDR = (1<<PIN_RH3) | (1<<PIN_RH2) | (1<<PIN_RH1); // R_H for all Pins to GND
     R_DDR = (1<<PIN_RH3) | (1<<PIN_RL3) | (1<<PIN_RH2) | (1<<PIN_RL2) | (1<<PIN_RH1) | (1<<PIN_RL1); // R_H and R_L for all Pins to GND
    45e2:	9f e3       	ldi	r25, 0x3F	; 63
    45e4:	b9 2e       	mov	r11, r25

000045e6 <.Loc.9>:
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
    45e6:	29 e0       	ldi	r18, 0x09	; 9
    45e8:	c2 2e       	mov	r12, r18

000045ea <.L20>:
     ADC_DDR = adc_gnd;
    45ea:	17 b8       	out	0x07, r1	; 7

000045ec <.Loc.13>:
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
    45ec:	18 b8       	out	0x08, r1	; 8

000045ee <.Loc.15>:
     R_PORT = 0;			// R-outputs auf 0
    45ee:	15 b8       	out	0x05, r1	; 5

000045f0 <.Loc.17>:
     R_DDR = (1<<PIN_RH3) | (1<<PIN_RL3) | (1<<PIN_RH2) | (1<<PIN_RL2) | (1<<PIN_RH1) | (1<<PIN_RL1); // R_H and R_L for all Pins to GND
    45f0:	b4 b8       	out	0x04, r11	; 4

000045f2 <.Loc.19>:
     adcmv[0] = W5msReadADC(TP1);	// which voltage has Pin 1?
    45f2:	80 e0       	ldi	r24, 0x00	; 0
    45f4:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

000045f8 <.LVL2>:
    45f8:	8c 01       	movw	r16, r24

000045fa <.LVL3>:
     adcmv[1] = ReadADC(TP2);	// which voltage has Pin 2?
    45fa:	81 e0       	ldi	r24, 0x01	; 1
    45fc:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00004600 <.LVL4>:
    4600:	ec 01       	movw	r28, r24

00004602 <.LVL5>:
     adcmv[2] = ReadADC(TP3);	// which voltage has Pin 3?
    4602:	82 e0       	ldi	r24, 0x02	; 2

00004604 <.LVL6>:
    4604:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00004608 <.LVL7>:
    4608:	9c 01       	movw	r18, r24

0000460a <.LVL8>:
     if ((PartFound == PART_CELL) || ((adcmv[0] < CAP_EMPTY_LEVEL) && (adcmv[1] < CAP_EMPTY_LEVEL) && (adcmv[2] < CAP_EMPTY_LEVEL))) {
    460a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <PartFound>
    460e:	89 30       	cpi	r24, 0x09	; 9
    4610:	99 f4       	brne	.+38     	; 0x4638 <.L2>

00004612 <.L6>:
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
    4612:	17 b8       	out	0x07, r1	; 7

00004614 <.Loc.30>:
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
    4614:	14 b8       	out	0x04, r1	; 4

00004616 <.Loc.32>:
        cell_mv[0] = adcmv[0];		// save the voltage of pin 1
    4616:	10 93 37 01 	sts	0x0137, r17	; 0x800137 <cell_mv+0x1>
    461a:	00 93 36 01 	sts	0x0136, r16	; 0x800136 <cell_mv>

0000461e <.Loc.34>:
        cell_mv[1] = adcmv[1];		// save the voltage of pin 2
    461e:	d0 93 39 01 	sts	0x0139, r29	; 0x800139 <cell_mv+0x3>
    4622:	c0 93 38 01 	sts	0x0138, r28	; 0x800138 <cell_mv+0x2>

00004626 <.Loc.36>:
        cell_mv[2] = adcmv[2];		// save the voltage of pin 3
    4626:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <cell_mv+0x5>
    462a:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <cell_mv+0x4>

0000462e <.L1>:
     }
  } // end for lop_cnt
#if DebugOut == 99
  uart_putc('x');		//Debug
#endif
 }
    462e:	cd b7       	in	r28, 0x3d	; 61
    4630:	de b7       	in	r29, 0x3e	; 62
    4632:	e9 e0       	ldi	r30, 0x09	; 9
    4634:	0c 94 af 38 	jmp	0x715e	; 0x715e <.Loc.9>

00004638 <.L2>:
     if ((PartFound == PART_CELL) || ((adcmv[0] < CAP_EMPTY_LEVEL) && (adcmv[1] < CAP_EMPTY_LEVEL) && (adcmv[2] < CAP_EMPTY_LEVEL))) {
    4638:	04 30       	cpi	r16, 0x04	; 4
    463a:	11 05       	cpc	r17, r1
    463c:	50 f4       	brcc	.+20     	; 0x4652 <.L4>

0000463e <.Loc.41>:
    463e:	c4 30       	cpi	r28, 0x04	; 4
    4640:	d1 05       	cpc	r29, r1
    4642:	08 f0       	brcs	.+2      	; 0x4646 <.Loc.42>

00004644 <L0^A>:
    4644:	46 c0       	rjmp	.+140    	; 0x46d2 <.L21>

00004646 <.Loc.42>:
    4646:	24 30       	cpi	r18, 0x04	; 4
    4648:	31 05       	cpc	r19, r1
    464a:	18 f3       	brcs	.-58     	; 0x4612 <.L6>

0000464c <.Loc.43>:
        adc_gnd |= (1<<TP1);	//Pin 1 directly to GND
    464c:	81 e0       	ldi	r24, 0x01	; 1

0000464e <.L7>:
        adc_gnd |= (1<<TP2);	//Pin 2 directly to GND
    464e:	82 60       	ori	r24, 0x02	; 2

00004650 <.Loc.46>:
    4650:	08 c0       	rjmp	.+16     	; 0x4662 <.L9>

00004652 <.L4>:
     if (adcmv[0] < 1000) {
    4652:	81 e0       	ldi	r24, 0x01	; 1
    4654:	08 3e       	cpi	r16, 0xE8	; 232
    4656:	13 40       	sbci	r17, 0x03	; 3
    4658:	08 f0       	brcs	.+2      	; 0x465c <.L5>
    465a:	80 e0       	ldi	r24, 0x00	; 0

0000465c <.L5>:
     if (adcmv[1] < 1000) {
    465c:	c8 3e       	cpi	r28, 0xE8	; 232
    465e:	d3 40       	sbci	r29, 0x03	; 3
    4660:	b0 f3       	brcs	.-20     	; 0x464e <.L7>

00004662 <.L9>:
     if (adcmv[2] < 1000) {
    4662:	28 3e       	cpi	r18, 0xE8	; 232
    4664:	33 40       	sbci	r19, 0x03	; 3
    4666:	08 f4       	brcc	.+2      	; 0x466a <.L10>

00004668 <.Loc.53>:
        adc_gnd |= (1<<TP3);	//Pin 3 directly to  GND
    4668:	84 60       	ori	r24, 0x04	; 4

0000466a <.L10>:
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
    466a:	87 b9       	out	0x07, r24	; 7

0000466c <.LVL16>:
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    466c:	c0 e0       	ldi	r28, 0x00	; 0
    466e:	d0 e0       	ldi	r29, 0x00	; 0

00004670 <.L16>:
        wdt_reset();
    4670:	a8 95       	wdr

00004672 <.Loc.61>:
        adcmv[0] = W20msReadADC(TP1);	// which voltage has Pin 1?
    4672:	80 e0       	ldi	r24, 0x00	; 0
    4674:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <W20msReadADC>

00004678 <.LVL18>:
    4678:	7c 01       	movw	r14, r24

0000467a <.LVL19>:
        adcmv[1] = ReadADC(TP2);	// which voltage has Pin 2?
    467a:	81 e0       	ldi	r24, 0x01	; 1
    467c:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00004680 <.LVL20>:
    4680:	8c 01       	movw	r16, r24

00004682 <.LVL21>:
        adcmv[2] = ReadADC(TP3);	// which voltage has Pin 3?
    4682:	82 e0       	ldi	r24, 0x02	; 2
    4684:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00004688 <.LVL22>:
    4688:	9c 01       	movw	r18, r24

0000468a <.LVL23>:
        if (adcmv[0] < 1300) {
    468a:	84 e1       	ldi	r24, 0x14	; 20
    468c:	e8 16       	cp	r14, r24
    468e:	85 e0       	ldi	r24, 0x05	; 5
    4690:	f8 06       	cpc	r15, r24
    4692:	08 f4       	brcc	.+2      	; 0x4696 <.L11>

00004694 <.Loc.70>:
           ADC_DDR |= (1<<TP1);	// below 1.3V , switch directly with ADC-Port to GND
    4694:	38 9a       	sbi	0x07, 0	; 7

00004696 <.L11>:
        if (adcmv[1] < 1300) {
    4696:	04 31       	cpi	r16, 0x14	; 20
    4698:	95 e0       	ldi	r25, 0x05	; 5
    469a:	19 07       	cpc	r17, r25
    469c:	08 f4       	brcc	.+2      	; 0x46a0 <.L12>

0000469e <.Loc.74>:
           ADC_DDR |= (1<<TP2);	// below 1.3V, switch directly with ADC-Port to GND
    469e:	39 9a       	sbi	0x07, 1	; 7

000046a0 <.L12>:
        if (adcmv[2] < 1300) {
    46a0:	24 31       	cpi	r18, 0x14	; 20
    46a2:	85 e0       	ldi	r24, 0x05	; 5
    46a4:	38 07       	cpc	r19, r24
    46a6:	08 f4       	brcc	.+2      	; 0x46aa <.L13>

000046a8 <.Loc.78>:
           ADC_DDR |= (1<<TP3);	// below 1.3V, switch directly with ADC-Port to GND
    46a8:	3a 9a       	sbi	0x07, 2	; 7

000046aa <.L13>:
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
    46aa:	96 e0       	ldi	r25, 0x06	; 6
    46ac:	e9 16       	cp	r14, r25
    46ae:	f1 04       	cpc	r15, r1
    46b0:	30 f4       	brcc	.+12     	; 0x46be <.L14>

000046b2 <.Loc.82>:
    46b2:	06 30       	cpi	r16, 0x06	; 6
    46b4:	11 05       	cpc	r17, r1
    46b6:	18 f4       	brcc	.+6      	; 0x46be <.L14>

000046b8 <.Loc.83>:
    46b8:	26 30       	cpi	r18, 0x06	; 6
    46ba:	31 05       	cpc	r19, r1
    46bc:	38 f0       	brcs	.+14     	; 0x46cc <.L15>

000046be <.L14>:
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    46be:	21 96       	adiw	r28, 0x01	; 1

000046c0 <.Loc.85>:
    46c0:	c4 3f       	cpi	r28, 0xF4	; 244
    46c2:	81 e0       	ldi	r24, 0x01	; 1
    46c4:	d8 07       	cpc	r29, r24
    46c6:	a1 f6       	brne	.-88     	; 0x4670 <.L16>

000046c8 <.Loc.86>:
        PartFound = PART_CELL;	// mark as Battery
    46c8:	c0 92 2f 01 	sts	0x012F, r12	; 0x80012f <PartFound>

000046cc <.L15>:
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    46cc:	00 e0       	ldi	r16, 0x00	; 0
    46ce:	10 e0       	ldi	r17, 0x00	; 0

000046d0 <.LVL25>:
    46d0:	06 c0       	rjmp	.+12     	; 0x46de <.L18>

000046d2 <.L21>:
        adc_gnd |= (1<<TP1);	//Pin 1 directly to GND
    46d2:	81 e0       	ldi	r24, 0x01	; 1
    46d4:	c3 cf       	rjmp	.-122    	; 0x465c <.L5>

000046d6 <.L19>:
        wait1ms();
    46d6:	0e 94 b3 07 	call	0xf66	; 0xf66 <wait1ms>

000046da <.LVL28>:
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
    46da:	0f 5f       	subi	r16, 0xFF	; 255
    46dc:	1f 4f       	sbci	r17, 0xFF	; 255

000046de <.L18>:
    46de:	c0 17       	cp	r28, r16
    46e0:	d1 07       	cpc	r29, r17
    46e2:	c9 f7       	brne	.-14     	; 0x46d6 <.L19>

000046e4 <.LVL30>:
  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
    46e4:	da 94       	dec	r13

000046e6 <.LVL31>:
    46e6:	09 f0       	breq	.+2      	; 0x46ea <L0^A+0x2>

000046e8 <L0^A>:
    46e8:	80 cf       	rjmp	.-256    	; 0x45ea <.L20>
    46ea:	a1 cf       	rjmp	.-190    	; 0x462e <.L1>

000046ec <Scale_C_with_vcc>:
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()


void Scale_C_with_vcc(void) {
    46ec:	cf 92       	push	r12

000046ee <.LCFI0>:
    46ee:	df 92       	push	r13

000046f0 <.LCFI1>:
    46f0:	ef 92       	push	r14

000046f2 <.LCFI2>:
    46f2:	ff 92       	push	r15

000046f4 <.LCFI3>:
    46f4:	cf 93       	push	r28

000046f6 <.LCFI4>:
   while (cap.cval > 100000) {
    46f6:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <cap>
    46fa:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <cap+0x1>
    46fe:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <cap+0x2>
    4702:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <cap+0x3>
    4706:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <cap+0x12>

0000470a <.Loc.2>:
      cap.cval /= 10;
    470a:	9a e0       	ldi	r25, 0x0A	; 10
    470c:	c9 2e       	mov	r12, r25
    470e:	d1 2c       	mov	r13, r1
    4710:	e1 2c       	mov	r14, r1
    4712:	f1 2c       	mov	r15, r1

00004714 <.L2>:
   while (cap.cval > 100000) {
    4714:	c1 e0       	ldi	r28, 0x01	; 1
    4716:	c8 0f       	add	r28, r24
    4718:	21 3a       	cpi	r18, 0xA1	; 161
    471a:	96 e8       	ldi	r25, 0x86	; 134
    471c:	39 07       	cpc	r19, r25
    471e:	91 e0       	ldi	r25, 0x01	; 1
    4720:	49 07       	cpc	r20, r25
    4722:	51 05       	cpc	r21, r1
    4724:	e0 f4       	brcc	.+56     	; 0x475e <.L3>
    4726:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <cap+0x12>

0000472a <.Loc.4>:
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    472a:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <ADCconfig+0x4>
    472e:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <ADCconfig+0x5>

00004732 <.Loc.7>:
    4732:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <__muluhisi3>

00004736 <.Loc.8>:
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    4736:	28 e8       	ldi	r18, 0x88	; 136
    4738:	33 e1       	ldi	r19, 0x13	; 19
    473a:	40 e0       	ldi	r20, 0x00	; 0
    473c:	50 e0       	ldi	r21, 0x00	; 0
    473e:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>
    4742:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <cap>
    4746:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <cap+0x1>
    474a:	40 93 3e 01 	sts	0x013E, r20	; 0x80013e <cap+0x2>
    474e:	50 93 3f 01 	sts	0x013F, r21	; 0x80013f <cap+0x3>

00004752 <.Loc.9>:
}
    4752:	cf 91       	pop	r28
    4754:	ff 90       	pop	r15
    4756:	ef 90       	pop	r14
    4758:	df 90       	pop	r13
    475a:	cf 90       	pop	r12
    475c:	08 95       	ret

0000475e <.L3>:
      cap.cval /= 10;
    475e:	ca 01       	movw	r24, r20
    4760:	b9 01       	movw	r22, r18
    4762:	a7 01       	movw	r20, r14
    4764:	96 01       	movw	r18, r12
    4766:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

0000476a <.Loc.12>:
    476a:	8c 2f       	mov	r24, r28
    476c:	d3 cf       	rjmp	.-90     	; 0x4714 <.L2>

0000476e <ReadCapacity>:
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    476e:	a0 e0       	ldi	r26, 0x00	; 0
    4770:	b0 e0       	ldi	r27, 0x00	; 0
    4772:	ed eb       	ldi	r30, 0xBD	; 189
    4774:	f3 e2       	ldi	r31, 0x23	; 35
    4776:	0c 94 90 38 	jmp	0x7120	; 0x7120 <.Loc.6>

0000477a <.L1^B1>:
    477a:	c8 2f       	mov	r28, r24
    477c:	d6 2f       	mov	r29, r22

0000477e <.Loc.16>:
  pin_combination = ((HighPin - TP_MIN) * 3) + LowPin - TP_MIN - 1;	// coded Pin combination for capacity zero offset
    477e:	88 0f       	add	r24, r24

00004780 <.LVL1>:
    4780:	8c 0f       	add	r24, r28

00004782 <.Loc.27>:
    4782:	9f ef       	ldi	r25, 0xFF	; 255
    4784:	96 0f       	add	r25, r22
    4786:	89 0f       	add	r24, r25

00004788 <.Loc.28>:
    4788:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <pin_combination>

0000478c <.LBB2>:
  HiPinR_L = pgm_read_byte(&PinRLRHADCtab[HighPin - TP_MIN]);	//R_L mask for HighPin R_L load
    478c:	ec 2f       	mov	r30, r28
    478e:	f0 e0       	ldi	r31, 0x00	; 0
    4790:	e5 5b       	subi	r30, 0xB5	; 181
    4792:	fd 4f       	sbci	r31, 0xFD	; 253
    4794:	d4 90       	lpm	r13, Z

00004796 <.LBB3>:
  LoPinR_L = pgm_read_byte(&PinRLRHADCtab[LowPin - TP_MIN]);	//R_L mask for LowPin R_L load
    4796:	86 2f       	mov	r24, r22
    4798:	90 e0       	ldi	r25, 0x00	; 0
    479a:	fc 01       	movw	r30, r24
    479c:	e5 5b       	subi	r30, 0xB5	; 181
    479e:	fd 4f       	sbci	r31, 0xFD	; 253
    47a0:	14 91       	lpm	r17, Z

000047a2 <.LBB4>:
  LoADC = pgm_read_byte((&PinRLRHADCtab[3])+LowPin-TP_MIN) | TXD_MSK;
    47a2:	fc 01       	movw	r30, r24
    47a4:	e2 5b       	subi	r30, 0xB2	; 178
    47a6:	fd 4f       	sbci	r31, 0xFD	; 253
    47a8:	c4 90       	lpm	r12, Z

000047aa <.LBE4>:
  if(PartFound == PART_RESISTOR) {
    47aa:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <PartFound>
    47ae:	81 30       	cpi	r24, 0x01	; 1
    47b0:	d1 f1       	breq	.+116    	; 0x4826 <.L4>

000047b2 <.Loc.50>:
  for (ii=0;ii<NumOfDiodes;ii++) {
    47b2:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <NumOfDiodes>
    47b6:	26 e8       	ldi	r18, 0x86	; 134
    47b8:	31 e0       	ldi	r19, 0x01	; 1
    47ba:	f9 01       	movw	r30, r18
    47bc:	d9 01       	movw	r26, r18

000047be <.L6>:
    47be:	9a 2f       	mov	r25, r26
    47c0:	92 1b       	sub	r25, r18
    47c2:	98 17       	cp	r25, r24
    47c4:	a8 f1       	brcs	.+106    	; 0x4830 <.L8>

000047c6 <.Loc.52>:
  cap.esr = 0;				// set ESR of capacitor to zero
    47c6:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <cap+0xd>
    47ca:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <cap+0xc>

000047ce <.LVL7>:
  cap.cpre = -15;			// mark for no cap
    47ce:	81 ef       	ldi	r24, 0xF1	; 241
    47d0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <cap+0x12>

000047d4 <.Loc.58>:
  cap.cval = 0;				// set capacity value to zero
    47d4:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <cap>
    47d8:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <cap+0x1>
    47dc:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <cap+0x2>
    47e0:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <cap+0x3>

000047e4 <.Loc.60>:
  EntladePins();			// discharge capacitor
    47e4:	f6 de       	rcall	.-532    	; 0x45d2 <EntladePins>

000047e6 <.LVL8>:
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    47e6:	18 b8       	out	0x08, r1	; 8

000047e8 <.Loc.63>:
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    47e8:	c7 b8       	out	0x07, r12	; 7

000047ea <.Loc.65>:
  R_DDR = LoPinR_L;			// switch R_L Port of LoPin to VCC
    47ea:	14 b9       	out	0x04, r17	; 4

000047ec <.Loc.67>:
  R_PORT = LoPinR_L;			// switch R_L Port of LoPin to VCC
    47ec:	15 b9       	out	0x05, r17	; 5

000047ee <.Loc.69>:
  residual_voltage = ReadADC(HighPin) - ReadADC(LowPin); // voltage at HighPin before any load 
    47ee:	8c 2f       	mov	r24, r28
    47f0:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

000047f4 <.LVL9>:
    47f4:	8c 01       	movw	r16, r24

000047f6 <.Loc.71>:
    47f6:	8d 2f       	mov	r24, r29
    47f8:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

000047fc <.LVL10>:
  R_DDR = 0;				// switch all R_L ports to input
    47fc:	14 b8       	out	0x04, r1	; 4

000047fe <.LVL11>:
  for (ovcnt16=0;ovcnt16<MAX_LOAD_TIME;ovcnt16++) {
    47fe:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <ovcnt16+0x1>
    4802:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ovcnt16>

00004806 <.Loc.77>:
     cap_voltage1 = ReadADC(HighPin) - residual_voltage; // voltage of capacitor
    4806:	7c 01       	movw	r14, r24
    4808:	e0 1a       	sub	r14, r16
    480a:	f1 0a       	sbc	r15, r17
    480c:	9e 2c       	mov	r9, r14
    480e:	8f 2c       	mov	r8, r15

00004810 <.L9>:
  for (ovcnt16=0;ovcnt16<MAX_LOAD_TIME;ovcnt16++) {
    4810:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    4814:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    4818:	84 3f       	cpi	r24, 0xF4	; 244
    481a:	91 40       	sbci	r25, 0x01	; 1
    481c:	c8 f0       	brcs	.+50     	; 0x4850 <.L13>

0000481e <.L14>:
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    481e:	17 b8       	out	0x07, r1	; 7

00004820 <.Loc.81>:
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    4820:	18 b8       	out	0x08, r1	; 8

00004822 <.Loc.83>:
  R_DDR = 0;			// switch all resistor ports to input
    4822:	14 b8       	out	0x04, r1	; 4

00004824 <.Loc.85>:
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    4824:	15 b8       	out	0x05, r1	; 5

00004826 <.L4>:
 } // end ReadCapacity()
    4826:	cd b7       	in	r28, 0x3d	; 61
    4828:	de b7       	in	r29, 0x3e	; 62

0000482a <.LVL15>:
    482a:	ec e0       	ldi	r30, 0x0C	; 12
    482c:	0c 94 ac 38 	jmp	0x7158	; 0x7158 <.Loc.6>

00004830 <.L8>:
     if ((diodes.Cathode[ii] == LowPin) && (diodes.Anode[ii] == HighPin) && (diodes.Voltage[ii] < 1500)) {
    4830:	16 96       	adiw	r26, 0x06	; 6
    4832:	9c 91       	ld	r25, X
    4834:	16 97       	sbiw	r26, 0x06	; 6
    4836:	9d 13       	cpse	r25, r29
    4838:	08 c0       	rjmp	.+16     	; 0x484a <.L7>

0000483a <.Loc.92>:
    483a:	9c 91       	ld	r25, X
    483c:	9c 13       	cpse	r25, r28
    483e:	05 c0       	rjmp	.+10     	; 0x484a <.L7>

00004840 <.Loc.93>:
    4840:	44 85       	ldd	r20, Z+12	; 0x0c
    4842:	55 85       	ldd	r21, Z+13	; 0x0d
    4844:	4c 3d       	cpi	r20, 0xDC	; 220
    4846:	55 40       	sbci	r21, 0x05	; 5
    4848:	70 f3       	brcs	.-36     	; 0x4826 <.L4>

0000484a <.L7>:
  for (ii=0;ii<NumOfDiodes;ii++) {
    484a:	11 96       	adiw	r26, 0x01	; 1

0000484c <.Loc.96>:
    484c:	32 96       	adiw	r30, 0x02	; 2
    484e:	b7 cf       	rjmp	.-146    	; 0x47be <.L6>

00004850 <.L13>:
     R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    4850:	d5 b8       	out	0x05, r13	; 5

00004852 <.Loc.100>:
     R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    4852:	d4 b8       	out	0x04, r13	; 4

00004854 <.Loc.101>:
     wait10ms();			// wait exactly 10ms, do not sleep
    4854:	0e 94 ad 07 	call	0xf5a	; 0xf5a <wait10ms>

00004858 <.LVL20>:
     R_DDR = 0;				// switch back to input
    4858:	14 b8       	out	0x04, r1	; 4

0000485a <.Loc.104>:
     R_PORT = 0;			// no Pull up
    485a:	15 b8       	out	0x05, r1	; 5

0000485c <.Loc.106>:
     wait500us();			//wait a little time
    485c:	0e 94 b4 07 	call	0xf68	; 0xf68 <wait500us>

00004860 <.LVL21>:
     wdt_reset();
    4860:	a8 95       	wdr

00004862 <.Loc.108>:
     cap_voltage1 = ReadADC(HighPin) - residual_voltage; // voltage of capacitor
    4862:	8c 2f       	mov	r24, r28
    4864:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00004868 <.LVL22>:
    4868:	87 01       	movw	r16, r14
    486a:	08 0f       	add	r16, r24
    486c:	19 1f       	adc	r17, r25

0000486e <.LVL23>:
     if ((ovcnt16 > (MAX_LOAD_TIME/4)) && (cap_voltage1 < (MIN_VOLTAGE/4))) {
    486e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    4872:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    4876:	a9 2c       	mov	r10, r9
    4878:	b8 2c       	mov	r11, r8

0000487a <.Loc.113>:
    487a:	8e 37       	cpi	r24, 0x7E	; 126
    487c:	91 05       	cpc	r25, r1
    487e:	18 f0       	brcs	.+6      	; 0x4886 <.L10>

00004880 <.Loc.114>:
    4880:	0b 34       	cpi	r16, 0x4B	; 75
    4882:	11 05       	cpc	r17, r1
    4884:	64 f2       	brlt	.-104    	; 0x481e <.L14>

00004886 <.L10>:
     if (cap_voltage1 > MIN_VOLTAGE) {
    4886:	0d 32       	cpi	r16, 0x2D	; 45
    4888:	21 e0       	ldi	r18, 0x01	; 1
    488a:	12 07       	cpc	r17, r18
    488c:	0c f0       	brlt	.+2      	; 0x4890 <.Loc.117>

0000488e <L0^A>:
    488e:	5f c1       	rjmp	.+702    	; 0x4b4e <.L12>

00004890 <.Loc.117>:
  for (ovcnt16=0;ovcnt16<MAX_LOAD_TIME;ovcnt16++) {
    4890:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    4894:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    4898:	01 96       	adiw	r24, 0x01	; 1
    489a:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <ovcnt16+0x1>
    489e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <ovcnt16>
    48a2:	b6 cf       	rjmp	.-148    	; 0x4810 <.L9>

000048a4 <.L15>:
  EntladePins();			// discharge capacitor
    48a4:	96 de       	rcall	.-724    	; 0x45d2 <EntladePins>

000048a6 <.LVL25>:
  R_PORT = 0;		// R_DDR ist HiPinR_L
    48a6:	15 b8       	out	0x05, r1	; 5

000048a8 <.Loc.122>:
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK;	//switch all Pins to output
    48a8:	87 e0       	ldi	r24, 0x07	; 7
    48aa:	87 b9       	out	0x07, r24	; 7

000048ac <.Loc.124>:
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    48ac:	18 b8       	out	0x08, r1	; 8

000048ae <.Loc.126>:
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    48ae:	1d 2d       	mov	r17, r13

000048b0 <.LVL26>:
    48b0:	11 0f       	add	r17, r17
    48b2:	14 b9       	out	0x04, r17	; 4

000048b4 <.Loc.129>:
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    48b4:	80 e4       	ldi	r24, 0x40	; 64
    48b6:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

000048ba <.Loc.131>:
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    48ba:	84 e5       	ldi	r24, 0x54	; 84
    48bc:	80 bf       	out	0x30, r24	; 48

000048be <.Loc.133>:
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    48be:	8c 2f       	mov	r24, r28
    48c0:	80 64       	ori	r24, 0x40	; 64
    48c2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

000048c6 <.Loc.135>:
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    48c6:	86 e1       	ldi	r24, 0x16	; 22
    48c8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

000048cc <.Loc.137>:
  wait200us();			//wait for bandgap to start up
    48cc:	0e 94 b7 07 	call	0xf6e	; 0xf6e <wait200us>

000048d0 <.LVL27>:
  ovcnt16 = 0;
    48d0:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <ovcnt16+0x1>
    48d4:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ovcnt16>

000048d8 <.Loc.140>:
  TCCR1A = 0;			// set Counter1 to normal Mode
    48d8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>

000048dc <.Loc.142>:
  TCNT1 = 0;			//set Counter to 0
    48dc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    48e0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>

000048e4 <.Loc.144>:
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// clear interrupt flags
    48e4:	87 e2       	ldi	r24, 0x27	; 39
    48e6:	86 bb       	out	0x16, r24	; 22

000048e8 <.Loc.146>:
  TIMSK1 = (1<<TOIE1) | (1<<ICIE1);	// enable Timer overflow interrupt and input capture interrupt
    48e8:	81 e2       	ldi	r24, 0x21	; 33
    48ea:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>

000048ee <.Loc.148>:
  unfinished = 1;
    48ee:	81 e0       	ldi	r24, 0x01	; 1
    48f0:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <unfinished>

000048f4 <.Loc.150>:
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    48f4:	15 b9       	out	0x05, r17	; 5

000048f6 <.Loc.152>:
  if(PartFound == PART_FET) {
    48f6:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <PartFound>
    48fa:	95 30       	cpi	r25, 0x05	; 5
    48fc:	09 f0       	breq	.+2      	; 0x4900 <.Loc.154>

000048fe <L0^A>:
    48fe:	0e c1       	rjmp	.+540    	; 0x4b1c <.L47>

00004900 <.Loc.154>:
     TCCR1B = (0<<ICNC1) | (1<<CS10);	//Start counter 1MHz or 8MHz without Noise Canceler
    4900:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

00004904 <.Loc.156>:
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    4904:	81 e0       	ldi	r24, 0x01	; 1
    4906:	90 e0       	ldi	r25, 0x00	; 0
    4908:	0c 2e       	mov	r0, r28
    490a:	01 c0       	rjmp	.+2      	; 0x490e <.L2^B1>

0000490c <.L1^B2>:
    490c:	88 0f       	add	r24, r24

0000490e <.L2^B1>:
    490e:	0a 94       	dec	r0
    4910:	ea f7       	brpl	.-6      	; 0x490c <.L1^B2>

00004912 <.Loc.158>:
    4912:	80 95       	com	r24
    4914:	87 70       	andi	r24, 0x07	; 7

00004916 <.Loc.159>:
    4916:	87 b9       	out	0x07, r24	; 7

00004918 <.L22>:
  cli();		// disable interrupts to prevent wakeup Interrupts before sleeping
    4918:	f8 94       	cli

0000491a <.Loc.161>:
  set_sleep_mode(SLEEP_MODE_IDLE);
    491a:	83 b7       	in	r24, 0x33	; 51
    491c:	81 7f       	andi	r24, 0xF1	; 241
    491e:	83 bf       	out	0x33, r24	; 51

00004920 <.L23>:
  while(unfinished) {
    4920:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <unfinished>
    4924:	81 15       	cp	r24, r1
    4926:	89 f0       	breq	.+34     	; 0x494a <.L26>

00004928 <.Loc.166>:
    sleep_enable();
    4928:	83 b7       	in	r24, 0x33	; 51
    492a:	81 60       	ori	r24, 0x01	; 1
    492c:	83 bf       	out	0x33, r24	; 51

0000492e <.Loc.168>:
    sei();		// enable interrupts after next instruction
    492e:	78 94       	sei

00004930 <.Loc.170>:
    sleep_cpu();	// only enable interrupts during sleeping
    4930:	88 95       	sleep

00004932 <.Loc.172>:
    sleep_disable();
    4932:	83 b7       	in	r24, 0x33	; 51
    4934:	8e 7f       	andi	r24, 0xFE	; 254
    4936:	83 bf       	out	0x33, r24	; 51

00004938 <.Loc.175>:
    cli();		// disable interrupts again
    4938:	f8 94       	cli

0000493a <.Loc.177>:
    wdt_reset();	// reset watch dog during waiting
    493a:	a8 95       	wdr

0000493c <.Loc.178>:
    if(ovcnt16 == (F_CPU/5000)) {
    493c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    4940:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>

00004944 <.Loc.180>:
    4944:	80 34       	cpi	r24, 0x40	; 64
    4946:	96 40       	sbci	r25, 0x06	; 6
    4948:	59 f7       	brne	.-42     	; 0x4920 <.L23>

0000494a <.L26>:
  sei();		// enable interrupts again
    494a:	78 94       	sei

0000494c <.Loc.182>:
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    494c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

00004950 <.Loc.184>:
  tmpint = ICR1;		// get previous Input Capture Counter flag
    4950:	00 91 86 00 	lds	r16, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
    4954:	10 91 87 00 	lds	r17, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>

00004958 <.LVL28>:
  TIMSK1 = (0<<TOIE1) | (0<<ICIE1);	// disable Timer overflow interrupt and input capture interrupt
    4958:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>

0000495c <.Loc.188>:
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    495c:	86 e9       	ldi	r24, 0x96	; 150
    495e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

00004962 <.Loc.190>:
  R_DDR = 0;			// switch R_H resistor port for input
    4962:	14 b8       	out	0x04, r1	; 4

00004964 <.Loc.192>:
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    4964:	15 b8       	out	0x05, r1	; 5

00004966 <.Loc.194>:
  load_diff = ReadADC(HighPin) + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    4966:	8c 2f       	mov	r24, r28
    4968:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

0000496c <.LVL29>:
    496c:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <ref_mv>
    4970:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <ref_mv+0x1>
    4974:	82 1b       	sub	r24, r18
    4976:	93 0b       	sbc	r25, r19
    4978:	0c 96       	adiw	r24, 0x0c	; 12

0000497a <.Loc.197>:
    497a:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <load_diff+0x1>
    497e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <load_diff>

00004982 <.Loc.198>:
  if (ovcnt16 >= (F_CPU/10000)) {
    4982:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    4986:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>

0000498a <.Loc.200>:
    498a:	80 32       	cpi	r24, 0x20	; 32
    498c:	93 40       	sbci	r25, 0x03	; 3
    498e:	08 f0       	brcs	.+2      	; 0x4992 <.Loc.201>

00004990 <L0^A>:
    4990:	46 cf       	rjmp	.-372    	; 0x481e <.L14>

00004992 <.Loc.201>:
  cap.cval_uncorrected.w[1] = ovcnt16;
    4992:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    4996:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    499a:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <cap+0xb>
    499e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <cap+0xa>

000049a2 <.Loc.203>:
  cap.cval_uncorrected.w[0] = tmpint;
    49a2:	10 93 45 01 	sts	0x0145, r17	; 0x800145 <cap+0x9>
    49a6:	00 93 44 01 	sts	0x0144, r16	; 0x800144 <cap+0x8>

000049aa <.Loc.205>:
  cap.cpre = -12;			// cap.cval unit is pF 
    49aa:	84 ef       	ldi	r24, 0xF4	; 244
    49ac:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <cap+0x12>

000049b0 <.Loc.207>:
  if (ovcnt16 > 65) {
    49b0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    49b4:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>

000049b8 <.Loc.209>:
    49b8:	82 34       	cpi	r24, 0x42	; 66
    49ba:	91 05       	cpc	r25, r1
    49bc:	c8 f0       	brcs	.+50     	; 0x49f0 <.L27>

000049be <.Loc.210>:
     cap.cval_uncorrected.dw /= 100;	// switch to next unit
    49be:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <cap+0x8>
    49c2:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <cap+0x9>
    49c6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <cap+0xa>
    49ca:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <cap+0xb>
    49ce:	24 e6       	ldi	r18, 0x64	; 100
    49d0:	30 e0       	ldi	r19, 0x00	; 0
    49d2:	40 e0       	ldi	r20, 0x00	; 0
    49d4:	50 e0       	ldi	r21, 0x00	; 0
    49d6:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>
    49da:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <cap+0x8>
    49de:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <cap+0x9>
    49e2:	40 93 46 01 	sts	0x0146, r20	; 0x800146 <cap+0xa>
    49e6:	50 93 47 01 	sts	0x0147, r21	; 0x800147 <cap+0xb>

000049ea <.Loc.212>:
     cap.cpre += 2;			// set unit, prevent overflow
    49ea:	86 ef       	ldi	r24, 0xF6	; 246
    49ec:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <cap+0x12>

000049f0 <.L27>:
  cap.cval_uncorrected.dw *= RHmultip;		// 708
    49f0:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <RHmultip>
    49f4:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <RHmultip+0x1>
    49f8:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <cap+0x8>
    49fc:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <cap+0x9>
    4a00:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <cap+0xa>
    4a04:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <cap+0xb>
    4a08:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <__muluhisi3>

00004a0c <.Loc.217>:
  cap.cval_uncorrected.dw /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    4a0c:	20 e2       	ldi	r18, 0x20	; 32
    4a0e:	33 e0       	ldi	r19, 0x03	; 3
    4a10:	40 e0       	ldi	r20, 0x00	; 0
    4a12:	50 e0       	ldi	r21, 0x00	; 0
    4a14:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>
    4a18:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <cap+0x8>
    4a1c:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <cap+0x9>
    4a20:	40 93 46 01 	sts	0x0146, r20	; 0x800146 <cap+0xa>
    4a24:	50 93 47 01 	sts	0x0147, r21	; 0x800147 <cap+0xb>

00004a28 <.Loc.218>:
  cap.cval = cap.cval_uncorrected.dw;		// set the corrected cap.cval
    4a28:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <cap>
    4a2c:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <cap+0x1>
    4a30:	40 93 3e 01 	sts	0x013E, r20	; 0x80013e <cap+0x2>
    4a34:	50 93 3f 01 	sts	0x013F, r21	; 0x80013f <cap+0x3>

00004a38 <.Loc.220>:
  Scale_C_with_vcc();
    4a38:	59 de       	rcall	.-846    	; 0x46ec <Scale_C_with_vcc>

00004a3a <.LVL30>:
  if (cap.cpre == -12) {
    4a3a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <cap+0x12>
    4a3e:	84 3f       	cpi	r24, 0xF4	; 244
    4a40:	09 f0       	breq	.+2      	; 0x4a44 <.Loc.223>

00004a42 <L0^A>:
    4a42:	5a c0       	rjmp	.+180    	; 0x4af8 <.L28>

00004a44 <.Loc.223>:
     if (cap.cval < COMP_SLEW1) {
    4a44:	80 90 3c 01 	lds	r8, 0x013C	; 0x80013c <cap>
    4a48:	90 90 3d 01 	lds	r9, 0x013D	; 0x80013d <cap+0x1>
    4a4c:	a0 90 3e 01 	lds	r10, 0x013E	; 0x80013e <cap+0x2>
    4a50:	b0 90 3f 01 	lds	r11, 0x013F	; 0x80013f <cap+0x3>

00004a54 <.Loc.225>:
    4a54:	80 ea       	ldi	r24, 0xA0	; 160
    4a56:	88 16       	cp	r8, r24
    4a58:	8f e0       	ldi	r24, 0x0F	; 15
    4a5a:	98 06       	cpc	r9, r24
    4a5c:	a1 04       	cpc	r10, r1
    4a5e:	b1 04       	cpc	r11, r1
    4a60:	c0 f4       	brcc	.+48     	; 0x4a92 <.L29>

00004a62 <.Loc.226>:
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    4a62:	a5 01       	movw	r20, r10
    4a64:	94 01       	movw	r18, r8
    4a66:	2c 54       	subi	r18, 0x4C	; 76
    4a68:	3f 4f       	sbci	r19, 0xFF	; 255
    4a6a:	4f 4f       	sbci	r20, 0xFF	; 255
    4a6c:	5f 4f       	sbci	r21, 0xFF	; 255

00004a6e <.Loc.228>:
    4a6e:	60 ea       	ldi	r22, 0xA0	; 160
    4a70:	7f e0       	ldi	r23, 0x0F	; 15
    4a72:	80 e0       	ldi	r24, 0x00	; 0
    4a74:	90 e0       	ldi	r25, 0x00	; 0
    4a76:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00004a7a <.Loc.229>:
    4a7a:	82 0e       	add	r8, r18
    4a7c:	93 1e       	adc	r9, r19
    4a7e:	a4 1e       	adc	r10, r20
    4a80:	b5 1e       	adc	r11, r21
    4a82:	80 92 3c 01 	sts	0x013C, r8	; 0x80013c <cap>
    4a86:	90 92 3d 01 	sts	0x013D, r9	; 0x80013d <cap+0x1>
    4a8a:	a0 92 3e 01 	sts	0x013E, r10	; 0x80013e <cap+0x2>
    4a8e:	b0 92 3f 01 	sts	0x013F, r11	; 0x80013f <cap+0x3>

00004a92 <.L29>:
     if ( cap.cval < 65536) lc_cpartmp=cap.cval; /* prevent wrong value */
    4a92:	80 90 3c 01 	lds	r8, 0x013C	; 0x80013c <cap>
    4a96:	90 90 3d 01 	lds	r9, 0x013D	; 0x80013d <cap+0x1>
    4a9a:	a0 90 3e 01 	lds	r10, 0x013E	; 0x80013e <cap+0x2>
    4a9e:	b0 90 3f 01 	lds	r11, 0x013F	; 0x80013f <cap+0x3>

00004aa2 <.Loc.232>:
    4aa2:	31 e0       	ldi	r19, 0x01	; 1
    4aa4:	20 e0       	ldi	r18, 0x00	; 0
    4aa6:	81 14       	cp	r8, r1
    4aa8:	91 04       	cpc	r9, r1
    4aaa:	91 e0       	ldi	r25, 0x01	; 1
    4aac:	a9 06       	cpc	r10, r25
    4aae:	b1 04       	cpc	r11, r1
    4ab0:	10 f4       	brcc	.+4      	; 0x4ab6 <.L30>
    4ab2:	38 2d       	mov	r19, r8
    4ab4:	29 2d       	mov	r18, r9

00004ab6 <.L30>:
    4ab6:	c9 01       	movw	r24, r18
    4ab8:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <lc_cpartmp>
    4abc:	20 93 b7 01 	sts	0x01B7, r18	; 0x8001b7 <lc_cpartmp+0x1>

00004ac0 <.Loc.234>:
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    4ac0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <pin_combination>
    4ac4:	90 e0       	ldi	r25, 0x00	; 0

00004ac6 <.Loc.236>:
    4ac6:	89 5c       	subi	r24, 0xC9	; 201
    4ac8:	9c 4f       	sbci	r25, 0xFC	; 252
    4aca:	0e 94 15 39 	call	0x722a	; 0x722a <eeprom_read_byte>

00004ace <.LVL31>:
     if (cap.cval > tmpint) {
    4ace:	48 2f       	mov	r20, r24
    4ad0:	50 e0       	ldi	r21, 0x00	; 0
    4ad2:	60 e0       	ldi	r22, 0x00	; 0
    4ad4:	70 e0       	ldi	r23, 0x00	; 0

00004ad6 <.Loc.239>:
    4ad6:	88 15       	cp	r24, r8
    4ad8:	19 04       	cpc	r1, r9
    4ada:	1a 04       	cpc	r1, r10
    4adc:	1b 04       	cpc	r1, r11
    4ade:	10 f5       	brcc	.+68     	; 0x4b24 <.L31>

00004ae0 <.Loc.240>:
         cap.cval -= tmpint;		//subtract zero offset (pF)
    4ae0:	84 1a       	sub	r8, r20
    4ae2:	95 0a       	sbc	r9, r21
    4ae4:	a6 0a       	sbc	r10, r22
    4ae6:	b7 0a       	sbc	r11, r23
    4ae8:	80 92 3c 01 	sts	0x013C, r8	; 0x80013c <cap>
    4aec:	90 92 3d 01 	sts	0x013D, r9	; 0x80013d <cap+0x1>
    4af0:	a0 92 3e 01 	sts	0x013E, r10	; 0x80013e <cap+0x2>
    4af4:	b0 92 3f 01 	sts	0x013F, r11	; 0x80013f <cap+0x3>

00004af8 <.L28>:
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    4af8:	d4 b8       	out	0x04, r13	; 4

00004afa <.Loc.244>:
   if(cap.cval < 25)
    4afa:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <cap>
    4afe:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <cap+0x1>
    4b02:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <cap+0x2>
    4b06:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <cap+0x3>
    4b0a:	49 97       	sbiw	r24, 0x19	; 25
    4b0c:	a1 05       	cpc	r26, r1
    4b0e:	b1 05       	cpc	r27, r1
    4b10:	08 f0       	brcs	.+2      	; 0x4b14 <.Loc.246>

00004b12 <L0^A>:
    4b12:	b2 c0       	rjmp	.+356    	; 0x4c78 <.L21>

00004b14 <.Loc.246>:
    4b14:	84 ce       	rjmp	.-760    	; 0x481e <.L14>

00004b16 <.L37>:
  vloss = 0;				// set lost voltage to zero
    4b16:	e1 2c       	mov	r14, r1
    4b18:	f1 2c       	mov	r15, r1

00004b1a <.LVL34>:
    4b1a:	57 c0       	rjmp	.+174    	; 0x4bca <.L19>

00004b1c <.L47>:
     TCCR1B =  (0<<ICNC1) | (1<<CS10);	//start counter 1MHz or 8MHz without Noise Canceler
    4b1c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

00004b20 <.Loc.251>:
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    4b20:	c7 b8       	out	0x07, r12	; 7
    4b22:	fa ce       	rjmp	.-524    	; 0x4918 <.L22>

00004b24 <.L31>:
       if ((cap.cval+C_LIMIT_TO_UNCALIBRATED) < tmpint) {
    4b24:	24 e1       	ldi	r18, 0x14	; 20
    4b26:	82 0e       	add	r8, r18
    4b28:	91 1c       	adc	r9, r1
    4b2a:	a1 1c       	adc	r10, r1
    4b2c:	b1 1c       	adc	r11, r1

00004b2e <.Loc.255>:
    4b2e:	84 16       	cp	r8, r20
    4b30:	95 06       	cpc	r9, r21
    4b32:	a6 06       	cpc	r10, r22
    4b34:	b7 06       	cpc	r11, r23
    4b36:	10 f4       	brcc	.+4      	; 0x4b3c <.L32>

00004b38 <.Loc.256>:
         mark_as_uncalibrated();	// set in EEprom to uncalibrated
    4b38:	0e 94 71 13 	call	0x26e2	; 0x26e2 <mark_as_uncalibrated>

00004b3c <.L32>:
         cap.cval = 0;			//unsigned long may not reach negativ value
    4b3c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <cap>
    4b40:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <cap+0x1>
    4b44:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <cap+0x2>
    4b48:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <cap+0x3>
    4b4c:	d5 cf       	rjmp	.-86     	; 0x4af8 <.L28>

00004b4e <.L12>:
  if ((ovcnt16 == 0 ) && (cap_voltage1 > 1300)) {
    4b4e:	e0 90 34 01 	lds	r14, 0x0134	; 0x800134 <ovcnt16>
    4b52:	f0 90 35 01 	lds	r15, 0x0135	; 0x800135 <ovcnt16+0x1>

00004b56 <.LVL39>:
    4b56:	e1 14       	cp	r14, r1
    4b58:	f1 04       	cpc	r15, r1
    4b5a:	29 f4       	brne	.+10     	; 0x4b66 <.L36>

00004b5c <.Loc.263>:
    4b5c:	05 31       	cpi	r16, 0x15	; 21
    4b5e:	85 e0       	ldi	r24, 0x05	; 5
    4b60:	18 07       	cpc	r17, r24
    4b62:	0c f0       	brlt	.+2      	; 0x4b66 <.L36>

00004b64 <L0^A>:
    4b64:	9f ce       	rjmp	.-706    	; 0x48a4 <.L15>

00004b66 <.L36>:
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    4b66:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    4b6a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    4b6e:	e1 2c       	mov	r14, r1
    4b70:	f1 2c       	mov	r15, r1

00004b72 <.L16>:
     wait5ms();
    4b72:	0e 94 ae 07 	call	0xf5c	; 0xf5c <wait5ms>

00004b76 <.LVL42>:
     cap_voltage2 = ReadADC(HighPin) - residual_voltage;	// read voltage again, is discharged only a little bit ?
    4b76:	8c 2f       	mov	r24, r28
    4b78:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00004b7c <.LVL43>:
    4b7c:	9c 01       	movw	r18, r24

00004b7e <.LVL44>:
     wdt_reset();
    4b7e:	a8 95       	wdr

00004b80 <.Loc.269>:
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    4b80:	9f ef       	ldi	r25, 0xFF	; 255
    4b82:	e9 1a       	sub	r14, r25
    4b84:	f9 0a       	sbc	r15, r25

00004b86 <.Loc.270>:
    4b86:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    4b8a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    4b8e:	8e 15       	cp	r24, r14
    4b90:	9f 05       	cpc	r25, r15
    4b92:	78 f7       	brcc	.-34     	; 0x4b72 <.L16>

00004b94 <.Loc.271>:
     cap_voltage2 = ReadADC(HighPin) - residual_voltage;	// read voltage again, is discharged only a little bit ?
    4b94:	2a 0d       	add	r18, r10
    4b96:	3b 1d       	adc	r19, r11

00004b98 <.Loc.273>:
     cap_voltage2 = cap_voltage1 - cap_voltage2; 	// lost voltage during load time wait
    4b98:	68 01       	movw	r12, r16

00004b9a <.LVL46>:
    4b9a:	c2 1a       	sub	r12, r18
    4b9c:	d3 0a       	sbc	r13, r19

00004b9e <.LVL47>:
  if (cap_voltage2 > 0) {
    4b9e:	1c 14       	cp	r1, r12
    4ba0:	1d 04       	cpc	r1, r13
    4ba2:	0c f0       	brlt	.+2      	; 0x4ba6 <.LVL48>

00004ba4 <L0^A>:
    4ba4:	b8 cf       	rjmp	.-144    	; 0x4b16 <.L37>

00004ba6 <.LVL48>:
  if (cap_voltage2 > 200) {
    4ba6:	29 ec       	ldi	r18, 0xC9	; 201
    4ba8:	c2 16       	cp	r12, r18
    4baa:	d1 04       	cpc	r13, r1
    4bac:	0c f0       	brlt	.+2      	; 0x4bb0 <.Loc.280>

00004bae <L0^A>:
    4bae:	37 ce       	rjmp	.-914    	; 0x481e <.L14>

00004bb0 <.Loc.280>:
     vloss = (unsigned long)(cap_voltage2 * 1000UL) / cap_voltage1;
    4bb0:	28 ee       	ldi	r18, 0xE8	; 232
    4bb2:	33 e0       	ldi	r19, 0x03	; 3
    4bb4:	d6 01       	movw	r26, r12
    4bb6:	0e 94 74 38 	call	0x70e8	; 0x70e8 <__usmulhisi3>

00004bba <.Loc.281>:
    4bba:	98 01       	movw	r18, r16
    4bbc:	01 2e       	mov	r0, r17
    4bbe:	00 0c       	add	r0, r0
    4bc0:	44 0b       	sbc	r20, r20
    4bc2:	55 0b       	sbc	r21, r21

00004bc4 <.LVL49>:
    4bc4:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00004bc8 <.LVL50>:
    4bc8:	79 01       	movw	r14, r18

00004bca <.L19>:
  cap.cval_uncorrected.dw = ovcnt16 + 1;
    4bca:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    4bce:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    4bd2:	01 96       	adiw	r24, 0x01	; 1
    4bd4:	a0 e0       	ldi	r26, 0x00	; 0
    4bd6:	b0 e0       	ldi	r27, 0x00	; 0
    4bd8:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <cap+0x8>
    4bdc:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <cap+0x9>
    4be0:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <cap+0xa>
    4be4:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <cap+0xb>

00004be8 <.Loc.286>:
  cap.cval_uncorrected.dw *= GetRLmultip(cap_voltage1+cap_voltage2);	// get factor to convert time to capacity from table
    4be8:	c8 01       	movw	r24, r16
    4bea:	8c 0d       	add	r24, r12
    4bec:	9d 1d       	adc	r25, r13
    4bee:	0e 94 c1 08 	call	0x1182	; 0x1182 <GetRLmultip>

00004bf2 <.LVL52>:
    4bf2:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <cap+0x8>
    4bf6:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <cap+0x9>
    4bfa:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <cap+0xa>
    4bfe:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <cap+0xb>
    4c02:	dc 01       	movw	r26, r24
    4c04:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <__muluhisi3>
    4c08:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <cap+0x8>
    4c0c:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <cap+0x9>
    4c10:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <cap+0xa>
    4c14:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <cap+0xb>

00004c18 <.Loc.289>:
   cap.cval = cap.cval_uncorrected.dw;	// set result to uncorrected
    4c18:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <cap>
    4c1c:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <cap+0x1>
    4c20:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <cap+0x2>
    4c24:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <cap+0x3>

00004c28 <.Loc.291>:
   cap.cpre = -9;		// switch units to nF 
    4c28:	87 ef       	ldi	r24, 0xF7	; 247
    4c2a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <cap+0x12>

00004c2e <.Loc.293>:
   Scale_C_with_vcc();		// value is below 100000 after this call, cpre is changed
    4c2e:	5e dd       	rcall	.-1348   	; 0x46ec <Scale_C_with_vcc>

00004c30 <.LVL53>:
   cap.cval *= (1000 - (int8_t)eeprom_read_byte((uint8_t *)&big_cap_corr));	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    4c30:	80 90 3c 01 	lds	r8, 0x013C	; 0x80013c <cap>
    4c34:	90 90 3d 01 	lds	r9, 0x013D	; 0x80013d <cap+0x1>
    4c38:	a0 90 3e 01 	lds	r10, 0x013E	; 0x80013e <cap+0x2>
    4c3c:	b0 90 3f 01 	lds	r11, 0x013F	; 0x80013f <cap+0x3>

00004c40 <.Loc.296>:
    4c40:	8a e1       	ldi	r24, 0x1A	; 26
    4c42:	93 e0       	ldi	r25, 0x03	; 3
    4c44:	0e 94 15 39 	call	0x722a	; 0x722a <eeprom_read_byte>

00004c48 <.LVL54>:
    4c48:	a8 ee       	ldi	r26, 0xE8	; 232
    4c4a:	b3 e0       	ldi	r27, 0x03	; 3
    4c4c:	a8 1b       	sub	r26, r24
    4c4e:	b1 09       	sbc	r27, r1
    4c50:	87 fd       	sbrc	r24, 7
    4c52:	b3 95       	inc	r27

00004c54 <.Loc.299>:
    4c54:	a5 01       	movw	r20, r10
    4c56:	94 01       	movw	r18, r8
    4c58:	0e 94 84 38 	call	0x7108	; 0x7108 <__mulshisi3>

00004c5c <.Loc.300>:
   cap.cval /= 100;		// was multiplied with 1000, now divided by 100
    4c5c:	24 e6       	ldi	r18, 0x64	; 100
    4c5e:	30 e0       	ldi	r19, 0x00	; 0
    4c60:	40 e0       	ldi	r20, 0x00	; 0
    4c62:	50 e0       	ldi	r21, 0x00	; 0
    4c64:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>
    4c68:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <cap>
    4c6c:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <cap+0x1>
    4c70:	40 93 3e 01 	sts	0x013E, r20	; 0x80013e <cap+0x2>
    4c74:	50 93 3f 01 	sts	0x013F, r21	; 0x80013f <cap+0x3>

00004c78 <.L21>:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    4c78:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <NumOfDiodes>
    4c7c:	81 15       	cp	r24, r1
    4c7e:	29 f0       	breq	.+10     	; 0x4c8a <.L33>

00004c80 <.Loc.304>:
    4c80:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <PartFound>
    4c84:	85 30       	cpi	r24, 0x05	; 5
    4c86:	09 f0       	breq	.+2      	; 0x4c8a <.L33>

00004c88 <L0^A>:
    4c88:	ca cd       	rjmp	.-1132   	; 0x481e <.L14>

00004c8a <.L33>:
      PartFound = PART_CAPACITOR;	//capacitor is found
    4c8a:	88 e0       	ldi	r24, 0x08	; 8
    4c8c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>

00004c90 <.Loc.307>:
      if ((cap.cpre > cap.cpre_max) || ((cap.cpre == cap.cpre_max) && (cap.cval > cap.cval_max))) {
    4c90:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <cap+0x12>

00004c94 <.Loc.309>:
    4c94:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <cap+0x13>

00004c98 <.Loc.310>:
    4c98:	98 17       	cp	r25, r24
    4c9a:	c4 f0       	brlt	.+48     	; 0x4ccc <.L34>

00004c9c <.Loc.311>:
    4c9c:	89 13       	cpse	r24, r25
    4c9e:	bf cd       	rjmp	.-1154   	; 0x481e <.L14>

00004ca0 <.Loc.312>:
    4ca0:	40 91 3c 01 	lds	r20, 0x013C	; 0x80013c <cap>
    4ca4:	50 91 3d 01 	lds	r21, 0x013D	; 0x80013d <cap+0x1>
    4ca8:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <cap+0x2>
    4cac:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <cap+0x3>
    4cb0:	00 91 40 01 	lds	r16, 0x0140	; 0x800140 <cap+0x4>
    4cb4:	10 91 41 01 	lds	r17, 0x0141	; 0x800141 <cap+0x5>
    4cb8:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <cap+0x6>
    4cbc:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <cap+0x7>
    4cc0:	04 17       	cp	r16, r20
    4cc2:	15 07       	cpc	r17, r21
    4cc4:	26 07       	cpc	r18, r22
    4cc6:	37 07       	cpc	r19, r23
    4cc8:	08 f0       	brcs	.+2      	; 0x4ccc <.L34>

00004cca <L0^A>:
    4cca:	a9 cd       	rjmp	.-1198   	; 0x481e <.L14>

00004ccc <.L34>:
         cap.cval_max = cap.cval;
    4ccc:	40 91 3c 01 	lds	r20, 0x013C	; 0x80013c <cap>
    4cd0:	50 91 3d 01 	lds	r21, 0x013D	; 0x80013d <cap+0x1>
    4cd4:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <cap+0x2>
    4cd8:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <cap+0x3>
    4cdc:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <cap+0x4>
    4ce0:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <cap+0x5>
    4ce4:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <cap+0x6>
    4ce8:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <cap+0x7>

00004cec <.Loc.315>:
         cap.cpre_max = cap.cpre;
    4cec:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cap+0x13>

00004cf0 <.Loc.317>:
         cap.v_loss = vloss;		// lost voltage in 0.01%
    4cf0:	f0 92 4b 01 	sts	0x014B, r15	; 0x80014b <cap+0xf>
    4cf4:	e0 92 4a 01 	sts	0x014A, r14	; 0x80014a <cap+0xe>

00004cf8 <.Loc.319>:
         cap.ca = LowPin;		// save LowPin
    4cf8:	d0 93 4c 01 	sts	0x014C, r29	; 0x80014c <cap+0x10>

00004cfc <.Loc.321>:
         cap.cb = HighPin;		// save HighPin
    4cfc:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <cap+0x11>
    4d00:	8e cd       	rjmp	.-1252   	; 0x481e <.L14>

00004d02 <__vector_13>:
#ifndef INHIBIT_SLEEP_MODE
/* Interrupt Service Routine for timer1 Overflow */
 ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    4d02:	1f 92       	push	r1
    4d04:	1f b6       	in	r1, 0x3f	; 63
    4d06:	1f 92       	push	r1
    4d08:	11 24       	eor	r1, r1
    4d0a:	8f 93       	push	r24
    4d0c:	9f 93       	push	r25

00004d0e <.LCFI6>:
 if ((!(TI1_INT_FLAGS & (1<<ICF1)) && (unfinished !=0)) || ((TI1_INT_FLAGS & (1<<ICF1)) && (ICR1 < 250))) {
    4d0e:	b5 99       	sbic	0x16, 5	; 22
    4d10:	04 c0       	rjmp	.+8      	; 0x4d1a <.L50>

00004d12 <.Loc.326>:
    4d12:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <unfinished>

00004d16 <.Loc.327>:
    4d16:	81 11       	cpse	r24, r1
    4d18:	09 c0       	rjmp	.+18     	; 0x4d2c <.L51>

00004d1a <.L50>:
    4d1a:	b5 9b       	sbis	0x16, 5	; 22
    4d1c:	10 c0       	rjmp	.+32     	; 0x4d3e <.L49>

00004d1e <.Loc.329>:
    4d1e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
    4d22:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>

00004d26 <.Loc.330>:
    4d26:	8a 3f       	cpi	r24, 0xFA	; 250
    4d28:	91 05       	cpc	r25, r1
    4d2a:	48 f4       	brcc	.+18     	; 0x4d3e <.L49>

00004d2c <.L51>:
    // Capture Event not pending or (Capture Event pending and ICR1 < 250
    // the ICR1H is buffered and can not examined alone, we must read the ICR1L first (with ICR1 access) !
   ovcnt16++;				// count Overflow
    4d2c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    4d30:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    4d34:	01 96       	adiw	r24, 0x01	; 1
    4d36:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <ovcnt16+0x1>
    4d3a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <ovcnt16>

00004d3e <.L49>:
 }
}
    4d3e:	9f 91       	pop	r25
    4d40:	8f 91       	pop	r24
    4d42:	1f 90       	pop	r1
    4d44:	1f be       	out	0x3f, r1	; 63
    4d46:	1f 90       	pop	r1
    4d48:	18 95       	reti

00004d4a <__vector_10>:
/* Interrupt Service Routine for timer1 capture event (Comparator) */
 ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    4d4a:	1f 92       	push	r1
    4d4c:	1f b6       	in	r1, 0x3f	; 63
    4d4e:	1f 92       	push	r1
    4d50:	11 24       	eor	r1, r1
    4d52:	8f 93       	push	r24
    4d54:	9f 93       	push	r25

00004d56 <.LCFI7>:
 unfinished = 0;			// clear unfinished flag
    4d56:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <unfinished>

00004d5a <.Loc.337>:
 // With unfinished set to 0, we prevent further counting the Overflow.s
 // Is already a Overflow detected?
 if((TI1_INT_FLAGS & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    4d5a:	b0 9b       	sbis	0x16, 0	; 22
    4d5c:	10 c0       	rjmp	.+32     	; 0x4d7e <.L56>

00004d5e <.Loc.339>:
   //there is already a Overflow detected, before or after the capture event?
   // ICR1H is buffered and can not examined alone, we must read the ICR1L first (with ICR1 access) !
   if (ICR1 < 250) {
    4d5e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
    4d62:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>

00004d66 <.Loc.341>:
    4d66:	8a 3f       	cpi	r24, 0xFA	; 250
    4d68:	91 05       	cpc	r25, r1
    4d6a:	48 f4       	brcc	.+18     	; 0x4d7e <.L56>

00004d6c <.Loc.342>:
     //  Yes, Input Capture Counter is low, Overflow has occured before the capture event
     ovcnt16++;				// count Overflow
    4d6c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    4d70:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    4d74:	01 96       	adiw	r24, 0x01	; 1
    4d76:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <ovcnt16+0x1>
    4d7a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <ovcnt16>

00004d7e <.L56>:
   }
 }
}
    4d7e:	9f 91       	pop	r25
    4d80:	8f 91       	pop	r24
    4d82:	1f 90       	pop	r1
    4d84:	1f be       	out	0x3f, r1	; 63
    4d86:	1f 90       	pop	r1
    4d88:	18 95       	reti

00004d8a <Calibrate_UR>:
#include "Transistortester.h"

void Calibrate_UR(void) {
    4d8a:	a0 e0       	ldi	r26, 0x00	; 0
    4d8c:	b0 e0       	ldi	r27, 0x00	; 0
    4d8e:	eb ec       	ldi	r30, 0xCB	; 203
    4d90:	f6 e2       	ldi	r31, 0x26	; 38
    4d92:	0c 94 90 38 	jmp	0x7120	; 0x7120 <.Loc.6>

00004d96 <.L1^B1>:
  uint16_t sum_rp;	// sum of 3 Pin voltages with 680 Ohm load
  uint16_t u680;	// 3 * (Voltage at 680 Ohm)
#endif


  adc_vcc_reference = U_VCC;     // set initial VCC Voltage to 5000mV
    4d96:	88 e8       	ldi	r24, 0x88	; 136
    4d98:	93 e1       	ldi	r25, 0x13	; 19
    4d9a:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <adc_vcc_reference+0x1>
    4d9e:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <adc_vcc_reference>

00004da2 <.Loc.6>:
  ADCconfig.U_AVCC = adc_vcc_reference;	// set ADC to normal VCC value
    4da2:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <ADCconfig+0x5>
    4da6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <ADCconfig+0x4>

00004daa <.Loc.8>:
  ADCconfig.Samples = R_ANZ_MESS;	// set number of ADC reads near to maximum
    4daa:	8e eb       	ldi	r24, 0xBE	; 190
    4dac:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ADCconfig>

00004db0 <.Loc.10>:
                                        //############################################
#if FLASHEND > 0x1fff
  uint16_t mv2500;
  ADC_PORT = TXD_VAL;                   // switch to 0V
    4db0:	18 b8       	out	0x08, r1	; 8

00004db2 <.Loc.13>:
  ADC_DDR = (1<<TPRELAY) | TXD_MSK;       // switch pin with 2.5V reference to GND
    4db2:	80 e1       	ldi	r24, 0x10	; 16
    4db4:	87 b9       	out	0x07, r24	; 7

00004db6 <.Loc.15>:
  wait20us();			// switch only short time, so that the relais do not really switch
    4db6:	0e 94 bc 07 	call	0xf78	; 0xf78 <wait20us>

00004dba <.LVL0>:
  ADC_DDR =  TXD_MSK;		// switch pin with reference back to input
    4dba:	17 b8       	out	0x07, r1	; 7

00004dbc <.Loc.18>:
  mv2500 = W5msReadADC(TPREF); // read voltage of 2.5V precision reference
    4dbc:	84 e0       	ldi	r24, 0x04	; 4
    4dbe:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00004dc2 <.LVL1>:
    4dc2:	ac 01       	movw	r20, r24

00004dc4 <.LVL2>:
  if ((mv2500 > 2250) && (mv2500 < 2750)) {
    4dc4:	8b 5c       	subi	r24, 0xCB	; 203
    4dc6:	98 40       	sbci	r25, 0x08	; 8

00004dc8 <.Loc.22>:
    4dc8:	83 3f       	cpi	r24, 0xF3	; 243
    4dca:	91 40       	sbci	r25, 0x01	; 1
    4dcc:	a0 f4       	brcc	.+40     	; 0x4df6 <.L2>

00004dce <.Loc.23>:
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    4dce:	81 e0       	ldi	r24, 0x01	; 1
    4dd0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <WithReference>

00004dd4 <.Loc.25>:
     adc_vcc_reference = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / mv2500;
    4dd4:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <ADCconfig+0x4>
    4dd8:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <ADCconfig+0x5>
    4ddc:	af eb       	ldi	r26, 0xBF	; 191
    4dde:	b9 e0       	ldi	r27, 0x09	; 9
    4de0:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

00004de4 <.Loc.27>:
    4de4:	9a 01       	movw	r18, r20
    4de6:	40 e0       	ldi	r20, 0x00	; 0
    4de8:	50 e0       	ldi	r21, 0x00	; 0

00004dea <.LVL3>:
    4dea:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00004dee <.LVL4>:
    4dee:	30 93 5b 01 	sts	0x015B, r19	; 0x80015b <adc_vcc_reference+0x1>
    4df2:	20 93 5a 01 	sts	0x015A, r18	; 0x80015a <adc_vcc_reference>

00004df6 <.L2>:
  }
  ADCconfig.U_AVCC = adc_vcc_reference;	// set ADC to normal VCC value
    4df6:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <adc_vcc_reference>
    4dfa:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <adc_vcc_reference+0x1>
    4dfe:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <ADCconfig+0x5>
    4e02:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <ADCconfig+0x4>

00004e06 <.Loc.32>:
#endif
#ifdef WITH_AUTO_REF
  (void) ReadADC(MUX_INT_REF);	// read reference voltage 
    4e06:	8e e0       	ldi	r24, 0x0E	; 14
    4e08:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00004e0c <.LVL5>:
  ref_mv = W5msReadADC(MUX_INT_REF);	// read reference voltage 
    4e0c:	8e e0       	ldi	r24, 0x0E	; 14
    4e0e:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00004e12 <.LVL6>:
    4e12:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <ref_mv+0x1>
    4e16:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <ref_mv>

00004e1a <.Loc.37>:
#else
  ref_mv = DEFAULT_BAND_GAP;    // set to default Reference Voltage
#endif
  (void) RefVoltage();			//compute RHmultip = f(reference voltage)
    4e1a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <RefVoltage>

00004e1e <.LVL7>:
                                        // ref_mv_offs, ADCconfig.U_Bandgap
                                        //############################################

  EntladePins();	// make sure, that no voltage is left from capacitors
    4e1e:	d9 db       	rcall	.-2126   	; 0x45d2 <EntladePins>

00004e20 <.LVL8>:
#ifdef AUTO_CAL
  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_PORT =  TXD_VAL;	//ADC-Ports to GND
    4e20:	18 b8       	out	0x08, r1	; 8

00004e22 <.Loc.41>:
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    4e22:	c1 e0       	ldi	r28, 0x01	; 1
    4e24:	c7 b9       	out	0x07, r28	; 7

00004e26 <.Loc.43>:
 #ifdef PULLUP_DISABLE
  R_PORT = (1<<PIN_RL1) | (1<<PIN_RL2) | (1<<PIN_RL3);		//R_L-PORTs to VCC
 #else
  R_PORT = 1<<PIN_RL1;		//R_L-PORT 1 to VCC
    4e26:	c5 b9       	out	0x05, r28	; 5

00004e28 <.Loc.45>:
 #endif
  R_DDR = 1<<PIN_RL1;		//Pin 1 to output and over R_L to VCC
    4e28:	c4 b9       	out	0x04, r28	; 4

00004e2a <.Loc.47>:
  sum_rm = W5msReadADC(TP1);
    4e2a:	80 e0       	ldi	r24, 0x00	; 0
    4e2c:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00004e30 <.LVL9>:
    4e30:	8c 01       	movw	r16, r24

00004e32 <.LVL10>:
// - - - - - - - 
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    4e32:	82 e0       	ldi	r24, 0x02	; 2
    4e34:	c8 2e       	mov	r12, r24
    4e36:	c7 b8       	out	0x07, r12	; 7

00004e38 <.Loc.51>:
 #ifndef PULLUP_DISABLE
  R_PORT =  1<<PIN_RL2;		//R_L-PORT 2 to VCC
    4e38:	d4 e0       	ldi	r29, 0x04	; 4
    4e3a:	d5 b9       	out	0x05, r29	; 5

00004e3c <.Loc.53>:
 #endif
  R_DDR = 1<<PIN_RL2;		//Pin 2 to output and over R_L to VCC
    4e3c:	d4 b9       	out	0x04, r29	; 4

00004e3e <.Loc.55>:
  sum_rm += W5msReadADC(TP2);
    4e3e:	81 e0       	ldi	r24, 0x01	; 1
    4e40:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00004e44 <.LVL11>:
    4e44:	08 0f       	add	r16, r24
    4e46:	19 1f       	adc	r17, r25

00004e48 <.Loc.58>:
// - - - - - - - 
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    4e48:	d7 b9       	out	0x07, r29	; 7

00004e4a <.Loc.60>:
 #ifndef PULLUP_DISABLE
  R_PORT =  1<<PIN_RL3;		//R_L-PORT 3 to VCC
    4e4a:	90 e1       	ldi	r25, 0x10	; 16
    4e4c:	d9 2e       	mov	r13, r25
    4e4e:	d5 b8       	out	0x05, r13	; 5

00004e50 <.Loc.62>:
 #endif
  R_DDR = 1<<PIN_RL3;		//Pin 3 to output and over R_L to VCC
    4e50:	d4 b8       	out	0x04, r13	; 4

00004e52 <.Loc.64>:
  sum_rm += W5msReadADC(TP3);	//add all three values
    4e52:	82 e0       	ldi	r24, 0x02	; 2
    4e54:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00004e58 <.LVL13>:
    4e58:	08 0f       	add	r16, r24
    4e5a:	19 1f       	adc	r17, r25

00004e5c <.Loc.67>:
// - - - - - - - 

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    4e5c:	15 b8       	out	0x05, r1	; 5

00004e5e <.Loc.69>:
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    4e5e:	c8 b9       	out	0x08, r28	; 8

00004e60 <.Loc.71>:
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    4e60:	c7 b9       	out	0x07, r28	; 7

00004e62 <.Loc.73>:
  R_DDR = 1<<PIN_RL1;		//Pin 1 to output and over R_L to GND
    4e62:	c4 b9       	out	0x04, r28	; 4

00004e64 <.Loc.75>:
  sum_rp = vcc_diff(W5msReadADC(TP1));
    4e64:	80 e0       	ldi	r24, 0x00	; 0
    4e66:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00004e6a <.LVL15>:
    4e6a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vcc_diff>

00004e6e <.LVL16>:
    4e6e:	7c 01       	movw	r14, r24

00004e70 <.LVL17>:
// - - - - - - - 
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    4e70:	c8 b8       	out	0x08, r12	; 8

00004e72 <.Loc.80>:
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    4e72:	c7 b8       	out	0x07, r12	; 7

00004e74 <.Loc.82>:
  R_DDR = 1<<PIN_RL2;		//Pin 2 to output and over R_L to GND
    4e74:	d4 b9       	out	0x04, r29	; 4

00004e76 <.Loc.84>:
  sum_rp += vcc_diff(W5msReadADC(TP2));
    4e76:	81 e0       	ldi	r24, 0x01	; 1
    4e78:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00004e7c <.LVL18>:
    4e7c:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vcc_diff>

00004e80 <.LVL19>:
    4e80:	e8 0e       	add	r14, r24
    4e82:	f9 1e       	adc	r15, r25

00004e84 <.Loc.88>:
// - - - - - - - 

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    4e84:	d8 b9       	out	0x08, r29	; 8

00004e86 <.Loc.90>:
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    4e86:	d7 b9       	out	0x07, r29	; 7

00004e88 <.Loc.92>:
  R_DDR = 1<<PIN_RL3;		//Pin 3 to output and over R_L to GND
    4e88:	d4 b8       	out	0x04, r13	; 4

00004e8a <.Loc.94>:
  sum_rp += vcc_diff(W5msReadADC(TP3));
    4e8a:	82 e0       	ldi	r24, 0x02	; 2
    4e8c:	0e 94 f8 07 	call	0xff0	; 0xff0 <W5msReadADC>

00004e90 <.LVL21>:
    4e90:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vcc_diff>

00004e94 <.LVL22>:
    4e94:	e7 01       	movw	r28, r14
    4e96:	c8 0f       	add	r28, r24
    4e98:	d9 1f       	adc	r29, r25

00004e9a <.LVL23>:
// - - - - - - - 
  ADC_DDR =  TXD_MSK;	//ADC-Pins to input
    4e9a:	17 b8       	out	0x07, r1	; 7

00004e9c <.Loc.100>:
  ADC_PORT =  TXD_VAL;	//ADC-Ports to GND
    4e9c:	18 b8       	out	0x08, r1	; 8

00004e9e <.Loc.102>:
  R_DDR   = 0;
    4e9e:	14 b8       	out	0x04, r1	; 4

00004ea0 <.Loc.104>:

  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_rp);	//three times the voltage at the 680 Ohm
    4ea0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ADCconfig+0x4>
    4ea4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <ADCconfig+0x5>
    4ea8:	6c 01       	movw	r12, r24
    4eaa:	cc 0c       	add	r12, r12
    4eac:	dd 1c       	adc	r13, r13
    4eae:	c8 0e       	add	r12, r24
    4eb0:	d9 1e       	adc	r13, r25

00004eb2 <.Loc.107>:
    4eb2:	c8 01       	movw	r24, r16
    4eb4:	8c 0f       	add	r24, r28
    4eb6:	9d 1f       	adc	r25, r29
    4eb8:	c8 1a       	sub	r12, r24
    4eba:	d9 0a       	sbc	r13, r25

00004ebc <.Loc.108>:
  pin_rmi = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    4ebc:	e1 2c       	mov	r14, r1
    4ebe:	f1 2c       	mov	r15, r1

00004ec0 <.Loc.109>:
    4ec0:	98 01       	movw	r18, r16
    4ec2:	a0 e9       	ldi	r26, 0x90	; 144
    4ec4:	ba e1       	ldi	r27, 0x1A	; 26
    4ec6:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

00004eca <.Loc.110>:
    4eca:	a7 01       	movw	r20, r14
    4ecc:	96 01       	movw	r18, r12
    4ece:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>
    4ed2:	49 01       	movw	r8, r18
    4ed4:	5a 01       	movw	r10, r20

00004ed6 <.Loc.111>:
    4ed6:	30 93 18 01 	sts	0x0118, r19	; 0x800118 <pin_rmi+0x1>
    4eda:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <pin_rmi>

00004ede <.Loc.112>:
//  adcmv[2] = pin_rm;	// for last output in row 2
  pin_rpl = (unsigned long)((unsigned long)sum_rp * (unsigned long)R_L_VAL) / (unsigned long)u680;
    4ede:	9e 01       	movw	r18, r28
    4ee0:	a0 e9       	ldi	r26, 0x90	; 144
    4ee2:	ba e1       	ldi	r27, 0x1A	; 26
    4ee4:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

00004ee8 <.Loc.114>:
    4ee8:	a7 01       	movw	r20, r14
    4eea:	96 01       	movw	r18, r12
    4eec:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00004ef0 <.Loc.115>:
    4ef0:	30 93 16 01 	sts	0x0116, r19	; 0x800116 <pin_rpl+0x1>
    4ef4:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <pin_rpl>

00004ef8 <.Loc.116>:
  resis680pl = pin_rpl + R_L_VAL;
    4ef8:	20 57       	subi	r18, 0x70	; 112
    4efa:	35 4e       	sbci	r19, 0xE5	; 229

00004efc <.Loc.118>:
    4efc:	30 93 1c 01 	sts	0x011C, r19	; 0x80011c <resis680pl+0x1>
    4f00:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <resis680pl>

00004f04 <.Loc.119>:
  resis680mi = pin_rmi + R_L_VAL;
    4f04:	c4 01       	movw	r24, r8
    4f06:	80 57       	subi	r24, 0x70	; 112
    4f08:	95 4e       	sbci	r25, 0xE5	; 229

00004f0a <.Loc.121>:
    4f0a:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <resis680mi+0x1>
    4f0e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <resis680mi>

00004f12 <.Loc.122>:
#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    4f12:	89 e1       	ldi	r24, 0x19	; 25
    4f14:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ADCconfig>

00004f18 <.Loc.124>:
 } 
    4f18:	cd b7       	in	r28, 0x3d	; 61
    4f1a:	de b7       	in	r29, 0x3e	; 62

00004f1c <.LVL25>:
    4f1c:	ec e0       	ldi	r30, 0x0C	; 12
    4f1e:	0c 94 ac 38 	jmp	0x7158	; 0x7158 <.Loc.6>

00004f22 <show_resis>:
void show_resis(byte pin1, byte pin2, byte how)
// can be invoked both from main() and from show_Resis13()
// pin1 and pin2 are resistor's pin numbers, but ResistorList[0] should also be correctly filled
// assumes resistance has already been measured, but will do inductance measurements as appropriate
// "how" flag tells how to show the results: if set [R] or [RL] will be shown in top right corner
{
    4f22:	a0 e0       	ldi	r26, 0x00	; 0
    4f24:	b0 e0       	ldi	r27, 0x00	; 0
    4f26:	e7 e9       	ldi	r30, 0x97	; 151
    4f28:	f7 e2       	ldi	r31, 0x27	; 39
    4f2a:	0c 94 94 38 	jmp	0x7128	; 0x7128 <.Loc.10>

00004f2e <.L1^B1>:
    4f2e:	d8 2f       	mov	r29, r24
    4f30:	c6 2f       	mov	r28, r22
    4f32:	14 2f       	mov	r17, r20

00004f34 <.Loc.2>:
 #ifdef RMETER_WITH_L
           lcd_testpin(pin1);
    4f34:	0e 94 99 0c 	call	0x1932	; 0x1932 <lcd_testpin>

00004f38 <.LVL1>:
           lcd_MEM_string(Resistor_str);	// -[==]-
    4f38:	88 e0       	ldi	r24, 0x08	; 8
    4f3a:	91 e0       	ldi	r25, 0x01	; 1
    4f3c:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00004f40 <.LVL2>:
           lcd_refresh();
	   ReadInductance();	// measure inductance, possible only with R<2.1k
    4f40:	ff d1       	rcall	.+1022   	; 0x5340 <ReadInductance>

00004f42 <.LVL3>:

  #ifdef SamplingADC
           sampling_lc(pin1,pin2);    // measure inductance using resonance method
    4f42:	6c 2f       	mov	r22, r28
    4f44:	8d 2f       	mov	r24, r29
    4f46:	0e 94 0a 36 	call	0x6c14	; 0x6c14 <sampling_lc>

00004f4a <.LVL4>:

           // draw first line: the pin numbers, RR and possibly LL symbol, and possibly [R] or [RL]
           byte lclx0=(lc_lx==0);
    4f4a:	c0 90 b8 01 	lds	r12, 0x01B8	; 0x8001b8 <lc_lx>
    4f4e:	d0 90 b9 01 	lds	r13, 0x01B9	; 0x8001b9 <lc_lx+0x1>
    4f52:	e0 90 ba 01 	lds	r14, 0x01BA	; 0x8001ba <lc_lx+0x2>
    4f56:	f0 90 bb 01 	lds	r15, 0x01BB	; 0x8001bb <lc_lx+0x3>

00004f5a <.LVL5>:
           if (inductor_lpre < 0 || !lclx0) 
    4f5a:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <inductor_lpre>
    4f5e:	87 fd       	sbrc	r24, 7
    4f60:	05 c0       	rjmp	.+10     	; 0x4f6c <.L2>

00004f62 <.Loc.11>:
    4f62:	c1 14       	cp	r12, r1
    4f64:	d1 04       	cpc	r13, r1
    4f66:	e1 04       	cpc	r14, r1
    4f68:	f1 04       	cpc	r15, r1
    4f6a:	21 f0       	breq	.+8      	; 0x4f74 <.L3>

00004f6c <.L2>:
  #else 
           if (inductor_lpre < 0)
  #endif

           {
              lcd_MEM_string(Inductor_str+1);            // "LL-"
    4f6c:	84 e0       	ldi	r24, 0x04	; 4
    4f6e:	91 e0       	ldi	r25, 0x01	; 1
    4f70:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00004f74 <.L3>:
           }
           lcd_testpin(pin2);
    4f74:	8c 2f       	mov	r24, r28
    4f76:	0e 94 99 0c 	call	0x1932	; 0x1932 <lcd_testpin>

00004f7a <.LVL7>:

           // second line: measured R value (but that goes on first line if lc_lx!=0), and measured inductance, if applicable

  #ifdef SamplingADC
           if (!lclx0) {  /* inductance measured by sampling method */
    4f7a:	c1 14       	cp	r12, r1
    4f7c:	d1 04       	cpc	r13, r1
    4f7e:	e1 04       	cpc	r14, r1
    4f80:	f1 04       	cpc	r15, r1
    4f82:	31 f0       	breq	.+12     	; 0x4f90 <.L4>

00004f84 <.Loc.16>:
              lcd_space();
    4f84:	0e 94 b4 06 	call	0xd68	; 0xd68 <lcd_space>

00004f88 <.LVL8>:
              RvalOut(ResistorList[0]);		// show Resistance, probably ESR, still on first line
    4f88:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <ResistorList>
    4f8c:	0e 94 18 07 	call	0xe30	; 0xe30 <RvalOut>

00004f90 <.L4>:
           }
  #endif
 
  #if FLASHEND > 0x3fff
           if ((how) && (_lcd_column<=LCD_LINE_LENGTH-4)) {
    4f90:	11 15       	cp	r17, r1
    4f92:	09 f4       	brne	.+2      	; 0x4f96 <.Loc.20>

00004f94 <L0^A>:
    4f94:	5a c0       	rjmp	.+180    	; 0x504a <.L5>

00004f96 <.Loc.20>:
    4f96:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_lcd_column>

00004f9a <.Loc.21>:
    4f9a:	8f 30       	cpi	r24, 0x0F	; 15
    4f9c:	08 f0       	brcs	.+2      	; 0x4fa0 <.Loc.22>

00004f9e <L0^A>:
    4f9e:	55 c0       	rjmp	.+170    	; 0x504a <.L5>

00004fa0 <.Loc.22>:
              // still need to write "[RL]" or "[R]" at the end of first line, if it fits
                 lcd_MEM_string(RL_METER_str+(_lcd_column-6));	// " [R]" or "[RL]"
    4fa0:	86 50       	subi	r24, 0x06	; 6
    4fa2:	99 0b       	sbc	r25, r25
    4fa4:	8f 5b       	subi	r24, 0xBF	; 191
    4fa6:	9c 4f       	sbci	r25, 0xFC	; 252
    4fa8:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00004fac <.L6>:
	   }
  #else
           lcd_clear_line();
  #endif
//           lcd_line2();
           lcd_next_line_wait(0);
    4fac:	80 e0       	ldi	r24, 0x00	; 0
    4fae:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <lcd_next_line_wait>

00004fb2 <.LVL11>:
  #ifdef SamplingADC
           if (!lclx0) {  /* Frequency found */
    4fb2:	c1 14       	cp	r12, r1
    4fb4:	d1 04       	cpc	r13, r1
    4fb6:	e1 04       	cpc	r14, r1
    4fb8:	f1 04       	cpc	r15, r1
    4fba:	09 f4       	brne	.+2      	; 0x4fbe <.LBB2>

00004fbc <L0^A>:
    4fbc:	49 c0       	rjmp	.+146    	; 0x5050 <.L7>

00004fbe <.LBB2>:
//              lcd_next_line(0);
              DisplayValue(lc_lx,lc_lpre,'H',3);	// output inductance
    4fbe:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <lc_lx>
    4fc2:	70 91 b9 01 	lds	r23, 0x01B9	; 0x8001b9 <lc_lx+0x1>
    4fc6:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <lc_lx+0x2>
    4fca:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <lc_lx+0x3>
    4fce:	03 e0       	ldi	r16, 0x03	; 3
    4fd0:	28 e4       	ldi	r18, 0x48	; 72
    4fd2:	47 ef       	ldi	r20, 0xF7	; 247
    4fd4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DisplayValue>

00004fd8 <.LVL12>:
              lcd_MEM2_string(iF_str);		// " if "
    4fd8:	87 e1       	ldi	r24, 0x17	; 23
    4fda:	91 e0       	ldi	r25, 0x01	; 1
    4fdc:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00004fe0 <.LVL13>:
              uint16_t lc_cpar;    // value of parallel capacitor used for calculating inductance, in pF
              lc_cpar=eeprom_read_word((uint16_t *)&lc_cpar_ee);
    4fe0:	8e e4       	ldi	r24, 0x4E	; 78
    4fe2:	93 e0       	ldi	r25, 0x03	; 3
    4fe4:	0e 94 1d 39 	call	0x723a	; 0x723a <eeprom_read_word>

00004fe8 <.LVL14>:
   #if (LCD_LINES<3) && (LCD_LINE_LENGTH<17)
              DisplayValue16(lc_cpar,-12,'F',2);	        // on 2-line dispaly show parallel capacitance with only 2 digits to make room for the '+' sign at the end of the line
   #else
              DisplayValue16(lc_cpar,-12,'F',3);	        // show parallel capacitance
    4fe8:	23 e0       	ldi	r18, 0x03	; 3
    4fea:	46 e4       	ldi	r20, 0x46	; 70
    4fec:	64 ef       	ldi	r22, 0xF4	; 244
    4fee:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

00004ff2 <.L8>:

           }
           // third line: measured resonance frequency and Q, if applicable

  #ifdef SamplingADC
           if (lc_fx) {
    4ff2:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <lc_fx>
    4ff6:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <lc_fx+0x1>
    4ffa:	a0 91 c0 01 	lds	r26, 0x01C0	; 0x8001c0 <lc_fx+0x2>
    4ffe:	b0 91 c1 01 	lds	r27, 0x01C1	; 0x8001c1 <lc_fx+0x3>
    5002:	89 2b       	or	r24, r25
    5004:	8a 2b       	or	r24, r26
    5006:	8b 2b       	or	r24, r27
    5008:	f1 f1       	breq	.+124    	; 0x5086 <.L9>

0000500a <.Loc.35>:
              lcd_next_line_wait(0);
    500a:	80 e0       	ldi	r24, 0x00	; 0
    500c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <lcd_next_line_wait>

00005010 <.LVL16>:
              DisplayValue(lc_fx,lc_fpre,'H',4);
    5010:	60 91 be 01 	lds	r22, 0x01BE	; 0x8001be <lc_fx>
    5014:	70 91 bf 01 	lds	r23, 0x01BF	; 0x8001bf <lc_fx+0x1>
    5018:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <lc_fx+0x2>
    501c:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <lc_fx+0x3>
    5020:	04 e0       	ldi	r16, 0x04	; 4
    5022:	28 e4       	ldi	r18, 0x48	; 72
    5024:	40 e0       	ldi	r20, 0x00	; 0
    5026:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DisplayValue>

0000502a <.LVL17>:
              lcd_MEM2_string(zQ_str);		// "z Q="
    502a:	82 e1       	ldi	r24, 0x12	; 18
    502c:	91 e0       	ldi	r25, 0x01	; 1
    502e:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00005032 <.LVL18>:
              DisplayValue16(lc_qx, lc_qpre,' ',3);
    5032:	23 e0       	ldi	r18, 0x03	; 3
    5034:	40 e2       	ldi	r20, 0x20	; 32
    5036:	6f ef       	ldi	r22, 0xFF	; 255
    5038:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <lc_qx>
    503c:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <lc_qx+0x1>
    5040:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

00005044 <.L20>:
//              // make sure we clean the third line, but only if the display actually has a 3rd line
//              lcd_next_line(0);
//  #endif
              lcd_next_line(0);
	      if (last_line_used == 0) {
                 lcd_clear_line();
    5044:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

00005048 <.LVL20>:
 #else		/* without Inductance measurement, only show resistance */
           lcd_line2();
           inductor_lpre = -1;		// prevent ESR measurement because Inductance is not tested
           RvalOut(ResistorList[0]);	// show Resistance, no ESR
 #endif
}  /* end show_resis() */
    5048:	25 c0       	rjmp	.+74     	; 0x5094 <.L1>

0000504a <.L5>:
                 lcd_clear_line();
    504a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

0000504e <.LVL21>:
    504e:	ae cf       	rjmp	.-164    	; 0x4fac <.L6>

00005050 <.L7>:
              RvalOut(ResistorList[0]);		// show Resistance, probably ESR
    5050:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <ResistorList>
    5054:	0e 94 18 07 	call	0xe30	; 0xe30 <RvalOut>

00005058 <.LVL22>:
              if (inductor_lpre < -2) {
    5058:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <inductor_lpre>
    505c:	8e 3f       	cpi	r24, 0xFE	; 254
    505e:	4c f6       	brge	.-110    	; 0x4ff2 <.L8>

00005060 <.Loc.46>:
                 lcd_MEM_string(Lis_str);		// "L="
    5060:	8f e2       	ldi	r24, 0x2F	; 47
    5062:	91 e0       	ldi	r25, 0x01	; 1
    5064:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00005068 <.LVL23>:
                 DisplayValue(inductor_lx,inductor_lpre,'H',3);        // output classic inductance
    5068:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <inductor_lx>
    506c:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <inductor_lx+0x1>
    5070:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <inductor_lx+0x2>
    5074:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <inductor_lx+0x3>
    5078:	03 e0       	ldi	r16, 0x03	; 3
    507a:	28 e4       	ldi	r18, 0x48	; 72
    507c:	40 91 9e 01 	lds	r20, 0x019E	; 0x80019e <inductor_lpre>
    5080:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DisplayValue>

00005084 <.LVL24>:
    5084:	b6 cf       	rjmp	.-148    	; 0x4ff2 <.L8>

00005086 <.L9>:
              lcd_next_line(0);
    5086:	80 e0       	ldi	r24, 0x00	; 0
    5088:	0e 94 67 0b 	call	0x16ce	; 0x16ce <lcd_next_line>

0000508c <.LVL25>:
	      if (last_line_used == 0) {
    508c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <last_line_used>
    5090:	81 15       	cp	r24, r1
    5092:	c1 f2       	breq	.-80     	; 0x5044 <.L20>

00005094 <.L1>:
}  /* end show_resis() */
    5094:	cd b7       	in	r28, 0x3d	; 61
    5096:	de b7       	in	r29, 0x3e	; 62

00005098 <.LVL26>:
    5098:	e8 e0       	ldi	r30, 0x08	; 8
    509a:	0c 94 b0 38 	jmp	0x7160	; 0x7160 <.Loc.10>

0000509e <show_cap>:
#if FLASHEND > 0x3fff
void show_cap(uint8_t how)
#else
void show_cap_simple(void)
#endif
{
    509e:	ef 92       	push	r14

000050a0 <.LCFI1>:
    50a0:	ff 92       	push	r15

000050a2 <.LCFI2>:
    50a2:	0f 93       	push	r16

000050a4 <.LCFI3>:
    50a4:	1f 93       	push	r17

000050a6 <.LCFI4>:
    50a6:	cf 93       	push	r28

000050a8 <.LCFI5>:
    50a8:	df 93       	push	r29

000050aa <.LCFI6>:
    50aa:	18 2f       	mov	r17, r24

000050ac <.Loc.55>:
//     lcd_MEM_string(Capacitor);
  lcd_line1();
    50ac:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <lcd_line1>

000050b0 <.LVL28>:
  lcd_testpin(cap.ca);               //Pin number 1
    50b0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <cap+0x10>
    50b4:	0e 94 99 0c 	call	0x1932	; 0x1932 <lcd_testpin>

000050b8 <.LVL29>:
  lcd_MEM_string(CapZeich);          // capacitor sign
    50b8:	8b e4       	ldi	r24, 0x4B	; 75
    50ba:	91 e0       	ldi	r25, 0x01	; 1
    50bc:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

000050c0 <.LVL30>:
#if FLASHEND > 0x1fff
  uint8_t present_res;	// true, if resistor symbol is shown in Row 1
  uint8_t present_esr;
  uint8_t present_vloss;
  GetVloss();              
    50c0:	7c d3       	rcall	.+1784   	; 0x57ba <GetVloss>

000050c2 <.LVL31>:
  cap.esr = GetESR(cap.cb, cap.ca);          // get ESR of capacitor
    50c2:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <cap+0x10>
    50c6:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cap+0x11>
    50ca:	0e 94 24 09 	call	0x1248	; 0x1248 <GetESR>

000050ce <.LVL32>:
    50ce:	ec 01       	movw	r28, r24

000050d0 <.Loc.64>:
    50d0:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <cap+0xd>
    50d4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <cap+0xc>

000050d8 <.LVL33>:

  present_esr = (cap.esr < 65530);
  present_vloss = (cap.v_loss != 0);
    50d8:	e0 90 4a 01 	lds	r14, 0x014A	; 0x80014a <cap+0xe>
    50dc:	f0 90 4b 01 	lds	r15, 0x014B	; 0x80014b <cap+0xf>

000050e0 <.LVL34>:
  #else
  present_res = (present_esr  && (!present_vloss));
  #endif
  // show Vloss additionally in line 2 , or no Vloss
 #endif
  if (present_res)
    50e0:	ca 3f       	cpi	r28, 0xFA	; 250
    50e2:	8f ef       	ldi	r24, 0xFF	; 255
    50e4:	d8 07       	cpc	r29, r24

000050e6 <.LVL35>:
    50e6:	20 f4       	brcc	.+8      	; 0x50f0 <.L22>

000050e8 <.Loc.72>:
  {
     lcd_MEM_string(Resistor_str+1);   // [=]-
    50e8:	89 e0       	ldi	r24, 0x09	; 9
    50ea:	91 e0       	ldi	r25, 0x01	; 1
    50ec:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

000050f0 <.L22>:
  }
#endif   /* FLASHEND > 0x1fff */
  lcd_testpin(cap.cb);               //Pin number 2
    50f0:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cap+0x11>
    50f4:	0e 94 99 0c 	call	0x1932	; 0x1932 <lcd_testpin>

000050f8 <.LVL37>:

#if FLASHEND > 0x1fff
 #if FLASHEND > 0x3fff
  if (how) {
    50f8:	11 15       	cp	r17, r1
    50fa:	09 f4       	brne	.+2      	; 0x50fe <.Loc.76>

000050fc <L0^A>:
    50fc:	46 c0       	rjmp	.+140    	; 0x518a <.L23>

000050fe <.Loc.76>:
     // Vloss is allways shown in separate line
     lcd_spaces(LCD_LINE_LENGTH - 3 - _lcd_column);
    50fe:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_lcd_column>

00005102 <.Loc.78>:
    5102:	9f e0       	ldi	r25, 0x0F	; 15
    5104:	98 1b       	sub	r25, r24
    5106:	89 2f       	mov	r24, r25
    5108:	0e 94 c9 0a 	call	0x1592	; 0x1592 <lcd_spaces>

0000510c <.LVL38>:
     lcd_MEM2_string(CMETER_13_str);       // "[C]" at the end of line 1
    510c:	89 e6       	ldi	r24, 0x69	; 105
    510e:	90 e0       	ldi	r25, 0x00	; 0
    5110:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00005114 <.L24>:
#else
  lcd_clear_line();		// clear to end of line
#endif  /* FLASHEND > 0x1fff */

// - - - - - - - - - - - - - - - - - - - - - -
  lcd_line2();                       //2. row 
    5114:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_line2>

00005118 <.LVL40>:
  DisplayValue(cap.cval_max,cap.cpre_max,'F',4);
    5118:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <cap+0x4>
    511c:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <cap+0x5>
    5120:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <cap+0x6>
    5124:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <cap+0x7>
    5128:	04 e0       	ldi	r16, 0x04	; 4
    512a:	26 e4       	ldi	r18, 0x46	; 70
    512c:	40 91 4f 01 	lds	r20, 0x014F	; 0x80014f <cap+0x13>
    5130:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DisplayValue>

00005134 <.LVL41>:

#if FLASHEND > 0x1fff
  if (present_esr) {
    5134:	ca 3f       	cpi	r28, 0xFA	; 250
    5136:	df 4f       	sbci	r29, 0xFF	; 255
    5138:	68 f4       	brcc	.+26     	; 0x5154 <.L25>

0000513a <.Loc.84>:
     lcd_MEM_string(ESR_str);        // " ESR="
    513a:	8a e3       	ldi	r24, 0x3A	; 58
    513c:	91 e0       	ldi	r25, 0x01	; 1
    513e:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00005142 <.LVL42>:
     DisplayValue16(cap.esr,-2,LCD_CHAR_OMEGA,2);
    5142:	22 e0       	ldi	r18, 0x02	; 2
    5144:	4d e1       	ldi	r20, 0x1D	; 29
    5146:	6e ef       	ldi	r22, 0xFE	; 254
    5148:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <cap+0xc>
    514c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <cap+0xd>
    5150:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

00005154 <.L25>:
  }
  lcd_clear_line();
    5154:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

00005158 <.LVL44>:
// - - - - - - - - - - - - - - - - - - - - - -
 #if LCD_LINES > 2
     lcd_line3();
    5158:	0e 94 ed 0a 	call	0x15da	; 0x15da <lcd_line3>

0000515c <.LVL45>:
     if (present_vloss ) {
    515c:	e1 14       	cp	r14, r1
    515e:	f1 04       	cpc	r15, r1
    5160:	69 f0       	breq	.+26     	; 0x517c <.L26>

00005162 <.Loc.90>:
        lcd_MEM_string(&VLOSS_str[1]);      // "Vloss=" 
    5162:	83 e3       	ldi	r24, 0x33	; 51
    5164:	91 e0       	ldi	r25, 0x01	; 1
    5166:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

0000516a <.LVL46>:
        DisplayValue16(cap.v_loss,-1,'%',2);
    516a:	22 e0       	ldi	r18, 0x02	; 2
    516c:	45 e2       	ldi	r20, 0x25	; 37
    516e:	6f ef       	ldi	r22, 0xFF	; 255
    5170:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <cap+0xe>
    5174:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <cap+0xf>
    5178:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

0000517c <.L26>:
     }
     lcd_clear_line();
    517c:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

00005180 <.LVL48>:
  #endif
 #endif
#else
  lcd_clear_line();
#endif  /* FLASHEND > 0x1fff */
} /* end show_cap or show_cap_simple */
    5180:	cd b7       	in	r28, 0x3d	; 61
    5182:	de b7       	in	r29, 0x3e	; 62

00005184 <.LVL49>:
    5184:	e6 e0       	ldi	r30, 0x06	; 6
    5186:	0c 94 b2 38 	jmp	0x7164	; 0x7164 <.Loc.12>

0000518a <.L23>:
     lcd_clear_line();		// clear to end of line
    518a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

0000518e <.LVL51>:
    518e:	c2 cf       	rjmp	.-124    	; 0x5114 <.L24>

00005190 <Bat_update>:
#endif  /* FLASHEND > 0x3fff */

#if defined(POWER_OFF) && defined(BAT_CHECK)
// monitor Battery in line 4 or line2, if a two line display 
void Bat_update(uint8_t tt) {
  if((tt % 16) == 0) {
    5190:	8f 70       	andi	r24, 0x0F	; 15

00005192 <.LVL53>:
    5192:	81 11       	cpse	r24, r1
    5194:	04 c0       	rjmp	.+8      	; 0x519e <.L30>

00005196 <.LBB5>:
 #if (LCD_LINES > 3)
     lcd_line4();
    5196:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <lcd_line4>

0000519a <.LVL55>:
     Battery_check();
    519a:	0c 94 71 19 	jmp	0x32e2	; 0x32e2 <Battery_check>

0000519e <.L30>:
  #endif
     Battery_check();
     wait_about1s();	/* time delay for reading the Bat= message */
 #endif
  }
};	/* end Bat_update() */
    519e:	08 95       	ret

000051a0 <Pwr_mode_check>:
#endif
#if defined(POWER_OFF)
uint8_t Pwr_mode_check(uint8_t tt) {
 #if FLASHEND > 0x1fff
 if ((tt == 15) && (DC_Pwr_mode == 1)) return(0);  // when DC_Mode, next cycle start with 0
    51a0:	8f 30       	cpi	r24, 0x0F	; 15
    51a2:	21 f4       	brne	.+8      	; 0x51ac <.L33>

000051a4 <.Loc.108>:
    51a4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <DC_Pwr_mode>
    51a8:	91 30       	cpi	r25, 0x01	; 1
    51aa:	11 f0       	breq	.+4      	; 0x51b0 <.L35>

000051ac <.L33>:
 #else
 if (tt == 15)  return(0);  // when DC_Mode, next cycle start with 0
 #endif
 return(tt + 1);	// otherwise increase
    51ac:	8f 5f       	subi	r24, 0xFF	; 255

000051ae <.LVL58>:
    51ae:	08 95       	ret

000051b0 <.L35>:
 if ((tt == 15) && (DC_Pwr_mode == 1)) return(0);  // when DC_Mode, next cycle start with 0
    51b0:	80 e0       	ldi	r24, 0x00	; 0

000051b2 <.LVL60>:
};
    51b2:	08 95       	ret

000051b4 <show_Resis13>:
void show_Resis13(void) {
    51b4:	cf 93       	push	r28

000051b6 <.LCFI7>:
  message_key_released(RESIS_13_str);	// "1-|=|-3 .."
    51b6:	84 e7       	ldi	r24, 0x74	; 116
    51b8:	90 e0       	ldi	r25, 0x00	; 0
    51ba:	d6 d7       	rcall	.+4012   	; 0x6168 <message_key_released>

000051bc <.LVL61>:
  lcd_set_cursor(0,10);
    51bc:	6a e0       	ldi	r22, 0x0A	; 10
    51be:	80 e0       	ldi	r24, 0x00	; 0
    51c0:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <lcd_set_cursor>

000051c4 <.LVL62>:
  lcd_MEM_string(RL_METER_str+4);	// "[RL]"
    51c4:	85 e4       	ldi	r24, 0x45	; 69
    51c6:	93 e0       	ldi	r25, 0x03	; 3
    51c8:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

000051cc <.LVL63>:
  for (times=0;times<250;) 
    51cc:	c0 e0       	ldi	r28, 0x00	; 0

000051ce <.L40>:
        init_parts();		// set all parts to nothing found 
    51ce:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <init_parts>

000051d2 <.LVL65>:
        GetResistance(TP3, TP1);
    51d2:	60 e0       	ldi	r22, 0x00	; 0
    51d4:	82 e0       	ldi	r24, 0x02	; 2
    51d6:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <GetResistance>

000051da <.LVL66>:
        GetResistance(TP1, TP3);
    51da:	62 e0       	ldi	r22, 0x02	; 2
    51dc:	80 e0       	ldi	r24, 0x00	; 0
    51de:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <GetResistance>

000051e2 <.LVL67>:
	lcd_line1();		// lcd_set_cursor(0,0);
    51e2:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <lcd_line1>

000051e6 <.LVL68>:
        if (ResistorsFound != 0) {
    51e6:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <ResistorsFound>
    51ea:	81 15       	cp	r24, r1
    51ec:	c9 f0       	breq	.+50     	; 0x5220 <.L37>

000051ee <.Loc.129>:
           show_resis(TP1,TP3,1);
    51ee:	41 e0       	ldi	r20, 0x01	; 1
    51f0:	62 e0       	ldi	r22, 0x02	; 2
    51f2:	80 e0       	ldi	r24, 0x00	; 0
    51f4:	96 de       	rcall	.-724    	; 0x4f22 <show_resis>

000051f6 <.L38>:
     Bat_update(times);
    51f6:	8c 2f       	mov	r24, r28
    51f8:	cb df       	rcall	.-106    	; 0x5190 <Bat_update>

000051fa <.LVL70>:
     key_pressed = wait_for_key_ms(1000);
    51fa:	88 ee       	ldi	r24, 0xE8	; 232
    51fc:	93 e0       	ldi	r25, 0x03	; 3
    51fe:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <wait_for_key_ms>

00005202 <.LVL71>:
     if ((key_pressed != 0) || (rotary.incre > 3)) break;
    5202:	81 11       	cpse	r24, r1
    5204:	09 c0       	rjmp	.+18     	; 0x5218 <.L39>

00005206 <.Loc.135>:
    5206:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rotary+0x6>

0000520a <.LVL72>:
    520a:	84 30       	cpi	r24, 0x04	; 4
    520c:	28 f4       	brcc	.+10     	; 0x5218 <.L39>

0000520e <.Loc.137>:
     times = Pwr_mode_check(times);	// no time limit with DC_Pwr_mode
    520e:	8c 2f       	mov	r24, r28
    5210:	c7 df       	rcall	.-114    	; 0x51a0 <Pwr_mode_check>

00005212 <.LVL73>:
    5212:	c8 2f       	mov	r28, r24

00005214 <.LVL74>:
  for (times=0;times<250;) 
    5214:	8a 3f       	cpi	r24, 0xFA	; 250
    5216:	d8 f2       	brcs	.-74     	; 0x51ce <.L40>

00005218 <.L39>:
  lcd_clear();
    5218:	0e 94 14 0b 	call	0x1628	; 0x1628 <lcd_clear>

0000521c <.LVL76>:
} /* end show_Resis13() */
    521c:	cf 91       	pop	r28

0000521e <.LVL77>:
    521e:	08 95       	ret

00005220 <.L37>:
           lcd_MEM_string(RESIS_13_str);
    5220:	84 e7       	ldi	r24, 0x74	; 116
    5222:	90 e0       	ldi	r25, 0x00	; 0
    5224:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00005228 <.LVL79>:
           lcd_MEM_string(RL_METER_str+4);	// "[RL]"
    5228:	85 e4       	ldi	r24, 0x45	; 69
    522a:	93 e0       	ldi	r25, 0x03	; 3
    522c:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00005230 <.LVL80>:
           lcd_line2();
    5230:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_line2>

00005234 <.LVL81>:
           lcd_data('?');		// too big
    5234:	8f e3       	ldi	r24, 0x3F	; 63
    5236:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

0000523a <.LVL82>:
           lcd_next_line(0);
    523a:	80 e0       	ldi	r24, 0x00	; 0
    523c:	0e 94 67 0b 	call	0x16ce	; 0x16ce <lcd_next_line>

00005240 <.LVL83>:
           lcd_clear_line();
    5240:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

00005244 <.LVL84>:
    5244:	d8 cf       	rjmp	.-80     	; 0x51f6 <.L38>

00005246 <show_Cap13>:
void show_Cap13(void) {
    5246:	0f 93       	push	r16

00005248 <.LCFI8>:
    5248:	1f 93       	push	r17

0000524a <.LCFI9>:
    524a:	cf 93       	push	r28

0000524c <.LCFI10>:
    524c:	df 93       	push	r29

0000524e <.LCFI11>:
  for (times=0;times<250;) 
    524e:	c0 e0       	ldi	r28, 0x00	; 0

00005250 <.Loc.155>:
     PartFound = PART_CAPACITOR;
    5250:	d8 e0       	ldi	r29, 0x08	; 8

00005252 <.Loc.156>:
        cap.cpre = sampling_cap_pre;
    5252:	12 ef       	ldi	r17, 0xF2	; 242

00005254 <.Loc.157>:
       lcd_spaces(LCD_LINE_LENGTH - 3 - _lcd_column);
    5254:	0f e0       	ldi	r16, 0x0F	; 15

00005256 <.L47>:
     init_parts();		// set all parts to nothing found 
    5256:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <init_parts>

0000525a <.LVL87>:
     ReadCapacity(TP3, TP1);
    525a:	60 e0       	ldi	r22, 0x00	; 0
    525c:	82 e0       	ldi	r24, 0x02	; 2
    525e:	87 da       	rcall	.-2802   	; 0x476e <ReadCapacity>

00005260 <.LVL88>:
     PartFound = PART_CAPACITOR;
    5260:	d0 93 2f 01 	sts	0x012F, r29	; 0x80012f <PartFound>

00005264 <.Loc.162>:
     if (cap.cpre==-12 && cap.cval<100) {
    5264:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <cap+0x12>
    5268:	84 3f       	cpi	r24, 0xF4	; 244
    526a:	e1 f4       	brne	.+56     	; 0x52a4 <.L43>

0000526c <.Loc.164>:
    526c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <cap>
    5270:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <cap+0x1>
    5274:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <cap+0x2>
    5278:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <cap+0x3>
    527c:	84 36       	cpi	r24, 0x64	; 100
    527e:	91 05       	cpc	r25, r1
    5280:	a1 05       	cpc	r26, r1
    5282:	b1 05       	cpc	r27, r1
    5284:	78 f4       	brcc	.+30     	; 0x52a4 <.L43>

00005286 <.Loc.165>:
        cap.cval = sampling_cap(TP3,TP1,0);
    5286:	40 e0       	ldi	r20, 0x00	; 0
    5288:	60 e0       	ldi	r22, 0x00	; 0
    528a:	82 e0       	ldi	r24, 0x02	; 2
    528c:	0e 94 cc 33 	call	0x6798	; 0x6798 <sampling_cap>

00005290 <.LVL89>:
    5290:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <cap>
    5294:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <cap+0x1>
    5298:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <cap+0x2>
    529c:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <cap+0x3>

000052a0 <.Loc.168>:
        cap.cpre = sampling_cap_pre;
    52a0:	10 93 4e 01 	sts	0x014E, r17	; 0x80014e <cap+0x12>

000052a4 <.L43>:
     if (cap.cpre > -15) {	/* Capacity below the detection limit */
    52a4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <cap+0x12>

000052a8 <.Loc.172>:
    52a8:	82 3f       	cpi	r24, 0xF2	; 242
    52aa:	6c f1       	brlt	.+90     	; 0x5306 <.L44>

000052ac <.Loc.173>:
       cap.cpre_max = cap.cpre;		// show_cap will display the cap.cval_max value
    52ac:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cap+0x13>

000052b0 <.Loc.175>:
       cap.cval_max = cap.cval;
    52b0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <cap>
    52b4:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <cap+0x1>
    52b8:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <cap+0x2>
    52bc:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <cap+0x3>
    52c0:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <cap+0x4>
    52c4:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <cap+0x5>
    52c8:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <cap+0x6>
    52cc:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <cap+0x7>

000052d0 <.Loc.177>:
       show_cap(1);		// with [C] at the end of line
    52d0:	81 e0       	ldi	r24, 0x01	; 1
    52d2:	e5 de       	rcall	.-566    	; 0x509e <show_cap>

000052d4 <.L45>:
     Bat_update(times);
    52d4:	8c 2f       	mov	r24, r28
    52d6:	5c df       	rcall	.-328    	; 0x5190 <Bat_update>

000052d8 <.LVL91>:
     key_pressed = wait_for_key_ms(SCREEN_TIME);
    52d8:	88 ee       	ldi	r24, 0xE8	; 232
    52da:	93 e0       	ldi	r25, 0x03	; 3
    52dc:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <wait_for_key_ms>

000052e0 <.LVL92>:
     if ((key_pressed != 0) || (rotary.incre > 3)) break;
    52e0:	81 11       	cpse	r24, r1
    52e2:	0a c0       	rjmp	.+20     	; 0x52f8 <.L46>

000052e4 <.Loc.183>:
    52e4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rotary+0x6>

000052e8 <.LVL93>:
    52e8:	84 30       	cpi	r24, 0x04	; 4
    52ea:	30 f4       	brcc	.+12     	; 0x52f8 <.L46>

000052ec <.Loc.185>:
     times = Pwr_mode_check(times);	// no time limit with DC_Pwr_mode
    52ec:	8c 2f       	mov	r24, r28
    52ee:	58 df       	rcall	.-336    	; 0x51a0 <Pwr_mode_check>

000052f0 <.LVL94>:
    52f0:	c8 2f       	mov	r28, r24

000052f2 <.LVL95>:
  for (times=0;times<250;) 
    52f2:	8a 3f       	cpi	r24, 0xFA	; 250
    52f4:	08 f4       	brcc	.+2      	; 0x52f8 <.L46>

000052f6 <L0^A>:
    52f6:	af cf       	rjmp	.-162    	; 0x5256 <.L47>

000052f8 <.L46>:
  lcd_clear();		// clear to end of line
    52f8:	0e 94 14 0b 	call	0x1628	; 0x1628 <lcd_clear>

000052fc <.LVL97>:
} /* end show_Cap13() */
    52fc:	df 91       	pop	r29
    52fe:	cf 91       	pop	r28

00005300 <.LVL98>:
    5300:	1f 91       	pop	r17
    5302:	0f 91       	pop	r16
    5304:	08 95       	ret

00005306 <.L44>:
       lcd_line1();
    5306:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <lcd_line1>

0000530a <.LVL100>:
       lcd_MEM2_string(CAP_13_str);	// 1-||-3
    530a:	8d e6       	ldi	r24, 0x6D	; 109
    530c:	90 e0       	ldi	r25, 0x00	; 0
    530e:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00005312 <.LVL101>:
       lcd_spaces(LCD_LINE_LENGTH - 3 - _lcd_column);
    5312:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_lcd_column>

00005316 <.Loc.195>:
    5316:	90 2f       	mov	r25, r16
    5318:	98 1b       	sub	r25, r24
    531a:	89 2f       	mov	r24, r25
    531c:	0e 94 c9 0a 	call	0x1592	; 0x1592 <lcd_spaces>

00005320 <.LVL102>:
       lcd_MEM2_string(CMETER_13_str);       // "[C]" at the end of line 1
    5320:	89 e6       	ldi	r24, 0x69	; 105
    5322:	90 e0       	ldi	r25, 0x00	; 0
    5324:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00005328 <.LVL103>:
       lcd_line2();
    5328:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_line2>

0000532c <.LVL104>:
       lcd_data('?');
    532c:	8f e3       	ldi	r24, 0x3F	; 63
    532e:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00005332 <.LVL105>:
       lcd_clear_line();		// clear to end of line 2
    5332:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

00005336 <.LVL106>:
       lcd_line3();	
    5336:	0e 94 ed 0a 	call	0x15da	; 0x15da <lcd_line3>

0000533a <.LVL107>:
       lcd_clear_line();	// clear old Vloss= message
    533a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

0000533e <.LVL108>:
    533e:	ca cf       	rjmp	.-108    	; 0x52d4 <.L45>

00005340 <ReadInductance>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadInductance(void) {
    5340:	a5 e1       	ldi	r26, 0x15	; 21
    5342:	b0 e0       	ldi	r27, 0x00	; 0
    5344:	e6 ea       	ldi	r30, 0xA6	; 166
    5346:	f9 e2       	ldi	r31, 0x29	; 41
    5348:	0c 94 8a 38 	jmp	0x7114	; 0x7114 <__prologue_saves__>

0000534c <.L1^B1>:
  uint16_t pw;		// return value from Rnum2pins()
  uint8_t pb[2];	// the pin numbers LowPin and HighPin
  } rpins;	// resistor pin structure to prevent two return parameters


  inductor_lpre = 2;	// H units, mark inductor as 1, if resistor is too big
    534c:	82 e0       	ldi	r24, 0x02	; 2
    534e:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <inductor_lpre>

00005352 <.Loc.21>:
  if(PartFound != PART_RESISTOR) {
    5352:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <PartFound>
    5356:	81 30       	cpi	r24, 0x01	; 1
    5358:	09 f0       	breq	.+2      	; 0x535c <.Loc.23>

0000535a <L0^A>:
    535a:	cc c1       	rjmp	.+920    	; 0x56f4 <.L2>

0000535c <.Loc.23>:
     return;	//We have found no resistor  
  }
  if (ResistorsFound != 1) {
    535c:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <ResistorsFound>
    5360:	81 30       	cpi	r24, 0x01	; 1
    5362:	09 f0       	breq	.+2      	; 0x5366 <.Loc.25>

00005364 <L0^A>:
    5364:	c7 c1       	rjmp	.+910    	; 0x56f4 <.L2>

00005366 <.Loc.25>:
     return;	// do not search for inductance, more than 1 resistor
  }
     res_num = ResistorList[0];
    5366:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <ResistorList>
    536a:	29 8b       	std	Y+17, r18	; 0x11

0000536c <.LVL0>:
     if (ResistorVal[res_num] > 21000) return;
    536c:	34 e0       	ldi	r19, 0x04	; 4
    536e:	23 9f       	mul	r18, r19
    5370:	f0 01       	movw	r30, r0
    5372:	11 24       	eor	r1, r1
    5374:	e6 55       	subi	r30, 0x56	; 86
    5376:	fe 4f       	sbci	r31, 0xFE	; 254
    5378:	40 80       	ld	r4, Z
    537a:	51 80       	ldd	r5, Z+1	; 0x01
    537c:	62 80       	ldd	r6, Z+2	; 0x02
    537e:	73 80       	ldd	r7, Z+3	; 0x03

00005380 <.Loc.29>:
    5380:	89 e0       	ldi	r24, 0x09	; 9
    5382:	48 16       	cp	r4, r24
    5384:	82 e5       	ldi	r24, 0x52	; 82
    5386:	58 06       	cpc	r5, r24
    5388:	61 04       	cpc	r6, r1
    538a:	71 04       	cpc	r7, r1
    538c:	08 f0       	brcs	.+2      	; 0x5390 <.LVL1>

0000538e <L0^A>:
    538e:	b2 c1       	rjmp	.+868    	; 0x56f4 <.L2>

00005390 <.LVL1>:
     resistor = ResistorVal[res_num];

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
    5390:	10 e0       	ldi	r17, 0x00	; 0

00005392 <.L28>:
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
           // first and second pass, direction 1
           rpins.pw = Rnum2pins(res_num);	// compute the two pinnumbers for resistor res_num
    5392:	89 89       	ldd	r24, Y+17	; 0x11

00005394 <.Loc.36>:
        if (count < 2) {
    5394:	12 30       	cpi	r17, 0x02	; 2
    5396:	08 f0       	brcs	.+2      	; 0x539a <.Loc.37>

00005398 <L0^A>:
    5398:	b1 c1       	rjmp	.+866    	; 0x56fc <.L3>

0000539a <.Loc.37>:
           rpins.pw = Rnum2pins(res_num);	// compute the two pinnumbers for resistor res_num
    539a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Rnum2pins>

0000539e <.L49>:
        } else {
           // third and fourth pass, direction 2
           rpins.pw = Rnum2pins(res_num);	// compute the two pinnumbers for resistor res_num
           ii = rpins.pb[0];
           rpins.pb[0] = rpins.pb[1];		// swap the pins LowPin and HighPin
    539e:	98 2e       	mov	r9, r24

000053a0 <.Loc.40>:
    53a0:	89 2e       	mov	r8, r25

000053a2 <.LBB2>:
           rpins.pb[1] = ii;
        }
#if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
        HiADC = pgm_read_byte((&PinRLRHADCtab[6])+rpins.pb[1]-TP_MIN);	// Table of ADC Pins including | TXD_VAL
#else
        HiADC = pgm_read_byte((&PinRLRHADCtab[3])+rpins.pb[1]-TP_MIN);	// Table of ADC Pins including | TXD_VAL
    53a2:	e9 2f       	mov	r30, r25
    53a4:	f0 e0       	ldi	r31, 0x00	; 0

000053a6 <.Loc.45>:
    53a6:	e2 5b       	subi	r30, 0xB2	; 178
    53a8:	fd 4f       	sbci	r31, 0xFD	; 253
    53aa:	34 90       	lpm	r3, Z

000053ac <.LBB3>:
#endif
        LoPinR_L = pgm_read_byte(&PinRLRHADCtab[rpins.pb[0]]-TP_MIN);	//R_L mask for HighPin R_L load
    53ac:	90 e0       	ldi	r25, 0x00	; 0

000053ae <.LVL6>:
    53ae:	fc 01       	movw	r30, r24
    53b0:	e5 5b       	subi	r30, 0xB5	; 181
    53b2:	fd 4f       	sbci	r31, 0xFD	; 253
    53b4:	e4 91       	lpm	r30, Z

000053b6 <.LBE3>:
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    53b6:	15 b8       	out	0x05, r1	; 5

000053b8 <.Loc.57>:
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    53b8:	18 b8       	out	0x08, r1	; 8

000053ba <.Loc.59>:
        if ((resistor < 240) && ((count & 0x01) == 0)) {
    53ba:	01 2f       	mov	r16, r17
    53bc:	01 70       	andi	r16, 0x01	; 1

000053be <.Loc.60>:
    53be:	20 ef       	ldi	r18, 0xF0	; 240
    53c0:	42 16       	cp	r4, r18
    53c2:	51 04       	cpc	r5, r1
    53c4:	08 f0       	brcs	.+2      	; 0x53c8 <.Loc.61>

000053c6 <L0^A>:
    53c6:	a0 c1       	rjmp	.+832    	; 0x5708 <.L5>

000053c8 <.Loc.61>:
    53c8:	01 11       	cpse	r16, r1
    53ca:	9e c1       	rjmp	.+828    	; 0x5708 <.L5>

000053cc <.Loc.62>:
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;			// use only pin output resistance
    53cc:	60 90 19 01 	lds	r6, 0x0119	; 0x800119 <resis680mi>
    53d0:	70 90 1a 01 	lds	r7, 0x011A	; 0x80011a <resis680mi+0x1>
    53d4:	30 e9       	ldi	r19, 0x90	; 144
    53d6:	63 1a       	sub	r6, r19
    53d8:	3a e1       	ldi	r19, 0x1A	; 26
    53da:	73 0a       	sbc	r7, r19

000053dc <.LVL8>:
           ADC_DDR = HiADC | (1<<rpins.pb[0]) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    53dc:	21 e0       	ldi	r18, 0x01	; 1
    53de:	30 e0       	ldi	r19, 0x00	; 0
    53e0:	02 c0       	rjmp	.+4      	; 0x53e6 <.L2^B1>

000053e2 <.L1^B2>:
    53e2:	22 0f       	add	r18, r18
    53e4:	33 1f       	adc	r19, r19

000053e6 <.L2^B1>:
    53e6:	8a 95       	dec	r24
    53e8:	e2 f7       	brpl	.-8      	; 0x53e2 <.L1^B2>
    53ea:	c9 01       	movw	r24, r18

000053ec <.Loc.66>:
    53ec:	83 29       	or	r24, r3

000053ee <.Loc.67>:
    53ee:	87 b9       	out	0x07, r24	; 7

000053f0 <.L6>:
     for (count=0;count<4;count++) {
    53f0:	44 e1       	ldi	r20, 0x14	; 20
    53f2:	24 2e       	mov	r2, r20

000053f4 <.L8>:
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
            // wait for current is near zero
            umax = W10msReadADC(rpins.pb[0]);
    53f4:	89 2d       	mov	r24, r9

000053f6 <.LVL11>:
    53f6:	0e 94 f5 07 	call	0xfea	; 0xfea <W10msReadADC>

000053fa <.LVL12>:
    53fa:	5c 01       	movw	r10, r24

000053fc <.LVL13>:
            total_r =  ReadADC(rpins.pb[1]);
    53fc:	88 2d       	mov	r24, r8
    53fe:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00005402 <.LVL14>:
            if ((umax < CAP_EMPTY_LEVEL) && (total_r < CAP_EMPTY_LEVEL)) break;	// low current detected
    5402:	a8 2a       	or	r10, r24

00005404 <.LVL15>:
    5404:	b9 2a       	or	r11, r25
    5406:	34 e0       	ldi	r19, 0x04	; 4
    5408:	a3 16       	cp	r10, r19
    540a:	b1 04       	cpc	r11, r1
    540c:	10 f0       	brcs	.+4      	; 0x5412 <.L7>

0000540e <.LVL16>:
        for (ii=0;ii<20;ii++) {
    540e:	2a 94       	dec	r2

00005410 <.LVL17>:
    5410:	89 f7       	brne	.-30     	; 0x53f4 <.L8>

00005412 <.L7>:
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    5412:	80 e4       	ldi	r24, 0x40	; 64

00005414 <.LVL19>:
    5414:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

00005418 <.Loc.85>:
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    5418:	94 e5       	ldi	r25, 0x54	; 84
    541a:	90 bf       	out	0x30, r25	; 48

0000541c <.Loc.87>:
        ADMUX = (1<<REFS0) | rpins.pb[0];			// switch Mux to Low-Pin
    541c:	89 2d       	mov	r24, r9
    541e:	80 64       	ori	r24, 0x40	; 64
    5420:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

00005424 <.Loc.89>:
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    5424:	26 e1       	ldi	r18, 0x16	; 22
    5426:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

0000542a <.Loc.91>:
   
      // setup Counter1
        timeconstant.w[1] = 0;		// set ov counter to 0
    542a:	e1 2c       	mov	r14, r1
    542c:	f1 2c       	mov	r15, r1

0000542e <.Loc.93>:
        TCCR1A = 0;			// set Counter1 to normal Mode
    542e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>

00005432 <.Loc.95>:
        TCNT1 = 0;			//set Counter to 0
    5432:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    5436:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>

0000543a <.Loc.97>:
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// reset TIFR or TIFR1
    543a:	37 e2       	ldi	r19, 0x27	; 39
    543c:	36 bb       	out	0x16, r19	; 22

0000543e <.Loc.99>:
//        HiADC |= TXD_VAL;
        wait200us();			// wait for bandgap to start up
    543e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <wait200us>

00005442 <.LVL20>:
        if ((count & 0x01) == 0 ) {
    5442:	01 11       	cpse	r16, r1
    5444:	68 c1       	rjmp	.+720    	; 0x5716 <.L9>

00005446 <.Loc.102>:
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    5446:	81 e8       	ldi	r24, 0x81	; 129
    5448:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

0000544c <.Loc.104>:
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    544c:	38 b8       	out	0x08, r3	; 8

0000544e <.L14>:
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    544e:	86 b3       	in	r24, 0x16	; 22

00005450 <.LVL21>:
           if (ii & (1<<ICF1))  {
    5450:	85 ff       	sbrs	r24, 5
    5452:	6a c1       	rjmp	.+724    	; 0x5728 <.L11>

00005454 <.L15>:
              if(timeconstant.w[1] == (F_CPU/100000UL)) {
                 break; 	//Timeout for Charging, above 0.65 s
              }
           }
        }
        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    5454:	18 b8       	out	0x08, r1	; 8

00005456 <.Loc.113>:
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    5456:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

0000545a <.Loc.115>:
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    545a:	30 e2       	ldi	r19, 0x20	; 32
    545c:	36 bb       	out	0x16, r19	; 22

0000545e <.Loc.117>:
        timeconstant.w[0] = ICR1;		// get previous Input Capture Counter flag
    545e:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
    5462:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>

00005466 <.Loc.119>:
    5466:	69 01       	movw	r12, r18

00005468 <.LVL22>:
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > timeconstant.w[0]) && (ii & (1<<TOV1))) {
    5468:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    546c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>

00005470 <.Loc.122>:
    5470:	24 17       	cp	r18, r20
    5472:	35 07       	cpc	r19, r21
    5474:	08 f4       	brcc	.+2      	; 0x5478 <.L13>

00005476 <L0^A>:
    5476:	66 c1       	rjmp	.+716    	; 0x5744 <.L12>

00005478 <.L13>:
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
           timeconstant.w[1]++;			// count one additional OV
        }

//        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    5478:	86 e9       	ldi	r24, 0x96	; 150
    547a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

0000547e <.LVL24>:
    547e:	34 e1       	ldi	r19, 0x14	; 20
    5480:	33 2e       	mov	r3, r19

00005482 <.L18>:
        for (ii=0;ii<20;ii++) {
            // wait for current is near zero
            umax = W10msReadADC(rpins.pb[0]);
    5482:	89 2d       	mov	r24, r9
    5484:	0e 94 f5 07 	call	0xfea	; 0xfea <W10msReadADC>

00005488 <.LVL26>:
    5488:	5c 01       	movw	r10, r24

0000548a <.LVL27>:
            total_r =  ReadADC(rpins.pb[1]);
    548a:	88 2d       	mov	r24, r8
    548c:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00005490 <.LVL28>:
            if ((umax < CAP_EMPTY_LEVEL) && (total_r < CAP_EMPTY_LEVEL)) break;	// low current detected
    5490:	a8 2a       	or	r10, r24

00005492 <.LVL29>:
    5492:	b9 2a       	or	r11, r25
    5494:	94 e0       	ldi	r25, 0x04	; 4
    5496:	a9 16       	cp	r10, r25
    5498:	b1 04       	cpc	r11, r1
    549a:	10 f0       	brcs	.+4      	; 0x54a0 <.L17>

0000549c <.LVL30>:
        for (ii=0;ii<20;ii++) {
    549c:	3a 94       	dec	r3

0000549e <.LVL31>:
    549e:	89 f7       	brne	.-30     	; 0x5482 <.L18>

000054a0 <.L17>:
//  #undef CNT_ZERO_42
//  #undef CNT_ZERO_720
//  #define CNT_ZERO_42 7
//  #define CNT_ZERO_720 10
//#endif
        total_r = (mess_r + resistor + RRpinMI);
    54a0:	80 90 17 01 	lds	r8, 0x0117	; 0x800117 <pin_rmi>
    54a4:	90 90 18 01 	lds	r9, 0x0118	; 0x800118 <pin_rmi+0x1>

000054a8 <.LVL33>:
    54a8:	84 0c       	add	r8, r4
    54aa:	95 1c       	adc	r9, r5
    54ac:	86 0c       	add	r8, r6
    54ae:	97 1c       	adc	r9, r7

000054b0 <.LVL34>:
//        cnt_diff = 0;
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
        tmpint = ref_mv_offs;		// corrected reference voltage (for C)
    54b0:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <ref_mv_offs>
    54b4:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <ref_mv_offs+0x1>

000054b8 <.LVL35>:
        if (mess_r < R_L_VAL) {
    54b8:	80 e9       	ldi	r24, 0x90	; 144
    54ba:	68 16       	cp	r6, r24
    54bc:	8a e1       	ldi	r24, 0x1A	; 26
    54be:	78 06       	cpc	r7, r24
    54c0:	08 f0       	brcs	.+2      	; 0x54c4 <.LVL36>

000054c2 <L0^A>:
    54c2:	48 c1       	rjmp	.+656    	; 0x5754 <.L19>

000054c4 <.LVL36>:
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
           if (timeconstant.dw < 225) {
              ukorr = (timeconstant.w[0] / 5) - 20;
           } else {
              ukorr = 25;
    54c4:	69 e1       	ldi	r22, 0x19	; 25

000054c6 <.LVL37>:
           if (timeconstant.dw < 225) {
    54c6:	91 ee       	ldi	r25, 0xE1	; 225
    54c8:	c9 16       	cp	r12, r25
    54ca:	d1 04       	cpc	r13, r1
    54cc:	e1 04       	cpc	r14, r1
    54ce:	f1 04       	cpc	r15, r1
    54d0:	30 f4       	brcc	.+12     	; 0x54de <.L20>

000054d2 <.Loc.150>:
              ukorr = (timeconstant.w[0] / 5) - 20;
    54d2:	c6 01       	movw	r24, r12
    54d4:	65 e0       	ldi	r22, 0x05	; 5
    54d6:	70 e0       	ldi	r23, 0x00	; 0
    54d8:	0e 94 00 38 	call	0x7000	; 0x7000 <__udivmodhi4>

000054dc <.Loc.152>:
    54dc:	64 51       	subi	r22, 0x14	; 20

000054de <.L20>:
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
    54de:	28 52       	subi	r18, 0x28	; 40
    54e0:	31 09       	sbc	r19, r1

000054e2 <.LVL39>:
    54e2:	26 1b       	sub	r18, r22
    54e4:	31 09       	sbc	r19, r1
    54e6:	67 fd       	sbrc	r22, 7
    54e8:	33 95       	inc	r19

000054ea <.LVL40>:
           cnt_diff = CNT_ZERO_42;
    54ea:	66 e0       	ldi	r22, 0x06	; 6

000054ec <.L21>:
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           cnt_diff += CNT_ZERO_720;
           tmpint += REF_L_KORR;
        }
        if (timeconstant.dw > cnt_diff) timeconstant.dw -= cnt_diff;
    54ec:	86 2f       	mov	r24, r22
    54ee:	90 e0       	ldi	r25, 0x00	; 0
    54f0:	a0 e0       	ldi	r26, 0x00	; 0
    54f2:	b0 e0       	ldi	r27, 0x00	; 0

000054f4 <.Loc.158>:
    54f4:	6c 15       	cp	r22, r12
    54f6:	1d 04       	cpc	r1, r13
    54f8:	1e 04       	cpc	r1, r14
    54fa:	1f 04       	cpc	r1, r15
    54fc:	08 f0       	brcs	.+2      	; 0x5500 <.Loc.159>

000054fe <L0^A>:
    54fe:	33 c1       	rjmp	.+614    	; 0x5766 <.L36>

00005500 <.Loc.159>:
    5500:	c8 1a       	sub	r12, r24
    5502:	d9 0a       	sbc	r13, r25
    5504:	ea 0a       	sbc	r14, r26
    5506:	fb 0a       	sbc	r15, r27

00005508 <.L22>:
        else          timeconstant.dw = 0;
       
        if ((count&0x01) == 1) {
    5508:	01 15       	cp	r16, r1
    550a:	29 f0       	breq	.+10     	; 0x5516 <.L24>

0000550c <.Loc.163>:
           // second pass with delayed counter start
           timeconstant.dw += (3 * (F_CPU/1000000UL))+10;
    550c:	82 e2       	ldi	r24, 0x22	; 34
    550e:	c8 0e       	add	r12, r24
    5510:	d1 1c       	adc	r13, r1
    5512:	e1 1c       	adc	r14, r1
    5514:	f1 1c       	adc	r15, r1

00005516 <.L24>:
        }
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
    5516:	90 e5       	ldi	r25, 0x50	; 80
    5518:	e9 16       	cp	r14, r25
    551a:	f1 04       	cpc	r15, r1
    551c:	08 f4       	brcc	.+2      	; 0x5520 <.Loc.167>

0000551e <L0^A>:
    551e:	28 c1       	rjmp	.+592    	; 0x5770 <.L25>

00005520 <.Loc.167>:
    5520:	c1 2c       	mov	r12, r1
    5522:	d1 2c       	mov	r13, r1
    5524:	76 01       	movw	r14, r12

00005526 <.L26>:
        if (timeconstant.dw > 10) {
           timeconstant.dw -= 1;
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    5526:	a1 2c       	mov	r10, r1
    5528:	b1 2c       	mov	r11, r1

0000552a <.Loc.171>:
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    552a:	a8 ee       	ldi	r26, 0xE8	; 232
    552c:	b3 e0       	ldi	r27, 0x03	; 3
    552e:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

00005532 <.LVL45>:
    5532:	6a 8b       	std	Y+18, r22	; 0x12
    5534:	7b 8b       	std	Y+19, r23	; 0x13
    5536:	8c 8b       	std	Y+20, r24	; 0x14
    5538:	9d 8b       	std	Y+21, r25	; 0x15

0000553a <.Loc.175>:
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    553a:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <ADCconfig+0x4>
    553e:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <ADCconfig+0x5>
    5542:	93 01       	movw	r18, r6

00005544 <.LVL46>:
    5544:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

00005548 <.Loc.177>:
    5548:	a5 01       	movw	r20, r10
    554a:	94 01       	movw	r18, r8
    554c:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00005550 <.Loc.178>:
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    5550:	44 27       	eor	r20, r20
    5552:	55 27       	eor	r21, r21
    5554:	6a 89       	ldd	r22, Y+18	; 0x12
    5556:	7b 89       	ldd	r23, Y+19	; 0x13
    5558:	8c 89       	ldd	r24, Y+20	; 0x14
    555a:	9d 89       	ldd	r25, Y+21	; 0x15
    555c:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00005560 <.Loc.179>:
//        per_ref2 = (uint8_t)MEM2_read_byte(&LogTab[per_ref1]);	// -log(1 - per_ref1/100)
        per_ref2 = get_log(per_ref1);		// -1000*log(1 - per_ref1/1000)
    5560:	c9 01       	movw	r24, r18
    5562:	0e 94 00 09 	call	0x1200	; 0x1200 <get_log>

00005566 <.LVL47>:
    5566:	fc 01       	movw	r30, r24

00005568 <.LVL48>:
          }
#endif
/* ********************************************************* */
        // inductor_lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    5568:	61 2e       	mov	r6, r17

0000556a <.LVL49>:
    556a:	71 2c       	mov	r7, r1

0000556c <.Loc.185>:
    556c:	a5 01       	movw	r20, r10
    556e:	94 01       	movw	r18, r8
    5570:	c7 01       	movw	r24, r14
    5572:	b6 01       	movw	r22, r12
    5574:	0e 94 e5 37 	call	0x6fca	; 0x6fca <__mulsi3>
    5578:	6a 8b       	std	Y+18, r22	; 0x12
    557a:	7b 8b       	std	Y+19, r23	; 0x13
    557c:	8c 8b       	std	Y+20, r24	; 0x14
    557e:	9d 8b       	std	Y+21, r25	; 0x15

00005580 <.Loc.186>:
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
    5580:	bf 01       	movw	r22, r30
    5582:	80 e0       	ldi	r24, 0x00	; 0
    5584:	90 e0       	ldi	r25, 0x00	; 0

00005586 <.LVL50>:
    5586:	23 e0       	ldi	r18, 0x03	; 3

00005588 <.L1^B3>:
    5588:	66 0f       	add	r22, r22
    558a:	77 1f       	adc	r23, r23
    558c:	88 1f       	adc	r24, r24
    558e:	99 1f       	adc	r25, r25
    5590:	2a 95       	dec	r18
    5592:	d1 f7       	brne	.-12     	; 0x5588 <.L1^B3>

00005594 <.LVL51>:
    5594:	6b 5f       	subi	r22, 0xFB	; 251
    5596:	7f 4f       	sbci	r23, 0xFF	; 255
    5598:	8f 4f       	sbci	r24, 0xFF	; 255
    559a:	9f 4f       	sbci	r25, 0xFF	; 255

0000559c <.Loc.189>:
    559c:	2a e0       	ldi	r18, 0x0A	; 10
    559e:	30 e0       	ldi	r19, 0x00	; 0
    55a0:	40 e0       	ldi	r20, 0x00	; 0
    55a2:	50 e0       	ldi	r21, 0x00	; 0
    55a4:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

000055a8 <.LVL52>:
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    55a8:	6a 89       	ldd	r22, Y+18	; 0x12
    55aa:	7b 89       	ldd	r23, Y+19	; 0x13
    55ac:	8c 89       	ldd	r24, Y+20	; 0x14
    55ae:	9d 89       	ldd	r25, Y+21	; 0x15
    55b0:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

000055b4 <.Loc.191>:
    55b4:	84 e0       	ldi	r24, 0x04	; 4
    55b6:	18 9f       	mul	r17, r24
    55b8:	f0 01       	movw	r30, r0
    55ba:	11 24       	eor	r1, r1
    55bc:	81 e0       	ldi	r24, 0x01	; 1
    55be:	90 e0       	ldi	r25, 0x00	; 0
    55c0:	8c 0f       	add	r24, r28
    55c2:	9d 1f       	adc	r25, r29
    55c4:	e8 0f       	add	r30, r24
    55c6:	f9 1f       	adc	r31, r25
    55c8:	20 83       	st	Z, r18
    55ca:	31 83       	std	Z+1, r19	; 0x01
    55cc:	42 83       	std	Z+2, r20	; 0x02
    55ce:	53 83       	std	Z+3, r21	; 0x03

000055d0 <.Loc.192>:
        if (((count&0x01) == 0) && (timeconstant.dw > ((F_CPU/1000000UL)+3))) {
    55d0:	01 11       	cpse	r16, r1
    55d2:	17 c0       	rjmp	.+46     	; 0x5602 <.L27>

000055d4 <.LVL53>:
    55d4:	9c e0       	ldi	r25, 0x0C	; 12
    55d6:	c9 16       	cp	r12, r25
    55d8:	d1 04       	cpc	r13, r1
    55da:	e1 04       	cpc	r14, r1
    55dc:	f1 04       	cpc	r15, r1
    55de:	88 f0       	brcs	.+34     	; 0x5602 <.L27>

000055e0 <.Loc.195>:
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
           count++;		// skip the delayed measurement
    55e0:	1f 5f       	subi	r17, 0xFF	; 255

000055e2 <.Loc.196>:
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    55e2:	f3 01       	movw	r30, r6
    55e4:	31 96       	adiw	r30, 0x01	; 1
    55e6:	ee 0f       	add	r30, r30
    55e8:	ff 1f       	adc	r31, r31
    55ea:	ee 0f       	add	r30, r30
    55ec:	ff 1f       	adc	r31, r31
    55ee:	81 e0       	ldi	r24, 0x01	; 1
    55f0:	90 e0       	ldi	r25, 0x00	; 0
    55f2:	8c 0f       	add	r24, r28
    55f4:	9d 1f       	adc	r25, r29
    55f6:	e8 0f       	add	r30, r24
    55f8:	f9 1f       	adc	r31, r25
    55fa:	20 83       	st	Z, r18
    55fc:	31 83       	std	Z+1, r19	; 0x01
    55fe:	42 83       	std	Z+2, r20	; 0x02
    5600:	53 83       	std	Z+3, r21	; 0x03

00005602 <.L27>:
        }
        wdt_reset();
    5602:	a8 95       	wdr

00005604 <.Loc.200>:
     for (count=0;count<4;count++) {
    5604:	1f 5f       	subi	r17, 0xFF	; 255

00005606 <.Loc.201>:
    5606:	14 30       	cpi	r17, 0x04	; 4
    5608:	09 f0       	breq	.+2      	; 0x560c <.Loc.202>

0000560a <L0^A>:
    560a:	c3 ce       	rjmp	.-634    	; 0x5392 <.L28>

0000560c <.Loc.202>:
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    560c:	18 b8       	out	0x08, r1	; 8

0000560e <.Loc.204>:
     wait_about20ms();
    560e:	84 e0       	ldi	r24, 0x04	; 4
    5610:	0e 94 c5 07 	call	0xf8a	; 0xf8a <sleep_5ms>

00005614 <.LVL56>:
     nr_pol1 = 0;
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
    5614:	91 e0       	ldi	r25, 0x01	; 1
    5616:	4d 81       	ldd	r20, Y+5	; 0x05
    5618:	5e 81       	ldd	r21, Y+6	; 0x06
    561a:	6f 81       	ldd	r22, Y+7	; 0x07
    561c:	78 85       	ldd	r23, Y+8	; 0x08
    561e:	09 81       	ldd	r16, Y+1	; 0x01
    5620:	1a 81       	ldd	r17, Y+2	; 0x02
    5622:	2b 81       	ldd	r18, Y+3	; 0x03
    5624:	3c 81       	ldd	r19, Y+4	; 0x04
    5626:	04 17       	cp	r16, r20
    5628:	15 07       	cpc	r17, r21
    562a:	26 07       	cpc	r18, r22
    562c:	37 07       	cpc	r19, r23
    562e:	08 f0       	brcs	.+2      	; 0x5632 <.L29>
    5630:	90 e0       	ldi	r25, 0x00	; 0

00005632 <.L29>:
     nr_pol2 = 2;
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    5632:	4d 85       	ldd	r20, Y+13	; 0x0d
    5634:	5e 85       	ldd	r21, Y+14	; 0x0e
    5636:	6f 85       	ldd	r22, Y+15	; 0x0f
    5638:	78 89       	ldd	r23, Y+16	; 0x10
    563a:	09 85       	ldd	r16, Y+9	; 0x09
    563c:	1a 85       	ldd	r17, Y+10	; 0x0a
    563e:	2b 85       	ldd	r18, Y+11	; 0x0b
    5640:	3c 85       	ldd	r19, Y+12	; 0x0c

00005642 <.Loc.211>:
     nr_pol2 = 2;
    5642:	82 e0       	ldi	r24, 0x02	; 2

00005644 <.Loc.212>:
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    5644:	04 17       	cp	r16, r20
    5646:	15 07       	cpc	r17, r21
    5648:	26 07       	cpc	r18, r22
    564a:	37 07       	cpc	r19, r23
    564c:	08 f4       	brcc	.+2      	; 0x5650 <.L30>

0000564e <.Loc.213>:
    564e:	83 e0       	ldi	r24, 0x03	; 3

00005650 <.L30>:
     if (inductance[nr_pol2] < inductance[nr_pol1]) nr_pol1 = nr_pol2;
    5650:	24 e0       	ldi	r18, 0x04	; 4
    5652:	82 9f       	mul	r24, r18
    5654:	d0 01       	movw	r26, r0
    5656:	11 24       	eor	r1, r1
    5658:	21 e0       	ldi	r18, 0x01	; 1
    565a:	30 e0       	ldi	r19, 0x00	; 0
    565c:	2c 0f       	add	r18, r28
    565e:	3d 1f       	adc	r19, r29
    5660:	a2 0f       	add	r26, r18
    5662:	b3 1f       	adc	r27, r19

00005664 <.Loc.216>:
    5664:	34 e0       	ldi	r19, 0x04	; 4
    5666:	93 9f       	mul	r25, r19
    5668:	f0 01       	movw	r30, r0
    566a:	11 24       	eor	r1, r1
    566c:	21 e0       	ldi	r18, 0x01	; 1
    566e:	30 e0       	ldi	r19, 0x00	; 0
    5670:	2c 0f       	add	r18, r28
    5672:	3d 1f       	adc	r19, r29
    5674:	e2 0f       	add	r30, r18
    5676:	f3 1f       	adc	r31, r19

00005678 <.Loc.217>:
    5678:	0d 91       	ld	r16, X+
    567a:	1d 91       	ld	r17, X+
    567c:	2d 91       	ld	r18, X+
    567e:	3c 91       	ld	r19, X
    5680:	40 81       	ld	r20, Z
    5682:	51 81       	ldd	r21, Z+1	; 0x01
    5684:	62 81       	ldd	r22, Z+2	; 0x02
    5686:	73 81       	ldd	r23, Z+3	; 0x03
    5688:	04 17       	cp	r16, r20
    568a:	15 07       	cpc	r17, r21
    568c:	26 07       	cpc	r18, r22
    568e:	37 07       	cpc	r19, r23
    5690:	08 f0       	brcs	.+2      	; 0x5694 <.L31>

00005692 <.LVL59>:
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
    5692:	89 2f       	mov	r24, r25

00005694 <.L31>:
     inductor_lx = inductance[nr_pol1];
    5694:	34 e0       	ldi	r19, 0x04	; 4
    5696:	83 9f       	mul	r24, r19
    5698:	f0 01       	movw	r30, r0
    569a:	11 24       	eor	r1, r1
    569c:	21 e0       	ldi	r18, 0x01	; 1
    569e:	30 e0       	ldi	r19, 0x00	; 0
    56a0:	2c 0f       	add	r18, r28
    56a2:	3d 1f       	adc	r19, r29
    56a4:	e2 0f       	add	r30, r18
    56a6:	f3 1f       	adc	r31, r19
    56a8:	40 81       	ld	r20, Z
    56aa:	51 81       	ldd	r21, Z+1	; 0x01
    56ac:	62 81       	ldd	r22, Z+2	; 0x02
    56ae:	73 81       	ldd	r23, Z+3	; 0x03

000056b0 <.Loc.221>:
    56b0:	40 93 9f 01 	sts	0x019F, r20	; 0x80019f <inductor_lx>
    56b4:	50 93 a0 01 	sts	0x01A0, r21	; 0x8001a0 <inductor_lx+0x1>
    56b8:	60 93 a1 01 	sts	0x01A1, r22	; 0x8001a1 <inductor_lx+0x2>
    56bc:	70 93 a2 01 	sts	0x01A2, r23	; 0x8001a2 <inductor_lx+0x3>

000056c0 <.Loc.222>:
     inductor_lpre = -5;	// 10 uH units
     if (((nr_pol1 & 1) == 1) || (resistor >= 240)) {
    56c0:	80 fd       	sbrc	r24, 0
    56c2:	63 c0       	rjmp	.+198    	; 0x578a <.L32>

000056c4 <.Loc.225>:
    56c4:	30 ef       	ldi	r19, 0xF0	; 240
    56c6:	43 16       	cp	r4, r19
    56c8:	51 04       	cpc	r5, r1
    56ca:	08 f0       	brcs	.+2      	; 0x56ce <.Loc.226>

000056cc <L0^A>:
    56cc:	5e c0       	rjmp	.+188    	; 0x578a <.L32>

000056ce <.Loc.226>:
     inductor_lpre = -5;	// 10 uH units
    56ce:	8b ef       	ldi	r24, 0xFB	; 251
    56d0:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <inductor_lpre>

000056d4 <.L33>:
        // with 680 Ohm resistor total_r is more than 7460
        inductor_lpre = -4;	// 100 uH units
        inductor_lx = (inductor_lx + 5) / 10;
     } 
     if (inductor_lx == 0) inductor_lpre = 0;	//mark as zero
    56d4:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <inductor_lx>
    56d8:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <inductor_lx+0x1>
    56dc:	a0 91 a1 01 	lds	r26, 0x01A1	; 0x8001a1 <inductor_lx+0x2>
    56e0:	b0 91 a2 01 	lds	r27, 0x01A2	; 0x8001a2 <inductor_lx+0x3>
    56e4:	89 2b       	or	r24, r25
    56e6:	8a 2b       	or	r24, r26
    56e8:	8b 2b       	or	r24, r27
    56ea:	11 f4       	brne	.+4      	; 0x56f0 <.L34>

000056ec <.Loc.229>:
    56ec:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <inductor_lpre>

000056f0 <.L34>:

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    56f0:	17 b8       	out	0x07, r1	; 7

000056f2 <.Loc.233>:
  R_DDR = 0;			// switch all resistor ports to input
    56f2:	14 b8       	out	0x04, r1	; 4

000056f4 <.L2>:
#endif
  return;
 } // end ReadInductance()
    56f4:	65 96       	adiw	r28, 0x15	; 21
    56f6:	e2 e1       	ldi	r30, 0x12	; 18
    56f8:	0c 94 a6 38 	jmp	0x714c	; 0x714c <__epilogue_restores__>

000056fc <.L3>:
           rpins.pw = Rnum2pins(res_num);	// compute the two pinnumbers for resistor res_num
    56fc:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Rnum2pins>

00005700 <.LVL63>:
           rpins.pb[0] = rpins.pb[1];		// swap the pins LowPin and HighPin
    5700:	98 27       	eor	r25, r24
    5702:	89 27       	eor	r24, r25

00005704 <.LVL64>:
    5704:	98 27       	eor	r25, r24
    5706:	4b ce       	rjmp	.-874    	; 0x539e <.L49>

00005708 <.L5>:
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    5708:	e4 b9       	out	0x04, r30	; 4

0000570a <.Loc.246>:
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    570a:	37 b8       	out	0x07, r3	; 7

0000570c <.Loc.248>:
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    570c:	60 90 19 01 	lds	r6, 0x0119	; 0x800119 <resis680mi>
    5710:	70 90 1a 01 	lds	r7, 0x011A	; 0x80011a <resis680mi+0x1>

00005714 <.LVL66>:
    5714:	6d ce       	rjmp	.-806    	; 0x53f0 <.L6>

00005716 <.L9>:
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    5716:	38 b8       	out	0x08, r3	; 8

00005718 <.Loc.253>:
           wait3us();		// ignore current peak from capacity
    5718:	0e 94 c0 07 	call	0xf80	; 0xf80 <wait3us>

0000571c <.LVL68>:
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    571c:	90 e2       	ldi	r25, 0x20	; 32
    571e:	96 bb       	out	0x16, r25	; 22

00005720 <.Loc.256>:
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    5720:	21 e8       	ldi	r18, 0x81	; 129
    5722:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    5726:	93 ce       	rjmp	.-730    	; 0x544e <.L14>

00005728 <.L11>:
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    5728:	80 ff       	sbrs	r24, 0
    572a:	91 ce       	rjmp	.-734    	; 0x544e <.L14>

0000572c <.Loc.260>:
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    572c:	91 e0       	ldi	r25, 0x01	; 1
    572e:	96 bb       	out	0x16, r25	; 22

00005730 <.Loc.262>:
              wdt_reset();
    5730:	a8 95       	wdr

00005732 <.Loc.263>:
              timeconstant.w[1]++;		// count one OV
    5732:	97 01       	movw	r18, r14
    5734:	2f 5f       	subi	r18, 0xFF	; 255
    5736:	3f 4f       	sbci	r19, 0xFF	; 255
    5738:	79 01       	movw	r14, r18

0000573a <.Loc.265>:
              if(timeconstant.w[1] == (F_CPU/100000UL)) {
    573a:	20 35       	cpi	r18, 0x50	; 80
    573c:	31 05       	cpc	r19, r1
    573e:	09 f0       	breq	.+2      	; 0x5742 <L0^A+0x2>

00005740 <L0^A>:
    5740:	86 ce       	rjmp	.-756    	; 0x544e <.L14>
    5742:	88 ce       	rjmp	.-752    	; 0x5454 <.L15>

00005744 <.L12>:
        if((TCNT1 > timeconstant.w[0]) && (ii & (1<<TOV1))) {
    5744:	80 ff       	sbrs	r24, 0
    5746:	98 ce       	rjmp	.-720    	; 0x5478 <.L13>

00005748 <.Loc.268>:
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    5748:	81 e0       	ldi	r24, 0x01	; 1

0000574a <.LVL71>:
    574a:	86 bb       	out	0x16, r24	; 22

0000574c <.Loc.271>:
           timeconstant.w[1]++;			// count one additional OV
    574c:	8f ef       	ldi	r24, 0xFF	; 255
    574e:	e8 1a       	sub	r14, r24
    5750:	f8 0a       	sbc	r15, r24

00005752 <.Loc.273>:
    5752:	92 ce       	rjmp	.-732    	; 0x5478 <.L13>

00005754 <.L19>:
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
    5754:	c4 01       	movw	r24, r8
    5756:	60 eb       	ldi	r22, 0xB0	; 176
    5758:	76 e3       	ldi	r23, 0x36	; 54
    575a:	0e 94 00 38 	call	0x7000	; 0x7000 <__udivmodhi4>

0000575e <.Loc.276>:
           cnt_diff += CNT_ZERO_720;
    575e:	69 5f       	subi	r22, 0xF9	; 249

00005760 <.LVL73>:
           tmpint += REF_L_KORR;
    5760:	28 5d       	subi	r18, 0xD8	; 216
    5762:	3f 4f       	sbci	r19, 0xFF	; 255

00005764 <.Loc.279>:
    5764:	c3 ce       	rjmp	.-634    	; 0x54ec <.L21>

00005766 <.L36>:
    5766:	c1 2c       	mov	r12, r1

00005768 <.LVL76>:
    5768:	d1 2c       	mov	r13, r1
    576a:	e1 2c       	mov	r14, r1
    576c:	f1 2c       	mov	r15, r1
    576e:	cc ce       	rjmp	.-616    	; 0x5508 <.L22>

00005770 <.L25>:
        if (timeconstant.dw > 10) {
    5770:	8b e0       	ldi	r24, 0x0B	; 11
    5772:	c8 16       	cp	r12, r24
    5774:	d1 04       	cpc	r13, r1
    5776:	e1 04       	cpc	r14, r1
    5778:	f1 04       	cpc	r15, r1
    577a:	08 f4       	brcc	.+2      	; 0x577e <.Loc.284>

0000577c <L0^A>:
    577c:	d4 ce       	rjmp	.-600    	; 0x5526 <.L26>

0000577e <.Loc.284>:
           timeconstant.dw -= 1;
    577e:	91 e0       	ldi	r25, 0x01	; 1
    5780:	c9 1a       	sub	r12, r25
    5782:	d1 08       	sbc	r13, r1
    5784:	e1 08       	sbc	r14, r1
    5786:	f1 08       	sbc	r15, r1

00005788 <.LVL78>:
    5788:	ce ce       	rjmp	.-612    	; 0x5526 <.L26>

0000578a <.L32>:
        inductor_lpre = -4;	// 100 uH units
    578a:	8c ef       	ldi	r24, 0xFC	; 252
    578c:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <inductor_lpre>

00005790 <.Loc.289>:
        inductor_lx = (inductor_lx + 5) / 10;
    5790:	cb 01       	movw	r24, r22
    5792:	ba 01       	movw	r22, r20
    5794:	6b 5f       	subi	r22, 0xFB	; 251
    5796:	7f 4f       	sbci	r23, 0xFF	; 255
    5798:	8f 4f       	sbci	r24, 0xFF	; 255
    579a:	9f 4f       	sbci	r25, 0xFF	; 255

0000579c <.Loc.291>:
    579c:	2a e0       	ldi	r18, 0x0A	; 10
    579e:	30 e0       	ldi	r19, 0x00	; 0
    57a0:	40 e0       	ldi	r20, 0x00	; 0
    57a2:	50 e0       	ldi	r21, 0x00	; 0
    57a4:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

000057a8 <.Loc.292>:
    57a8:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <inductor_lx>
    57ac:	30 93 a0 01 	sts	0x01A0, r19	; 0x8001a0 <inductor_lx+0x1>
    57b0:	40 93 a1 01 	sts	0x01A1, r20	; 0x8001a1 <inductor_lx+0x2>
    57b4:	50 93 a2 01 	sts	0x01A2, r21	; 0x8001a2 <inductor_lx+0x3>
    57b8:	8d cf       	rjmp	.-230    	; 0x56d4 <.L33>

000057ba <GetVloss>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void GetVloss() {
    57ba:	a0 e0       	ldi	r26, 0x00	; 0
    57bc:	b0 e0       	ldi	r27, 0x00	; 0
    57be:	e3 ee       	ldi	r30, 0xE3	; 227
    57c0:	fb e2       	ldi	r31, 0x2B	; 43
    57c2:	0c 94 8c 38 	jmp	0x7118	; 0x7118 <.Loc.2>

000057c6 <.L1^B1>:
  } lval;
  uint8_t ii;
  uint8_t HiPinR_L;
  uint8_t LoADC;

  if (cap.v_loss > 0) {
    57c6:	e0 90 4a 01 	lds	r14, 0x014A	; 0x80014a <cap+0xe>
    57ca:	f0 90 4b 01 	lds	r15, 0x014B	; 0x80014b <cap+0xf>

000057ce <.Loc.9>:
    57ce:	e1 14       	cp	r14, r1
    57d0:	f1 04       	cpc	r15, r1
    57d2:	09 f0       	breq	.+2      	; 0x57d6 <.LBB2>

000057d4 <L0^A>:
    57d4:	8b c0       	rjmp	.+278    	; 0x58ec <.L3>

000057d6 <.LBB2>:
     return;		// Voltage loss is already known (big Capacitor)
  }
#if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
  LoADC = pgm_read_byte((&PinRLRHADCtab[6])+cap.ca-TP_MIN) | TXD_MSK;
#else
  LoADC = pgm_read_byte((&PinRLRHADCtab[3])+cap.ca-TP_MIN) | TXD_MSK;
    57d6:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <cap+0x10>
    57da:	f0 e0       	ldi	r31, 0x00	; 0
    57dc:	e2 5b       	subi	r30, 0xB2	; 178
    57de:	fd 4f       	sbci	r31, 0xFD	; 253
    57e0:	d4 91       	lpm	r29, Z

000057e2 <.LBB3>:
#endif
  HiPinR_L = pgm_read_byte(&PinRLRHADCtab[cap.cb-TP_MIN]);	//R_L mask for HighPin R_L load
    57e2:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <cap+0x11>
    57e6:	f0 e0       	ldi	r31, 0x00	; 0
    57e8:	e5 5b       	subi	r30, 0xB5	; 181
    57ea:	fd 4f       	sbci	r31, 0xFD	; 253
    57ec:	c4 91       	lpm	r28, Z

000057ee <.LBE3>:

  EntladePins();			// discharge capacitor
    57ee:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <EntladePins>

000057f2 <.LVL3>:
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    57f2:	18 b8       	out	0x08, r1	; 8

000057f4 <.Loc.25>:
  R_PORT = 0;				// switch R-Port to GND
    57f4:	15 b8       	out	0x05, r1	; 5

000057f6 <.Loc.27>:
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    57f6:	d7 b9       	out	0x07, r29	; 7

000057f8 <.Loc.29>:
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    57f8:	c4 b9       	out	0x04, r28	; 4

000057fa <.Loc.31>:
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
    57fa:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cap+0x11>
    57fe:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00005802 <.LVL4>:
    5802:	8c 01       	movw	r16, r24

00005804 <.LVL5>:
// ******** should adcv[0] be measured without current???
  if ((cap.cpre_max > -9) || (cap.cpre_max < -12)) return;	// too much or too less capacity
    5804:	d0 91 4f 01 	lds	r29, 0x014F	; 0x80014f <cap+0x13>

00005808 <.LVL6>:
    5808:	8c e0       	ldi	r24, 0x0C	; 12
    580a:	8d 0f       	add	r24, r29

0000580c <.Loc.36>:
    580c:	84 30       	cpi	r24, 0x04	; 4
    580e:	08 f0       	brcs	.+2      	; 0x5812 <.Loc.37>

00005810 <L0^A>:
    5810:	6d c0       	rjmp	.+218    	; 0x58ec <.L3>

00005812 <.Loc.37>:
  lval.dw = cap.cval_max;
    5812:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <cap+0x4>
    5816:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <cap+0x5>
    581a:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <cap+0x6>
    581e:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <cap+0x7>

00005822 <.Loc.39>:
  for (ii=cap.cpre_max+15;ii<7;ii++) {
    5822:	d1 5f       	subi	r29, 0xF1	; 241

00005824 <.L5>:
     lval.dw = (lval.dw + 5) / 10;
    5824:	05 96       	adiw	r24, 0x05	; 5
    5826:	a1 1d       	adc	r26, r1
    5828:	b1 1d       	adc	r27, r1
    582a:	2c 01       	movw	r4, r24
    582c:	3d 01       	movw	r6, r26

0000582e <.Loc.44>:
    582e:	bc 01       	movw	r22, r24
    5830:	cd 01       	movw	r24, r26
    5832:	2a e0       	ldi	r18, 0x0A	; 10
    5834:	30 e0       	ldi	r19, 0x00	; 0
    5836:	40 e0       	ldi	r20, 0x00	; 0
    5838:	50 e0       	ldi	r21, 0x00	; 0
    583a:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>
    583e:	49 01       	movw	r8, r18
    5840:	5a 01       	movw	r10, r20
    5842:	da 01       	movw	r26, r20
    5844:	c9 01       	movw	r24, r18

00005846 <.Loc.45>:
  for (ii=cap.cpre_max+15;ii<7;ii++) {
    5846:	df 5f       	subi	r29, 0xFF	; 255

00005848 <.Loc.46>:
    5848:	d7 30       	cpi	r29, 0x07	; 7
    584a:	61 f7       	brne	.-40     	; 0x5824 <.L5>

0000584c <.Loc.47>:
  }
  if (lval.dw > 5000) {
    584c:	2a e5       	ldi	r18, 0x5A	; 90
    584e:	42 16       	cp	r4, r18
    5850:	23 ec       	ldi	r18, 0xC3	; 195
    5852:	52 06       	cpc	r5, r18
    5854:	61 04       	cpc	r6, r1
    5856:	71 04       	cpc	r7, r1
    5858:	08 f0       	brcs	.+2      	; 0x585c <.Loc.49>

0000585a <L0^A>:
    585a:	48 c0       	rjmp	.+144    	; 0x58ec <.L3>

0000585c <.Loc.49>:
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  if (lval.w[0] < 5) return;		// Capacity below 5nF
    585c:	05 97       	sbiw	r24, 0x05	; 5
    585e:	08 f4       	brcc	.+2      	; 0x5862 <.Loc.51>

00005860 <L0^A>:
    5860:	45 c0       	rjmp	.+138    	; 0x58ec <.L3>

00005862 <.Loc.51>:
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    5862:	c5 b9       	out	0x05, r28	; 5

00005864 <.Loc.53>:
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    5864:	c4 b9       	out	0x04, r28	; 4

00005866 <.LVL9>:
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    5866:	c0 e0       	ldi	r28, 0x00	; 0
    5868:	d0 e0       	ldi	r29, 0x00	; 0

0000586a <.L6>:
    586a:	c8 15       	cp	r28, r8
    586c:	d9 05       	cpc	r29, r9
    586e:	08 f4       	brcc	.+2      	; 0x5872 <.Loc.58>

00005870 <L0^A>:
    5870:	42 c0       	rjmp	.+132    	; 0x58f6 <.L7>

00005872 <.Loc.58>:
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
  }
  R_DDR = 0;				// switch back to input
    5872:	14 b8       	out	0x04, r1	; 4

00005874 <.Loc.60>:
  R_PORT = 0;			// no Pull up
    5874:	15 b8       	out	0x05, r1	; 5

00005876 <.Loc.62>:
 // wait10us();			//wait a little time
  wdt_reset();
    5876:	a8 95       	wdr

00005878 <.Loc.63>:
  // read voltage without current
  ADCconfig.Samples = 5;		// set ADC to only 5 samples
    5878:	85 e0       	ldi	r24, 0x05	; 5
    587a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ADCconfig>

0000587e <.Loc.65>:
  adcv[2] = ReadADC(cap.cb);
    587e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cap+0x11>
    5882:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00005886 <.LVL11>:
    5886:	ec 01       	movw	r28, r24

00005888 <.LVL12>:
  if (adcv[2] > adcv[0]) {
    5888:	08 17       	cp	r16, r24
    588a:	19 07       	cpc	r17, r25
    588c:	c0 f5       	brcc	.+112    	; 0x58fe <.L13>

0000588e <.Loc.69>:
     adcv[2] -= adcv[0];		//difference to beginning voltage
    588e:	c0 1b       	sub	r28, r16
    5890:	d1 0b       	sbc	r29, r17

00005892 <.L8>:
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    5892:	c1 2c       	mov	r12, r1
    5894:	d1 2c       	mov	r13, r1

00005896 <.L9>:
    5896:	c8 14       	cp	r12, r8
    5898:	d9 04       	cpc	r13, r9
    589a:	a0 f1       	brcs	.+104    	; 0x5904 <.L10>

0000589c <.Loc.74>:
//     wait50us();
     wait5us();
  }
  adcv[3] = ReadADC(cap.cb);	// read voltage again, is discharged only a little bit ?
    589c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cap+0x11>
    58a0:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

000058a4 <.LVL15>:
    58a4:	9c 01       	movw	r18, r24

000058a6 <.LVL16>:
  ADCconfig.Samples = ANZ_MESS;		// set ADC back to configured No. of samples
    58a6:	89 e1       	ldi	r24, 0x19	; 25
    58a8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ADCconfig>

000058ac <.Loc.78>:
  wdt_reset();
    58ac:	a8 95       	wdr

000058ae <.Loc.79>:
  if (adcv[3] > adcv[0]) {
    58ae:	02 17       	cp	r16, r18
    58b0:	13 07       	cpc	r17, r19
    58b2:	18 f4       	brcc	.+6      	; 0x58ba <.L11>

000058b4 <.Loc.81>:
     adcv[3] -= adcv[0];		// difference to beginning voltage
    58b4:	79 01       	movw	r14, r18
    58b6:	e0 1a       	sub	r14, r16
    58b8:	f1 0a       	sbc	r15, r17

000058ba <.L11>:
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    58ba:	ec 16       	cp	r14, r28
    58bc:	fd 06       	cpc	r15, r29
    58be:	80 f4       	brcc	.+32     	; 0x58e0 <.L12>

000058c0 <.LVL18>:
     // build difference to load voltage
     adcv[1] = adcv[2] - adcv[3];	// lost voltage during load time wait
    58c0:	9e 01       	movw	r18, r28
    58c2:	2e 19       	sub	r18, r14
    58c4:	3f 09       	sbc	r19, r15

000058c6 <.LVL19>:
  }
  // compute voltage drop as part from loaded voltage
  if (adcv[1] > 0) {
     // there is any voltage drop (adcv[1]) !
     // adcv[2] is the loaded voltage.
     cap.v_loss = (unsigned long)(adcv[1] * 500UL) / adcv[2];
    58c6:	a4 ef       	ldi	r26, 0xF4	; 244
    58c8:	b1 e0       	ldi	r27, 0x01	; 1
    58ca:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

000058ce <.Loc.90>:
    58ce:	9e 01       	movw	r18, r28

000058d0 <.LVL20>:
    58d0:	40 e0       	ldi	r20, 0x00	; 0
    58d2:	50 e0       	ldi	r21, 0x00	; 0

000058d4 <.Loc.92>:
    58d4:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

000058d8 <.Loc.93>:
    58d8:	30 93 4b 01 	sts	0x014B, r19	; 0x80014b <cap+0xf>
    58dc:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <cap+0xe>

000058e0 <.L12>:
  lcd_line4();
  DisplayValue16(lval.w[0],0,'x',4);
#endif

  // discharge capacitor again
  EntladePins();		// discharge capacitors
    58e0:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <EntladePins>

000058e4 <.LVL22>:
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    58e4:	17 b8       	out	0x07, r1	; 7

000058e6 <.Loc.97>:
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    58e6:	18 b8       	out	0x08, r1	; 8

000058e8 <.Loc.100>:
  R_DDR = 0;			// switch all resistor ports to input
    58e8:	14 b8       	out	0x04, r1	; 4

000058ea <.Loc.101>:
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    58ea:	15 b8       	out	0x05, r1	; 5

000058ec <.L3>:
#endif
  return;
 } // end GetVloss()
    58ec:	cd b7       	in	r28, 0x3d	; 61
    58ee:	de b7       	in	r29, 0x3e	; 62
    58f0:	e0 e1       	ldi	r30, 0x10	; 16
    58f2:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <.Loc.2>

000058f6 <.L7>:
     wait5us();			// wait exactly 5us
    58f6:	0e 94 be 07 	call	0xf7c	; 0xf7c <wait5us>

000058fa <.LVL25>:
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    58fa:	22 96       	adiw	r28, 0x02	; 2

000058fc <.Loc.107>:
    58fc:	b6 cf       	rjmp	.-148    	; 0x586a <.L6>

000058fe <.L13>:
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
    58fe:	c0 e0       	ldi	r28, 0x00	; 0
    5900:	d0 e0       	ldi	r29, 0x00	; 0
    5902:	c7 cf       	rjmp	.-114    	; 0x5892 <.L8>

00005904 <.L10>:
     wait5us();
    5904:	0e 94 be 07 	call	0xf7c	; 0xf7c <wait5us>

00005908 <.LVL29>:
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    5908:	8f ef       	ldi	r24, 0xFF	; 255
    590a:	c8 1a       	sub	r12, r24
    590c:	d8 0a       	sbc	r13, r24

0000590e <.Loc.111>:
    590e:	c3 cf       	rjmp	.-122    	; 0x5896 <.L9>

00005910 <message2line>:

/* ****************************************************************** */
/* message2line writes the message corresponding to the number to LCD */
/* ****************************************************************** */
void message2line(uint8_t number) { 
     if (number > MODE_LAST) number -= (MODE_LAST + 1);
    5910:	8b 30       	cpi	r24, 0x0B	; 11
    5912:	08 f0       	brcs	.+2      	; 0x5916 <.L2>

00005914 <.Loc.3>:
    5914:	8b 50       	subi	r24, 0x0B	; 11

00005916 <.L2>:
     if (number == MODE_TRANS) lcd_MEM2_string(TESTER_str);
    5916:	81 11       	cpse	r24, r1
    5918:	07 c0       	rjmp	.+14     	; 0x5928 <.L3>

0000591a <.Loc.7>:
    591a:	8f e1       	ldi	r24, 0x1F	; 31
    591c:	92 e0       	ldi	r25, 0x02	; 2

0000591e <.L14>:
        lcd_MEM2_string(SHOW_str);
     }
 #endif
 #if (USE_OFF == 1)
     if (number == MODE_OFF) {
        lcd_MEM2_string(OFF_str);
    591e:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00005922 <.L13>:
     }
 #endif
 lcd_clear_line();
    5922:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <lcd_clear_line>

00005926 <.LVL4>:
 uart_newline();                   // MAURO
} /* end message2line() */
    5926:	08 95       	ret

00005928 <.L3>:
     if (number == MODE_FGEN) lcd_MEM2_string(F_GEN_str);
    5928:	81 30       	cpi	r24, 0x01	; 1
    592a:	19 f4       	brne	.+6      	; 0x5932 <.L5>

0000592c <.Loc.14>:
    592c:	83 ef       	ldi	r24, 0xF3	; 243
    592e:	91 e0       	ldi	r25, 0x01	; 1

00005930 <.LVL6>:
    5930:	f6 cf       	rjmp	.-20     	; 0x591e <.L14>

00005932 <.L5>:
     if (number == MODE_PWM) lcd_MEM2_string(PWM_10bit_str);
    5932:	82 30       	cpi	r24, 0x02	; 2
    5934:	19 f4       	brne	.+6      	; 0x593c <.L7>

00005936 <.Loc.18>:
    5936:	88 ee       	ldi	r24, 0xE8	; 232
    5938:	91 e0       	ldi	r25, 0x01	; 1

0000593a <.LVL8>:
    593a:	f1 cf       	rjmp	.-30     	; 0x591e <.L14>

0000593c <.L7>:
     if (number == MODE_ESR) lcd_MEM2_string(C_ESR_str);
    593c:	83 30       	cpi	r24, 0x03	; 3
    593e:	19 f4       	brne	.+6      	; 0x5946 <.L9>

00005940 <.Loc.22>:
    5940:	8f e7       	ldi	r24, 0x7F	; 127
    5942:	90 e0       	ldi	r25, 0x00	; 0

00005944 <.LVL10>:
    5944:	ec cf       	rjmp	.-40     	; 0x591e <.L14>

00005946 <.L9>:
     if (number == MODE_RESIS) lcd_MEM_string(RESIS_13_str);
    5946:	84 30       	cpi	r24, 0x04	; 4
    5948:	19 f4       	brne	.+6      	; 0x5950 <.L4>

0000594a <.Loc.26>:
    594a:	84 e7       	ldi	r24, 0x74	; 116
    594c:	90 e0       	ldi	r25, 0x00	; 0

0000594e <.LVL12>:
    594e:	e7 cf       	rjmp	.-50     	; 0x591e <.L14>

00005950 <.L4>:
     if (number == MODE_CAP13) lcd_MEM_string(CAP_13_str);
    5950:	85 30       	cpi	r24, 0x05	; 5
    5952:	19 f4       	brne	.+6      	; 0x595a <.L6>

00005954 <.Loc.30>:
    5954:	8d e6       	ldi	r24, 0x6D	; 109
    5956:	90 e0       	ldi	r25, 0x00	; 0

00005958 <.LVL14>:
    5958:	e2 cf       	rjmp	.-60     	; 0x591e <.L14>

0000595a <.L6>:
     if (number == MODE_BIG_CAP_CORR) lcd_MEM2_string(SetCapCorr_str);
    595a:	86 30       	cpi	r24, 0x06	; 6
    595c:	19 f4       	brne	.+6      	; 0x5964 <.L8>

0000595e <.Loc.34>:
    595e:	87 ed       	ldi	r24, 0xD7	; 215
    5960:	91 e0       	ldi	r25, 0x01	; 1

00005962 <.LVL16>:
    5962:	dd cf       	rjmp	.-70     	; 0x591e <.L14>

00005964 <.L8>:
     if (number == MODE_SELFTEST) lcd_MEM2_string(FULLCHECK_str);
    5964:	87 30       	cpi	r24, 0x07	; 7
    5966:	19 f4       	brne	.+6      	; 0x596e <.L10>

00005968 <.Loc.38>:
    5968:	87 ec       	ldi	r24, 0xC7	; 199
    596a:	91 e0       	ldi	r25, 0x01	; 1

0000596c <.LVL18>:
    596c:	d8 cf       	rjmp	.-80     	; 0x591e <.L14>

0000596e <.L10>:
     if (number == MODE_CONTRAST) lcd_MEM_string(CONTRAST_str); 
    596e:	88 30       	cpi	r24, 0x08	; 8
    5970:	19 f4       	brne	.+6      	; 0x5978 <.L11>

00005972 <.Loc.42>:
    5972:	8e ea       	ldi	r24, 0xAE	; 174
    5974:	91 e0       	ldi	r25, 0x01	; 1

00005976 <.LVL20>:
    5976:	d3 cf       	rjmp	.-90     	; 0x591e <.L14>

00005978 <.L11>:
     if (number == MODE_SHOW) {
    5978:	89 30       	cpi	r24, 0x09	; 9
    597a:	19 f4       	brne	.+6      	; 0x5982 <.L12>

0000597c <.Loc.46>:
        lcd_MEM2_string(SHOW_str);
    597c:	89 e0       	ldi	r24, 0x09	; 9
    597e:	92 e0       	ldi	r25, 0x02	; 2

00005980 <.LVL22>:
    5980:	ce cf       	rjmp	.-100    	; 0x591e <.L14>

00005982 <.L12>:
     if (number == MODE_OFF) {
    5982:	8a 30       	cpi	r24, 0x0A	; 10
    5984:	71 f6       	brne	.-100    	; 0x5922 <.L13>

00005986 <.Loc.50>:
        lcd_MEM2_string(OFF_str);
    5986:	80 e0       	ldi	r24, 0x00	; 0
    5988:	92 e0       	ldi	r25, 0x02	; 2

0000598a <.LVL24>:
    598a:	c9 cf       	rjmp	.-110    	; 0x591e <.L14>

0000598c <show_C_ESR>:

/* ****************************************************************** */
/* show_C_ESR measures the capacity and ESR of a capacitor connected to TP1 and TP3 */
/* ****************************************************************** */
 #if (USE_ESR == 1)
void show_C_ESR() {
    598c:	0f 93       	push	r16

0000598e <.LCFI0>:
    598e:	cf 93       	push	r28

00005990 <.LCFI1>:
  uint8_t key_pressed;
  message_key_released(C_ESR_str);
    5990:	8f e7       	ldi	r24, 0x7F	; 127
    5992:	90 e0       	ldi	r25, 0x00	; 0
    5994:	e9 d3       	rcall	.+2002   	; 0x6168 <message_key_released>

00005996 <.LVL25>:
  #ifdef POWER_OFF
  uint8_t times;
  for (times=0;times<250;) 
    5996:	c0 e0       	ldi	r28, 0x00	; 0

00005998 <.L21>:
  #else
  while (1)		/* wait endless without the POWER_OFF option */
  #endif
  {
        PartFound = PART_NONE;
    5998:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <PartFound>

0000599c <.Loc.61>:
        ReadBigCap(TP3,TP1);
    599c:	60 e0       	ldi	r22, 0x00	; 0
    599e:	82 e0       	ldi	r24, 0x02	; 2
    59a0:	5d d4       	rcall	.+2234   	; 0x625c <ReadBigCap>

000059a2 <.LVL27>:
        if (PartFound == PART_CAPACITOR) {
    59a2:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <PartFound>
    59a6:	88 30       	cpi	r24, 0x08	; 8
    59a8:	09 f0       	breq	.+2      	; 0x59ac <.Loc.64>

000059aa <L0^A>:
    59aa:	4f c0       	rjmp	.+158    	; 0x5a4a <.L16>

000059ac <.Loc.64>:
  #if LCD_LINES > 2
           lcd_line2(); 	// set to line2 
    59ac:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_line2>

000059b0 <.LVL28>:
  #else
           lcd_line1(); 	// set to line1 
  #endif
           lcd_data('C');
    59b0:	83 e4       	ldi	r24, 0x43	; 67
    59b2:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

000059b6 <.LVL29>:
           lcd_equal();		// lcd_data('=');
    59b6:	0e 94 b8 06 	call	0xd70	; 0xd70 <lcd_equal>

000059ba <.LVL30>:
           DisplayValue(cap.cval_max,cap.cpre_max,'F',3);
    59ba:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <cap+0x4>
    59be:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <cap+0x5>
    59c2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <cap+0x6>
    59c6:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <cap+0x7>
    59ca:	03 e0       	ldi	r16, 0x03	; 3
    59cc:	26 e4       	ldi	r18, 0x46	; 70
    59ce:	40 91 4f 01 	lds	r20, 0x014F	; 0x80014f <cap+0x13>
    59d2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DisplayValue>

000059d6 <.LVL31>:
           lcd_clear_line();	// clear to end of line 1
    59d6:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

000059da <.LVL32>:
           cap.esr = GetESR(cap.cb,cap.ca);
    59da:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <cap+0x10>
    59de:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cap+0x11>
    59e2:	0e 94 24 09 	call	0x1248	; 0x1248 <GetESR>

000059e6 <.LVL33>:
    59e6:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <cap+0xd>
    59ea:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <cap+0xc>

000059ee <.Loc.72>:
  #if LCD_LINES > 2
	   lcd_line3();		// use line 3 
    59ee:	0e 94 ed 0a 	call	0x15da	; 0x15da <lcd_line3>

000059f2 <.LVL34>:
  #else
           lcd_line2();		// use line 2 
  #endif
           lcd_MEM_string(&ESR_str[1]);
    59f2:	8b e3       	ldi	r24, 0x3B	; 59
    59f4:	91 e0       	ldi	r25, 0x01	; 1
    59f6:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

000059fa <.LVL35>:
           if (cap.esr < 65530) {
    59fa:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <cap+0xc>
    59fe:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <cap+0xd>

00005a02 <.Loc.76>:
    5a02:	8a 3f       	cpi	r24, 0xFA	; 250
    5a04:	2f ef       	ldi	r18, 0xFF	; 255
    5a06:	92 07       	cpc	r25, r18
    5a08:	e0 f4       	brcc	.+56     	; 0x5a42 <.L17>

00005a0a <.Loc.77>:
              DisplayValue16(cap.esr,-2,LCD_CHAR_OMEGA,2);
    5a0a:	22 e0       	ldi	r18, 0x02	; 2
    5a0c:	4d e1       	ldi	r20, 0x1D	; 29
    5a0e:	6e ef       	ldi	r22, 0xFE	; 254
    5a10:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

00005a14 <.L23>:
           lcd_clear_line();		// clear to end of line
        } else { // no cap found
  #if LCD_LINES > 2
           lcd_clear_line2(); 	// clear C value 
           lcd_line3();
	   lcd_clear_line();	// clear old ESR value
    5a14:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

00005a18 <.LVL37>:
           lcd_clear_line();
           lcd_clear_line2(); 	// clear old ESR value 
  #endif
        }
  #if defined(POWER_OFF) && defined(BAT_CHECK)
     Bat_update(times);
    5a18:	8c 2f       	mov	r24, r28
    5a1a:	ba db       	rcall	.-2188   	; 0x5190 <Bat_update>

00005a1c <.LVL38>:
  #endif
     key_pressed = wait_for_key_ms(1000);
    5a1c:	88 ee       	ldi	r24, 0xE8	; 232
    5a1e:	93 e0       	ldi	r25, 0x03	; 3
    5a20:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <wait_for_key_ms>

00005a24 <.LVL39>:
  #ifdef WITH_ROTARY_SWITCH
     if ((key_pressed != 0) || (rotary.incre > FAST_ROTATION)) break;
    5a24:	81 11       	cpse	r24, r1
    5a26:	0a c0       	rjmp	.+20     	; 0x5a3c <.L15>

00005a28 <.Loc.84>:
    5a28:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rotary+0x6>

00005a2c <.LVL40>:
    5a2c:	8b 30       	cpi	r24, 0x0B	; 11
    5a2e:	30 f4       	brcc	.+12     	; 0x5a3c <.L15>

00005a30 <.Loc.86>:
  #else
     if (key_pressed != 0) break;
  #endif
  #ifdef POWER_OFF
     times = Pwr_mode_check(times);	// no time limit with DC_Pwr_mode
    5a30:	8c 2f       	mov	r24, r28
    5a32:	b6 db       	rcall	.-2196   	; 0x51a0 <Pwr_mode_check>

00005a34 <.LVL41>:
    5a34:	c8 2f       	mov	r28, r24

00005a36 <.LVL42>:
  for (times=0;times<250;) 
    5a36:	8a 3f       	cpi	r24, 0xFA	; 250
    5a38:	08 f4       	brcc	.+2      	; 0x5a3c <.L15>

00005a3a <L0^A>:
    5a3a:	ae cf       	rjmp	.-164    	; 0x5998 <.L21>

00005a3c <.L15>:
  #endif
  }  /* end for times */
} /* end show_C_ESR() */
    5a3c:	cf 91       	pop	r28

00005a3e <.LVL44>:
    5a3e:	0f 91       	pop	r16
    5a40:	08 95       	ret

00005a42 <.L17>:
              lcd_data('?');		// too big
    5a42:	8f e3       	ldi	r24, 0x3F	; 63
    5a44:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00005a48 <.LVL46>:
           lcd_clear_line();		// clear to end of line
    5a48:	e5 cf       	rjmp	.-54     	; 0x5a14 <.L23>

00005a4a <.L16>:
           lcd_clear_line2(); 	// clear C value 
    5a4a:	0e 94 83 0b 	call	0x1706	; 0x1706 <lcd_clear_line2>

00005a4e <.LVL47>:
           lcd_line3();
    5a4e:	0e 94 ed 0a 	call	0x15da	; 0x15da <lcd_line3>

00005a52 <.LVL48>:
    5a52:	e0 cf       	rjmp	.-64     	; 0x5a14 <.L23>

00005a54 <make_frequency>:
/* *************************************************** */
/* make frequency starts a frequency generator at TP2 with 680 Ohm resistor */
/* some predefined frequencies can be switched with the key */
/* a long key press returns to the selection menu */
/* *************************************************** */
void make_frequency() {
    5a54:	a5 e0       	ldi	r26, 0x05	; 5
    5a56:	b0 e0       	ldi	r27, 0x00	; 0
    5a58:	e0 e3       	ldi	r30, 0x30	; 48
    5a5a:	fd e2       	ldi	r31, 0x2D	; 45
    5a5c:	0c 94 8a 38 	jmp	0x7114	; 0x7114 <__prologue_saves__>

00005a60 <.L1^B1>:
  unsigned long  f_incre;	// frequency increment 1, 10, 100, 1000, 10000, 100000
  uint8_t f_digit;		// digit for f_incre, 0-10 or 0-20
  uint8_t Max_Digit;		// 10 or 20 , the last digit is for 
  uint8_t right;		// logical expression 

  message_key_released(F_GEN_str);	// display f-Generator and wait for key released
    5a60:	83 ef       	ldi	r24, 0xF3	; 243
    5a62:	91 e0       	ldi	r25, 0x01	; 1
    5a64:	81 d3       	rcall	.+1794   	; 0x6168 <message_key_released>

00005a66 <.LVL49>:
  // OC1B is connected with 680 Ohm resistor to TP2 (middle test pin) 
  TCCR1A = (0<<COM1B1) | (1<<COM1B0) | (0<<WGM11) | (0<<WGM10); // CTC mode, count to OCR1A
    5a66:	80 e1       	ldi	r24, 0x10	; 16
    5a68:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>

00005a6c <.Loc.108>:
  TIMSK1 = 0;		// no interrupt used
    5a6c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>

00005a70 <.Loc.110>:
  OCR1A = 1;		// highest frequency
    5a70:	81 e0       	ldi	r24, 0x01	; 1
    5a72:	90 e0       	ldi	r25, 0x00	; 0
    5a74:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    5a78:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>

00005a7c <.Loc.112>:
  OCR1B	= 0;		// toggle OC1B at this count
    5a7c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    5a80:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>

00005a84 <.Loc.114>:
  TIFR1 = (1<<OCF1A) | (1<<OCF1A) | (1<<TOV1);	// reset interrupt flags
    5a84:	83 e0       	ldi	r24, 0x03	; 3
    5a86:	86 bb       	out	0x16, r24	; 22

00005a88 <.Loc.116>:
  TCCR1C = 0;
    5a88:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>

00005a8c <.Loc.118>:
  TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10); // set counter mode 
    5a8c:	88 e0       	ldi	r24, 0x08	; 8
    5a8e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

00005a92 <.Loc.120>:
  R_PORT = 0;		// set all resistor port outputs to GND
    5a92:	15 b8       	out	0x05, r1	; 5

00005a94 <.Loc.122>:
#if PROCESSOR_TYP == 644
  R_DDR = (1<<PIN_RL1) | (1<<PIN_RL2) | (1<<PIN_RL3);		// set TP1, DDD4(TP2) and TP3 to output
#else
  R_DDR = (1<<PIN_RL1) | (1<<PIN_RL3);		// set TP1 and TP3 to output
    5a94:	81 e1       	ldi	r24, 0x11	; 17
    5a96:	84 b9       	out	0x04, r24	; 4

00005a98 <.Loc.124>:
#endif
  ADC_PORT = TXD_VAL;
    5a98:	18 b8       	out	0x08, r1	; 8

00005a9a <.Loc.126>:
  ADC_DDR = (1<<TP1) | TXD_MSK;			//connect TP1 to GND
    5a9a:	81 e0       	ldi	r24, 0x01	; 1
    5a9c:	87 b9       	out	0x07, r24	; 7

00005a9e <.Loc.128>:
#if PROCESSOR_TYP == 1280
  DDRB  |= (1<<DDB6);	// set output enable for OC1B
#else
  DDRB  |= (1<<DDB2);	// set output enable for OC1B
    5a9e:	22 9a       	sbi	0x04, 2	; 4

00005aa0 <.Loc.130>:
#endif
  TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10); // no clock divide
    5aa0:	89 e0       	ldi	r24, 0x09	; 9
    5aa2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

00005aa6 <.LVL50>:
#ifdef POWER_OFF
  uint8_t new_points;		// one point for every 30 seconds wait time
  uint8_t shown_points;		// one point for every 30 seconds wait time
  uint8_t times;		// total wait time
  shown_points = 0;
  for (times=0; times<240;) 
    5aa6:	10 e0       	ldi	r17, 0x00	; 0

00005aa8 <.Loc.143>:
  shown_points = 0;
    5aa8:	20 e0       	ldi	r18, 0x00	; 0

00005aaa <.Loc.144>:
  Max_Digit = 10;	// normally 10, only for 100kHz steps 20
    5aaa:	fa e0       	ldi	r31, 0x0A	; 10
    5aac:	3f 2e       	mov	r3, r31

00005aae <.Loc.145>:
  f_digit = 1;			// start value
    5aae:	88 24       	eor	r8, r8
    5ab0:	83 94       	inc	r8

00005ab2 <.Loc.146>:
  f_incre = 1;		// increment with 1 Hz
    5ab2:	31 e0       	ldi	r19, 0x01	; 1
    5ab4:	39 83       	std	Y+1, r19	; 0x01
    5ab6:	b1 2c       	mov	r11, r1
    5ab8:	a1 2c       	mov	r10, r1
    5aba:	91 2c       	mov	r9, r1

00005abc <.Loc.147>:
  significant = 16+1;	// only one significant frequency digit (Hz resolution)
    5abc:	41 e1       	ldi	r20, 0x11	; 17
    5abe:	4d 83       	std	Y+5, r20	; 0x05

00005ac0 <.L49>:
#else
  while (1)			/* wait endless without option POWER_OFF */
#endif
  {
#ifdef POWER_OFF
     new_points = (times+10) / 30;
    5ac0:	8a e0       	ldi	r24, 0x0A	; 10
    5ac2:	81 0f       	add	r24, r17
    5ac4:	90 e0       	ldi	r25, 0x00	; 0

00005ac6 <.Loc.150>:
    5ac6:	6e e1       	ldi	r22, 0x1E	; 30
    5ac8:	70 e0       	ldi	r23, 0x00	; 0
    5aca:	0e 94 14 38 	call	0x7028	; 0x7028 <__divmodhi4>
    5ace:	26 2e       	mov	r2, r22

00005ad0 <.Loc.151>:
    5ad0:	f6 2e       	mov	r15, r22

00005ad2 <.LVL52>:
     if (new_points != shown_points) {
    5ad2:	62 17       	cp	r22, r18
    5ad4:	61 f0       	breq	.+24     	; 0x5aee <.L25>

00005ad6 <.Loc.154>:
        // count of points has changed, build LCD line1 new
        lcd_line1();	// position to line 1 
    5ad6:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <lcd_line1>

00005ada <.LVL53>:
        lcd_MEM2_string(F_GEN_str);	// display f-Generator
    5ada:	83 ef       	ldi	r24, 0xF3	; 243
    5adc:	91 e0       	ldi	r25, 0x01	; 1
    5ade:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00005ae2 <.LVL54>:
        shown_points = new_points;
        for (new_points=0; new_points<shown_points ;new_points++) {
    5ae2:	1a 82       	std	Y+2, r1	; 0x02

00005ae4 <.L26>:
    5ae4:	6a 81       	ldd	r22, Y+2	; 0x02
    5ae6:	6f 11       	cpse	r22, r15
    5ae8:	26 c0       	rjmp	.+76     	; 0x5b36 <.L27>

00005aea <.Loc.160>:
           lcd_data('.');		// show elapsed time, one point is 60 seconds
        }
        lcd_clear_line();	// clear remainder of line1
    5aea:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

00005aee <.L25>:
     }
#endif
     // Generate frequency
     if (significant > (16+1)) {
        // use lower significant digits and the frequency selection digit f_digit
        wish_freq = (wish_freq % f_incre) + ((f_digit%Max_Digit) * f_incre);
    5aee:	88 2d       	mov	r24, r8
    5af0:	63 2d       	mov	r22, r3
    5af2:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <__udivmodqi4>

00005af6 <.Loc.163>:
    5af6:	a9 2f       	mov	r26, r25
    5af8:	b0 e0       	ldi	r27, 0x00	; 0
    5afa:	29 81       	ldd	r18, Y+1	; 0x01
    5afc:	3b 2d       	mov	r19, r11
    5afe:	4a 2d       	mov	r20, r10
    5b00:	59 2d       	mov	r21, r9
    5b02:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <__muluhisi3>
    5b06:	6b 01       	movw	r12, r22
    5b08:	7c 01       	movw	r14, r24

00005b0a <.Loc.164>:
     if (significant > (16+1)) {
    5b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    5b0c:	82 31       	cpi	r24, 0x12	; 18
    5b0e:	40 f0       	brcs	.+16     	; 0x5b20 <.L28>

00005b10 <.Loc.165>:
        wish_freq = (wish_freq % f_incre) + ((f_digit%Max_Digit) * f_incre);
    5b10:	b2 01       	movw	r22, r4
    5b12:	c3 01       	movw	r24, r6
    5b14:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00005b18 <.Loc.167>:
    5b18:	c6 0e       	add	r12, r22
    5b1a:	d7 1e       	adc	r13, r23
    5b1c:	e8 1e       	adc	r14, r24
    5b1e:	f9 1e       	adc	r15, r25

00005b20 <.L28>:
     } else {
	// with only one significant there are no lower significant digits
        wish_freq = ((f_digit%Max_Digit) * f_incre);
     }
     lcd_line2();
    5b20:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_line2>

00005b24 <.LVL58>:
     right = ((f_digit == Max_Digit) && (significant > 17));
    5b24:	83 10       	cpse	r8, r3
    5b26:	0e c0       	rjmp	.+28     	; 0x5b44 <.L29>

00005b28 <.Loc.171>:
    5b28:	9d 81       	ldd	r25, Y+5	; 0x05
    5b2a:	92 31       	cpi	r25, 0x12	; 18
    5b2c:	08 f0       	brcs	.+2      	; 0x5b30 <.Loc.172>

00005b2e <L0^A>:
    5b2e:	af c0       	rjmp	.+350    	; 0x5c8e <.L51>

00005b30 <.Loc.172>:
    5b30:	1c 82       	std	Y+4, r1	; 0x04

00005b32 <.L52>:
     uint8_t long_key_char;
     if (right) {
        long_key_char = '<';	// the frequency string will move to the left by long key press
     } else {
        if (significant < (16+6)) {
           long_key_char = '>';		// move the frequency string to the right with one leading zero
    5b32:	8e e3       	ldi	r24, 0x3E	; 62
    5b34:	0c c0       	rjmp	.+24     	; 0x5b4e <.L30>

00005b36 <.L27>:
           lcd_data('.');		// show elapsed time, one point is 60 seconds
    5b36:	8e e2       	ldi	r24, 0x2E	; 46
    5b38:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00005b3c <.LVL60>:
        for (new_points=0; new_points<shown_points ;new_points++) {
    5b3c:	5a 81       	ldd	r21, Y+2	; 0x02
    5b3e:	5f 5f       	subi	r21, 0xFF	; 255
    5b40:	5a 83       	std	Y+2, r21	; 0x02

00005b42 <.LVL61>:
    5b42:	d0 cf       	rjmp	.-96     	; 0x5ae4 <.L26>

00005b44 <.L29>:
        if (significant < (16+6)) {
    5b44:	2d 81       	ldd	r18, Y+5	; 0x05

00005b46 <.Loc.181>:
     right = ((f_digit == Max_Digit) && (significant > 17));
    5b46:	1c 82       	std	Y+4, r1	; 0x04

00005b48 <.Loc.182>:
        } else {
           long_key_char = 'R';		// i100kHz is the last position, Reset to 1 by long key press
    5b48:	82 e5       	ldi	r24, 0x52	; 82

00005b4a <.Loc.183>:
        if (significant < (16+6)) {
    5b4a:	26 31       	cpi	r18, 0x16	; 22
    5b4c:	90 f3       	brcs	.-28     	; 0x5b32 <.L52>

00005b4e <.L30>:
        }
     }
     lcd_data(long_key_char);		// show the selected character for long key action
    5b4e:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00005b52 <.LVL64>:
#if (LCD_LINES > 2)
     lcd_space();
    5b52:	0e 94 b4 06 	call	0xd68	; 0xd68 <lcd_space>

00005b56 <.LVL65>:
#endif
     Display_Hz(wish_freq, significant);	// show the selected frequuency
    5b56:	4d 81       	ldd	r20, Y+5	; 0x05
    5b58:	c7 01       	movw	r24, r14
    5b5a:	b6 01       	movw	r22, r12
    5b5c:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <Display_Hz>

00005b60 <.LVL66>:
     hperiod.dw = (F_CPU + wish_freq) / (wish_freq * 2);  // total divider for selected frequenx
    5b60:	c7 01       	movw	r24, r14
    5b62:	b6 01       	movw	r22, r12
    5b64:	7e 5e       	subi	r23, 0xEE	; 238
    5b66:	85 48       	sbci	r24, 0x85	; 133
    5b68:	9f 4f       	sbci	r25, 0xFF	; 255
    5b6a:	a7 01       	movw	r20, r14
    5b6c:	96 01       	movw	r18, r12
    5b6e:	22 0f       	add	r18, r18
    5b70:	33 1f       	adc	r19, r19
    5b72:	44 1f       	adc	r20, r20
    5b74:	55 1f       	adc	r21, r21
    5b76:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00005b7a <.LVL67>:
     divider = 1;
     if (hperiod.w[1] >= 256) {
    5b7a:	ca 01       	movw	r24, r20

00005b7c <.Loc.191>:
    5b7c:	41 15       	cp	r20, r1
    5b7e:	61 e0       	ldi	r22, 0x01	; 1
    5b80:	56 07       	cpc	r21, r22
    5b82:	08 f4       	brcc	.+2      	; 0x5b86 <.Loc.192>

00005b84 <L0^A>:
    5b84:	88 c0       	rjmp	.+272    	; 0x5c96 <.L31>

00005b86 <.Loc.192>:
        // divide by 1024
        TCCR1B = (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10); // divide clock by 1024
    5b86:	8d e0       	ldi	r24, 0x0D	; 13
    5b88:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

00005b8c <.LVL68>:
        divider = 1024;
    5b8c:	80 e0       	ldi	r24, 0x00	; 0
    5b8e:	94 e0       	ldi	r25, 0x04	; 4

00005b90 <.L32>:
        divider = 8;
     } else {
        // no divide
        TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10); // no clock divide
     }
     OCR1A = (hperiod.dw / divider) - 1;	// the remainder divider  match to 16-bit counter 
    5b90:	2c 01       	movw	r4, r24
    5b92:	61 2c       	mov	r6, r1
    5b94:	71 2c       	mov	r7, r1
    5b96:	ca 01       	movw	r24, r20
    5b98:	b9 01       	movw	r22, r18
    5b9a:	a3 01       	movw	r20, r6
    5b9c:	92 01       	movw	r18, r4

00005b9e <.LVL70>:
    5b9e:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00005ba2 <.LVL71>:
    5ba2:	21 50       	subi	r18, 0x01	; 1
    5ba4:	31 09       	sbc	r19, r1

00005ba6 <.Loc.200>:
    5ba6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    5baa:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>

00005bae <.Loc.201>:
     if (OCR1A == 0) OCR1A = 1;
    5bae:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    5bb2:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>

00005bb6 <.LVL72>:
    5bb6:	89 2b       	or	r24, r25
    5bb8:	31 f4       	brne	.+12     	; 0x5bc6 <.L36>

00005bba <.Loc.204>:
    5bba:	81 e0       	ldi	r24, 0x01	; 1
    5bbc:	90 e0       	ldi	r25, 0x00	; 0
    5bbe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    5bc2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>

00005bc6 <.L36>:
#if (LCD_LINES > 2)
     lcd_clear_line();		// clear to end of line 2
    5bc6:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

00005bca <.LVL73>:
     lcd_line3();
    5bca:	0e 94 ed 0a 	call	0x15da	; 0x15da <lcd_line3>

00005bce <.LVL74>:
     lcd_data('f');
    5bce:	86 e6       	ldi	r24, 0x66	; 102
    5bd0:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00005bd4 <.LVL75>:
     lcd_space();
    5bd4:	0e 94 b4 06 	call	0xd68	; 0xd68 <lcd_space>

00005bd8 <.LVL76>:
//     }
//     lcd_data('z');
//     lcd_clear_line();
#endif
     long int diff_freq;
     diff_freq = (((F_CPU/2) / divider) * 100) / (OCR1A + 1) - (wish_freq * 100);
    5bd8:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    5bdc:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    5be0:	3b 83       	std	Y+3, r19	; 0x03
    5be2:	2a 83       	std	Y+2, r18	; 0x02

00005be4 <.LVL77>:
    5be4:	60 e0       	ldi	r22, 0x00	; 0
    5be6:	79 e0       	ldi	r23, 0x09	; 9
    5be8:	8d e3       	ldi	r24, 0x3D	; 61
    5bea:	90 e0       	ldi	r25, 0x00	; 0
    5bec:	a3 01       	movw	r20, r6
    5bee:	92 01       	movw	r18, r4

00005bf0 <.LVL78>:
    5bf0:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00005bf4 <.Loc.216>:
    5bf4:	a4 e6       	ldi	r26, 0x64	; 100
    5bf6:	b0 e0       	ldi	r27, 0x00	; 0
    5bf8:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <__muluhisi3>

00005bfc <.Loc.217>:
    5bfc:	2a 81       	ldd	r18, Y+2	; 0x02
    5bfe:	3b 81       	ldd	r19, Y+3	; 0x03
    5c00:	2f 5f       	subi	r18, 0xFF	; 255
    5c02:	3f 4f       	sbci	r19, 0xFF	; 255
    5c04:	40 e0       	ldi	r20, 0x00	; 0
    5c06:	50 e0       	ldi	r21, 0x00	; 0

00005c08 <.Loc.218>:
    5c08:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>
    5c0c:	29 01       	movw	r4, r18
    5c0e:	3a 01       	movw	r6, r20

00005c10 <.LVL79>:
    5c10:	a4 e6       	ldi	r26, 0x64	; 100
    5c12:	b0 e0       	ldi	r27, 0x00	; 0
    5c14:	a7 01       	movw	r20, r14
    5c16:	96 01       	movw	r18, r12
    5c18:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <__muluhisi3>

00005c1c <.Loc.220>:
    5c1c:	a3 01       	movw	r20, r6
    5c1e:	92 01       	movw	r18, r4
    5c20:	26 1b       	sub	r18, r22
    5c22:	37 0b       	sbc	r19, r23
    5c24:	48 0b       	sbc	r20, r24
    5c26:	59 0b       	sbc	r21, r25
    5c28:	ca 01       	movw	r24, r20
    5c2a:	b9 01       	movw	r22, r18

00005c2c <.Loc.221>:
#if (LCD_LINES > 2)
     DisplayValue(diff_freq,-2,'H',32+5);
    5c2c:	05 e2       	ldi	r16, 0x25	; 37
    5c2e:	28 e4       	ldi	r18, 0x48	; 72
    5c30:	4e ef       	ldi	r20, 0xFE	; 254
    5c32:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DisplayValue>

00005c36 <.LVL80>:
#else
     DisplayValue(diff_freq,-2,'H',32+2);
#endif
     lcd_data('z');
    5c36:	8a e7       	ldi	r24, 0x7A	; 122
    5c38:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00005c3c <.LVL81>:
     lcd_clear_line();
    5c3c:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

00005c40 <.LVL82>:
     key_pressed = wait_for_key_ms(2000);	// check key and rotary encoder
    5c40:	80 ed       	ldi	r24, 0xD0	; 208
    5c42:	97 e0       	ldi	r25, 0x07	; 7
    5c44:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <wait_for_key_ms>

00005c48 <.LVL83>:
#ifdef POWER_OFF
 #ifdef WITH_ROTARY_SWITCH
     if ((key_pressed != 0) || (rotary.incre > 0)) times = 0;	// reset counter, operator is active
    5c48:	81 11       	cpse	r24, r1
    5c4a:	45 c0       	rjmp	.+138    	; 0x5cd6 <.L37>

00005c4c <.Loc.228>:
    5c4c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rotary+0x6>

00005c50 <.LVL84>:
    5c50:	81 11       	cpse	r24, r1
    5c52:	84 c0       	rjmp	.+264    	; 0x5d5c <.L55>

00005c54 <.L45>:
        }
     } else {
        if (key_pressed > KEYPRESS_LENGTH_10ms) f_digit++; // longer key press select next frequency
     }
#ifdef WITH_ROTARY_SWITCH
     if (rotary.incre > FAST_ROTATION) break;		// fast rotation ends voltage measurement
    5c54:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rotary+0x6>
    5c58:	8b 30       	cpi	r24, 0x0B	; 11
    5c5a:	08 f0       	brcs	.+2      	; 0x5c5e <.Loc.232>

00005c5c <L0^A>:
    5c5c:	90 c0       	rjmp	.+288    	; 0x5d7e <.L46>

00005c5e <.Loc.232>:
     if (rotary.count >= 0) {
    5c5e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rotary+0x5>

00005c62 <.Loc.234>:
    5c62:	87 fd       	sbrc	r24, 7
    5c64:	7d c0       	rjmp	.+250    	; 0x5d60 <.L47>

00005c66 <.L57>:
        f_digit += rotary.count;		// increase the frequency number by rotary.count
     } else {
        f_digit += (Max_Digit + 1 + rotary.count);	// decrease the frequency by rotary.count
    5c66:	88 0d       	add	r24, r8

00005c68 <.LVL86>:
     }
#endif
     f_digit = f_digit % (Max_Digit + 1);
    5c68:	90 e0       	ldi	r25, 0x00	; 0

00005c6a <.Loc.238>:
    5c6a:	63 2d       	mov	r22, r3
    5c6c:	70 e0       	ldi	r23, 0x00	; 0
    5c6e:	6f 5f       	subi	r22, 0xFF	; 255
    5c70:	7f 4f       	sbci	r23, 0xFF	; 255

00005c72 <.Loc.239>:
    5c72:	0e 94 14 38 	call	0x7028	; 0x7028 <__divmodhi4>

00005c76 <.LVL87>:
    5c76:	8c 83       	std	Y+4, r24	; 0x04

00005c78 <.Loc.241>:
#ifdef POWER_OFF
     times = Pwr_mode_check(times);	// no time limit with DC_Pwr_mode
    5c78:	81 2f       	mov	r24, r17

00005c7a <.Loc.243>:
    5c7a:	92 da       	rcall	.-2780   	; 0x51a0 <Pwr_mode_check>

00005c7c <.LVL90>:
    5c7c:	18 2f       	mov	r17, r24

00005c7e <.LBE2>:
  for (times=0; times<240;) 
    5c7e:	80 3f       	cpi	r24, 0xF0	; 240
    5c80:	08 f0       	brcs	.+2      	; 0x5c84 <.L50>

00005c82 <L0^A>:
    5c82:	7d c0       	rjmp	.+250    	; 0x5d7e <.L46>

00005c84 <.L50>:
void make_frequency() {
    5c84:	22 2d       	mov	r18, r2
    5c86:	8c 80       	ldd	r8, Y+4	; 0x04
    5c88:	26 01       	movw	r4, r12
    5c8a:	37 01       	movw	r6, r14
    5c8c:	19 cf       	rjmp	.-462    	; 0x5ac0 <.L49>

00005c8e <.L51>:
     right = ((f_digit == Max_Digit) && (significant > 17));
    5c8e:	31 e0       	ldi	r19, 0x01	; 1
    5c90:	3c 83       	std	Y+4, r19	; 0x04

00005c92 <.Loc.249>:
        long_key_char = '<';	// the frequency string will move to the left by long key press
    5c92:	8c e3       	ldi	r24, 0x3C	; 60
    5c94:	5c cf       	rjmp	.-328    	; 0x5b4e <.L30>

00005c96 <.L31>:
     } else if (hperiod.w[1] >= 64) {
    5c96:	40 34       	cpi	r20, 0x40	; 64
    5c98:	51 05       	cpc	r21, r1
    5c9a:	30 f0       	brcs	.+12     	; 0x5ca8 <.L33>

00005c9c <.Loc.252>:
        TCCR1B = (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10); // divide clock by 256
    5c9c:	8c e0       	ldi	r24, 0x0C	; 12
    5c9e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

00005ca2 <.LVL95>:
        divider = 256;
    5ca2:	80 e0       	ldi	r24, 0x00	; 0
    5ca4:	91 e0       	ldi	r25, 0x01	; 1
    5ca6:	74 cf       	rjmp	.-280    	; 0x5b90 <.L32>

00005ca8 <.L33>:
     } else if (hperiod.w[1] >= 8) {
    5ca8:	48 30       	cpi	r20, 0x08	; 8
    5caa:	51 05       	cpc	r21, r1
    5cac:	30 f0       	brcs	.+12     	; 0x5cba <.L34>

00005cae <.Loc.258>:
        TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10); // divide clock by 64
    5cae:	8b e0       	ldi	r24, 0x0B	; 11
    5cb0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

00005cb4 <.LVL97>:
        divider = 64;
    5cb4:	80 e4       	ldi	r24, 0x40	; 64
    5cb6:	90 e0       	ldi	r25, 0x00	; 0
    5cb8:	6b cf       	rjmp	.-298    	; 0x5b90 <.L32>

00005cba <.L34>:
     } else if (hperiod.w[1] >= 1) {
    5cba:	89 2b       	or	r24, r25
    5cbc:	31 f0       	breq	.+12     	; 0x5cca <.L35>

00005cbe <.Loc.264>:
        TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10); // divide clock by 8
    5cbe:	8a e0       	ldi	r24, 0x0A	; 10
    5cc0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

00005cc4 <.LVL99>:
        divider = 8;
    5cc4:	88 e0       	ldi	r24, 0x08	; 8
    5cc6:	90 e0       	ldi	r25, 0x00	; 0
    5cc8:	63 cf       	rjmp	.-314    	; 0x5b90 <.L32>

00005cca <.L35>:
        TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10); // no clock divide
    5cca:	89 e0       	ldi	r24, 0x09	; 9
    5ccc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

00005cd0 <.LVL101>:
     divider = 1;
    5cd0:	81 e0       	ldi	r24, 0x01	; 1
    5cd2:	90 e0       	ldi	r25, 0x00	; 0
    5cd4:	5d cf       	rjmp	.-326    	; 0x5b90 <.L32>

00005cd6 <.L37>:
     if(key_pressed >= 200) break;	// more than 2.0 seconds
    5cd6:	88 3c       	cpi	r24, 0xC8	; 200
    5cd8:	08 f0       	brcs	.+2      	; 0x5cdc <.LVL103>

00005cda <L0^A>:
    5cda:	51 c0       	rjmp	.+162    	; 0x5d7e <.L46>

00005cdc <.LVL103>:
     if (key_pressed > 80) {	/* more than 0.8 seconds key press */
    5cdc:	81 35       	cpi	r24, 0x51	; 81
    5cde:	d8 f1       	brcs	.+118    	; 0x5d56 <.L41>

00005ce0 <.Loc.276>:
        if (right) {
    5ce0:	3c 81       	ldd	r19, Y+4	; 0x04
    5ce2:	31 15       	cp	r19, r1
    5ce4:	11 f1       	breq	.+68     	; 0x5d2a <.L42>

00005ce6 <.LVL104>:
           significant--;		// diplay one digit less
    5ce6:	4d 81       	ldd	r20, Y+5	; 0x05
    5ce8:	41 50       	subi	r20, 0x01	; 1
    5cea:	4d 83       	std	Y+5, r20	; 0x05

00005cec <.LVL105>:
           f_incre /= 10;		// 
    5cec:	69 81       	ldd	r22, Y+1	; 0x01
    5cee:	7b 2d       	mov	r23, r11
    5cf0:	8a 2d       	mov	r24, r10

00005cf2 <.LVL106>:
    5cf2:	99 2d       	mov	r25, r9
    5cf4:	2a e0       	ldi	r18, 0x0A	; 10
    5cf6:	30 e0       	ldi	r19, 0x00	; 0
    5cf8:	40 e0       	ldi	r20, 0x00	; 0
    5cfa:	50 e0       	ldi	r21, 0x00	; 0
    5cfc:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>
    5d00:	29 83       	std	Y+1, r18	; 0x01
    5d02:	b3 2e       	mov	r11, r19
    5d04:	a4 2e       	mov	r10, r20
    5d06:	95 2e       	mov	r9, r21

00005d08 <.Loc.284>:
           f_digit = (wish_freq / f_incre) % 10; // start with last digit
    5d08:	c7 01       	movw	r24, r14
    5d0a:	b6 01       	movw	r22, r12
    5d0c:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00005d10 <.Loc.286>:
    5d10:	ca 01       	movw	r24, r20
    5d12:	b9 01       	movw	r22, r18
    5d14:	2a e0       	ldi	r18, 0x0A	; 10
    5d16:	30 e0       	ldi	r19, 0x00	; 0
    5d18:	40 e0       	ldi	r20, 0x00	; 0
    5d1a:	50 e0       	ldi	r21, 0x00	; 0
    5d1c:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>

00005d20 <.Loc.287>:
    5d20:	6c 83       	std	Y+4, r22	; 0x04

00005d22 <.LVL107>:
           Max_Digit = 10;		// f_incre will be 10kHz or less, allways 0-9
    5d22:	2a e0       	ldi	r18, 0x0A	; 10
    5d24:	32 2e       	mov	r3, r18

00005d26 <.L43>:
        if (key_pressed > KEYPRESS_LENGTH_10ms) f_digit++; // longer key press select next frequency
    5d26:	10 e0       	ldi	r17, 0x00	; 0
    5d28:	ad cf       	rjmp	.-166    	; 0x5c84 <.L50>

00005d2a <.L42>:
           if (significant >= (16+6)) {
    5d2a:	5d 81       	ldd	r21, Y+5	; 0x05
    5d2c:	56 31       	cpi	r21, 0x16	; 22
    5d2e:	d8 f4       	brcc	.+54     	; 0x5d66 <.L53>

00005d30 <.Loc.295>:
           significant++;		// display one digit more
    5d30:	5f 5f       	subi	r21, 0xFF	; 255
    5d32:	5d 83       	std	Y+5, r21	; 0x05

00005d34 <.LVL110>:
           if (significant == (16+6)) Max_Digit = 21;
    5d34:	56 31       	cpi	r21, 0x16	; 22
    5d36:	11 f4       	brne	.+4      	; 0x5d3c <.L44>

00005d38 <.Loc.299>:
    5d38:	95 e1       	ldi	r25, 0x15	; 21
    5d3a:	39 2e       	mov	r3, r25

00005d3c <.L44>:
           f_incre *= 10;		// change next digit to the left
    5d3c:	aa e0       	ldi	r26, 0x0A	; 10
    5d3e:	b0 e0       	ldi	r27, 0x00	; 0
    5d40:	29 81       	ldd	r18, Y+1	; 0x01
    5d42:	3b 2d       	mov	r19, r11
    5d44:	4a 2d       	mov	r20, r10
    5d46:	59 2d       	mov	r21, r9

00005d48 <.LVL112>:
    5d48:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <__muluhisi3>
    5d4c:	69 83       	std	Y+1, r22	; 0x01
    5d4e:	b7 2e       	mov	r11, r23
    5d50:	a8 2e       	mov	r10, r24
    5d52:	99 2e       	mov	r9, r25

00005d54 <.LVL113>:
           continue;
    5d54:	e8 cf       	rjmp	.-48     	; 0x5d26 <.L43>

00005d56 <.L41>:
        if (key_pressed > KEYPRESS_LENGTH_10ms) f_digit++; // longer key press select next frequency
    5d56:	8b 30       	cpi	r24, 0x0B	; 11
    5d58:	08 f0       	brcs	.+2      	; 0x5d5c <.L55>

00005d5a <.Loc.307>:
    5d5a:	83 94       	inc	r8

00005d5c <.L55>:
    5d5c:	10 e0       	ldi	r17, 0x00	; 0
    5d5e:	7a cf       	rjmp	.-268    	; 0x5c54 <.L45>

00005d60 <.L47>:
        f_digit += (Max_Digit + 1 + rotary.count);	// decrease the frequency by rotary.count
    5d60:	8f 5f       	subi	r24, 0xFF	; 255
    5d62:	83 0d       	add	r24, r3
    5d64:	80 cf       	rjmp	.-256    	; 0x5c66 <.L57>

00005d66 <.L53>:
              Max_Digit = 10;
    5d66:	8a e0       	ldi	r24, 0x0A	; 10
    5d68:	38 2e       	mov	r3, r24

00005d6a <.LVL117>:
              f_digit = 1;		// start value = 1 Hz
    5d6a:	61 e0       	ldi	r22, 0x01	; 1
    5d6c:	6c 83       	std	Y+4, r22	; 0x04

00005d6e <.Loc.314>:
              f_incre = 1;		// increment with 1 Hz
    5d6e:	81 e0       	ldi	r24, 0x01	; 1
    5d70:	89 83       	std	Y+1, r24	; 0x01
    5d72:	b1 2c       	mov	r11, r1
    5d74:	a1 2c       	mov	r10, r1
    5d76:	91 2c       	mov	r9, r1

00005d78 <.Loc.315>:
              significant = 16+1;	// only one significant digit
    5d78:	91 e1       	ldi	r25, 0x11	; 17
    5d7a:	9d 83       	std	Y+5, r25	; 0x05
    5d7c:	d4 cf       	rjmp	.-88     	; 0x5d26 <.L43>

00005d7e <.L46>:
#endif
  } /* end for times */
  TCCR1B = 0;		// stop counter
    5d7e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

00005d82 <.Loc.319>:
  TCCR1A = 0;		// stop counter
    5d82:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>

00005d86 <.Loc.321>:
  ADC_DDR =  TXD_MSK;	// disconnect TP1 
    5d86:	17 b8       	out	0x07, r1	; 7

00005d88 <.Loc.323>:
  R_DDR = 0;		// switch resistor ports to Input
    5d88:	14 b8       	out	0x04, r1	; 4

00005d8a <.Loc.325>:
#if PROCESSOR_TYP == 1280
  DDRB  &= ~(1<<DDB6);	// disable output 
#else
  DDRB  &= ~(1<<DDB2);	// disable output 
    5d8a:	22 98       	cbi	0x04, 2	; 4

00005d8c <.LVL119>:
#endif

} /* end make frequency */
    5d8c:	25 96       	adiw	r28, 0x05	; 5
    5d8e:	e2 e1       	ldi	r30, 0x12	; 18
    5d90:	0c 94 a6 38 	jmp	0x714c	; 0x714c <__epilogue_restores__>

00005d94 <do_10bit_PWM>:
/* a short key press increase the duty cycle with 1%   */
/* a longer key press incrrase with 10%                */
/* a very long key press returns to menue              */
/* *************************************************** */
 #if (USE_PWM == 1)
void do_10bit_PWM() {
    5d94:	4f 92       	push	r4

00005d96 <.LCFI3>:
    5d96:	5f 92       	push	r5

00005d98 <.LCFI4>:
    5d98:	6f 92       	push	r6

00005d9a <.LCFI5>:
    5d9a:	7f 92       	push	r7

00005d9c <.LCFI6>:
    5d9c:	8f 92       	push	r8

00005d9e <.LCFI7>:
    5d9e:	9f 92       	push	r9

00005da0 <.LCFI8>:
    5da0:	af 92       	push	r10

00005da2 <.LCFI9>:
    5da2:	bf 92       	push	r11

00005da4 <.LCFI10>:
    5da4:	cf 92       	push	r12

00005da6 <.LCFI11>:
    5da6:	df 92       	push	r13

00005da8 <.LCFI12>:
    5da8:	ef 92       	push	r14

00005daa <.LCFI13>:
    5daa:	ff 92       	push	r15

00005dac <.LCFI14>:
    5dac:	1f 93       	push	r17

00005dae <.LCFI15>:
    5dae:	cf 93       	push	r28

00005db0 <.LCFI16>:
    5db0:	df 93       	push	r29

00005db2 <.LCFI17>:
  uint8_t key_pressed;
  uint8_t percent;		// requestet duty-cycle in %
  uint8_t old_perc;		// old duty-cycle in %
  unsigned int pwm_flip;	// value for counter to flip the state
  message_key_released(PWM_10bit_str);	// display PWM-Generator and wait for key released
    5db2:	88 ee       	ldi	r24, 0xE8	; 232
    5db4:	91 e0       	ldi	r25, 0x01	; 1
    5db6:	d8 d1       	rcall	.+944    	; 0x6168 <message_key_released>

00005db8 <.LVL120>:
  // OC1B is connected with 680 Ohm resistor to TP2 (middle test pin) 
  TCCR1A = (1<<COM1B1) | (0<<COM1B0) | (1<<WGM11) | (1<<WGM10); // fast PWM mode, mode 7: count to 10 bit
    5db8:	83 e2       	ldi	r24, 0x23	; 35
    5dba:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>

00005dbe <.Loc.336>:
  TIMSK1 = 0;		// no interrupt used
    5dbe:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>

00005dc2 <.Loc.338>:
  OCR1B	= 0xff;		// toggle OC1B at this count
    5dc2:	8f ef       	ldi	r24, 0xFF	; 255
    5dc4:	90 e0       	ldi	r25, 0x00	; 0
    5dc6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    5dca:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>

00005dce <.Loc.340>:
  TIFR1 = (1<<OCF1A) | (1<<OCF1A) | (1<<TOV1);	// reset interrupt flags
    5dce:	83 e0       	ldi	r24, 0x03	; 3
    5dd0:	86 bb       	out	0x16, r24	; 22

00005dd2 <.Loc.342>:
  TCCR1C = 0;
    5dd2:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>

00005dd6 <.Loc.344>:

  R_PORT = 0;		// set all resistor port outputs to GND
    5dd6:	15 b8       	out	0x05, r1	; 5

00005dd8 <.Loc.346>:
  #if PROCESSOR_TYP == 644
  R_DDR = (1<<PIN_RL1) | (1<<PIN_RL2) | (1<<PIN_RL3);		// set TP1, DDD4(TP2) and TP3 to output
  #else
  R_DDR = (1<<PIN_RL1) | (1<<PIN_RL3);		// set TP1 and TP3 to output
    5dd8:	81 e1       	ldi	r24, 0x11	; 17
    5dda:	84 b9       	out	0x04, r24	; 4

00005ddc <.Loc.348>:
  #endif
  ADC_PORT = TXD_VAL;
    5ddc:	18 b8       	out	0x08, r1	; 8

00005dde <.Loc.350>:
  ADC_DDR = (1<<TP1) | TXD_MSK;			//connect TP1 to GND
    5dde:	81 e0       	ldi	r24, 0x01	; 1
    5de0:	87 b9       	out	0x07, r24	; 7

00005de2 <.Loc.352>:
  #if PROCESSOR_TYP == 1280
  DDRB  |= (1<<DDB6);	// set output enable for OC1B
  #else
  DDRB  |= (1<<DDB2);	// set output enable
    5de2:	22 9a       	sbi	0x04, 2	; 4

00005de4 <.Loc.354>:
  #endif
  #ifdef PWM_SERVO
  TCCR1B = (1<<WGM13) | (1<<WGM12) | SERVO_START; // mode 15, clock divide by 8 or 64
  OCR1A = PWM_MAX_COUNT - 1;	// clock tics for 20 ms
  #else
  OCR1A = 1;		// highest frequency
    5de4:	81 e0       	ldi	r24, 0x01	; 1
    5de6:	90 e0       	ldi	r25, 0x00	; 0
    5de8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    5dec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>

00005df0 <.Loc.356>:
  TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10); // mode 7, no clock divide
    5df0:	89 e0       	ldi	r24, 0x09	; 9
    5df2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

00005df6 <.LVL121>:
  key_pressed = 0;
  old_perc = 0;
  percent = (SERVO_MAX + SERVO_MIN) / 2;	// set to middle
  #ifdef POWER_OFF
  uint8_t times;		// time limit
  for (times=0; times<240; ) 
    5df6:	d0 e0       	ldi	r29, 0x00	; 0

00005df8 <.Loc.365>:
  old_perc = 0;
    5df8:	f1 2c       	mov	r15, r1

00005dfa <.Loc.366>:
  percent = (SERVO_MAX + SERVO_MIN) / 2;	// set to middle
    5dfa:	c2 e3       	ldi	r28, 0x32	; 50

00005dfc <.Loc.367>:
  key_pressed = 0;
    5dfc:	10 e0       	ldi	r17, 0x00	; 0

00005dfe <.Loc.368>:
	   percent -= (SERVO_MAX - SERVO_MIN);		// reset near to mininum value
        }
  #ifdef PWM_SERVO
        pwm_flip = (((unsigned long)PWM_MAX_COUNT * percent) + 500) / 1000;
  #else
        pwm_flip = (((unsigned long)PWM_MAX_COUNT * percent) + 50) / 100;
    5dfe:	84 e6       	ldi	r24, 0x64	; 100
    5e00:	88 2e       	mov	r8, r24
    5e02:	91 2c       	mov	r9, r1
    5e04:	a1 2c       	mov	r10, r1
    5e06:	b1 2c       	mov	r11, r1

00005e08 <.Loc.369>:
	lcd_space();
	lcd_data('/');
	lcd_space();
	DisplayValue16(((unsigned long)PWM_MAX_COUNT * SERVO_DIV)/MHZ_CPU, -6,'s',3);
  #else
        DisplayValue16((((unsigned long)pwm_flip * 1000) + (PWM_MAX_COUNT/2)) / PWM_MAX_COUNT,-1,'%',5);
    5e08:	44 24       	eor	r4, r4
    5e0a:	4a 94       	dec	r4
    5e0c:	93 e0       	ldi	r25, 0x03	; 3
    5e0e:	59 2e       	mov	r5, r25
    5e10:	61 2c       	mov	r6, r1
    5e12:	71 2c       	mov	r7, r1

00005e14 <.L69>:
     if (percent != old_perc) {
    5e14:	cf 15       	cp	r28, r15
    5e16:	b1 f1       	breq	.+108    	; 0x5e84 <.L59>

00005e18 <.Loc.372>:
        if (percent >= SERVO_MAX) {
    5e18:	c4 36       	cpi	r28, 0x64	; 100
    5e1a:	08 f0       	brcs	.+2      	; 0x5e1e <.L60>

00005e1c <.Loc.374>:
	   percent -= (SERVO_MAX - SERVO_MIN);		// reset near to mininum value
    5e1c:	c4 56       	subi	r28, 0x64	; 100

00005e1e <.L60>:
        pwm_flip = (((unsigned long)PWM_MAX_COUNT * percent) + 50) / 100;
    5e1e:	2c 2f       	mov	r18, r28
    5e20:	30 e0       	ldi	r19, 0x00	; 0
    5e22:	af ef       	ldi	r26, 0xFF	; 255
    5e24:	b3 e0       	ldi	r27, 0x03	; 3
    5e26:	0e 94 65 38 	call	0x70ca	; 0x70ca <__umulhisi3>

00005e2a <.Loc.378>:
    5e2a:	6e 5c       	subi	r22, 0xCE	; 206
    5e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    5e2e:	8f 4f       	sbci	r24, 0xFF	; 255
    5e30:	9f 4f       	sbci	r25, 0xFF	; 255

00005e32 <.Loc.379>:
    5e32:	a5 01       	movw	r20, r10
    5e34:	94 01       	movw	r18, r8
    5e36:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>
    5e3a:	69 01       	movw	r12, r18
    5e3c:	7a 01       	movw	r14, r20

00005e3e <.LVL124>:
        OCR1B = pwm_flip;		// new percentage
    5e3e:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    5e42:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>

00005e46 <.Loc.382>:
        lcd_line2();		// goto line 2
    5e46:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_line2>

00005e4a <.LVL125>:
        DisplayValue16((((unsigned long)pwm_flip * 1000) + (PWM_MAX_COUNT/2)) / PWM_MAX_COUNT,-1,'%',5);
    5e4a:	a8 ee       	ldi	r26, 0xE8	; 232
    5e4c:	b3 e0       	ldi	r27, 0x03	; 3
    5e4e:	a7 01       	movw	r20, r14
    5e50:	96 01       	movw	r18, r12
    5e52:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <__muluhisi3>

00005e56 <.Loc.385>:
    5e56:	61 50       	subi	r22, 0x01	; 1
    5e58:	7e 4f       	sbci	r23, 0xFE	; 254
    5e5a:	8f 4f       	sbci	r24, 0xFF	; 255
    5e5c:	9f 4f       	sbci	r25, 0xFF	; 255

00005e5e <.Loc.386>:
    5e5e:	a3 01       	movw	r20, r6
    5e60:	92 01       	movw	r18, r4
    5e62:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>
    5e66:	da 01       	movw	r26, r20
    5e68:	c9 01       	movw	r24, r18

00005e6a <.Loc.387>:
    5e6a:	25 e0       	ldi	r18, 0x05	; 5
    5e6c:	45 e2       	ldi	r20, 0x25	; 37
    5e6e:	6f ef       	ldi	r22, 0xFF	; 255
    5e70:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

00005e74 <.LVL126>:
  #endif
        lcd_clear_line();
    5e74:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

00005e78 <.LVL127>:
        old_perc = percent;	// update the old duty cycle
        if (key_pressed > 40) {
    5e78:	19 32       	cpi	r17, 0x29	; 41
    5e7a:	18 f0       	brcs	.+6      	; 0x5e82 <.L61>

00005e7c <.Loc.392>:
           wait_about300ms();	// wait some time to release the button
    5e7c:	8c e3       	ldi	r24, 0x3C	; 60
    5e7e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <sleep_5ms>

00005e82 <.L61>:
  key_pressed = 0;
    5e82:	fc 2e       	mov	r15, r28

00005e84 <.L59>:
        }
     } /* end if percent != old_perc */
     key_pressed = wait_for_key_ms(1600);
    5e84:	80 e4       	ldi	r24, 0x40	; 64
    5e86:	96 e0       	ldi	r25, 0x06	; 6
    5e88:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <wait_for_key_ms>

00005e8c <.LVL130>:
    5e8c:	18 2f       	mov	r17, r24

00005e8e <.Loc.396>:
     if(key_pressed > 130) break;	// more than 1.3 seconds
    5e8e:	83 38       	cpi	r24, 0x83	; 131
    5e90:	b8 f0       	brcs	.+46     	; 0x5ec0 <.L62>

00005e92 <.L63>:
  #ifdef POWER_OFF
     times = Pwr_mode_check(times);	// no time limit with DC_Pwr_mode
  #endif
  } /* end for times */

  ADC_DDR =  TXD_MSK;	// disconnect TP1 
    5e92:	17 b8       	out	0x07, r1	; 7

00005e94 <.Loc.400>:
  TCCR1B = 0;		// stop counter
    5e94:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

00005e98 <.Loc.402>:
  TCCR1A = 0;		// stop counter
    5e98:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>

00005e9c <.Loc.404>:
  R_DDR = 0;		// switch resistor ports to Input
    5e9c:	14 b8       	out	0x04, r1	; 4

00005e9e <.Loc.406>:
  #if PROCESSOR_TYP == 1280
  DDRB  &= ~(1<<DDB6);	// disable output 
  #else
  DDRB  &= ~(1<<DDB2);	// disable output 
    5e9e:	22 98       	cbi	0x04, 2	; 4

00005ea0 <.Loc.408>:
  #endif
} /* end do_10bit_PWM */
    5ea0:	df 91       	pop	r29

00005ea2 <.LVL133>:
    5ea2:	cf 91       	pop	r28
    5ea4:	1f 91       	pop	r17

00005ea6 <.LVL134>:
    5ea6:	ff 90       	pop	r15

00005ea8 <.LVL135>:
    5ea8:	ef 90       	pop	r14
    5eaa:	df 90       	pop	r13
    5eac:	cf 90       	pop	r12
    5eae:	bf 90       	pop	r11
    5eb0:	af 90       	pop	r10
    5eb2:	9f 90       	pop	r9
    5eb4:	8f 90       	pop	r8
    5eb6:	7f 90       	pop	r7
    5eb8:	6f 90       	pop	r6
    5eba:	5f 90       	pop	r5
    5ebc:	4f 90       	pop	r4
    5ebe:	08 95       	ret

00005ec0 <.L62>:
     if (rotary.incre > FAST_ROTATION) break;		// fast rotation ends voltage measurement
    5ec0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rotary+0x6>

00005ec4 <.Loc.414>:
    5ec4:	9b 30       	cpi	r25, 0x0B	; 11
    5ec6:	28 f7       	brcc	.-54     	; 0x5e92 <.L63>

00005ec8 <.Loc.415>:
     if (rotary.count >= 0) {
    5ec8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rotary+0x5>

00005ecc <.Loc.417>:
        percent += rotary.count;		// increase the duty cycle by rotary.count
    5ecc:	cf 2d       	mov	r28, r15
    5ece:	c8 0f       	add	r28, r24

00005ed0 <.Loc.418>:
     if (rotary.count >= 0) {
    5ed0:	87 ff       	sbrs	r24, 7
    5ed2:	03 c0       	rjmp	.+6      	; 0x5eda <.L65>

00005ed4 <.Loc.419>:
        percent += ((SERVO_MAX-SERVO_MIN) + rotary.count);	// decrease the duty cycle by rotary.count
    5ed4:	8c 59       	subi	r24, 0x9C	; 156
    5ed6:	c8 2f       	mov	r28, r24
    5ed8:	cf 0d       	add	r28, r15

00005eda <.L65>:
     if (key_pressed > 50) {
    5eda:	13 33       	cpi	r17, 0x33	; 51
    5edc:	18 f0       	brcs	.+6      	; 0x5ee4 <.L66>

00005ede <.Loc.423>:
        percent += 10;		// duty cycle will be increased with 10
    5ede:	c6 5f       	subi	r28, 0xF6	; 246

00005ee0 <.L73>:
     if ((key_pressed > 0) || (rotary.incre > 0)) times = 0;	// reset the loop counter, operator is active
    5ee0:	d0 e0       	ldi	r29, 0x00	; 0

00005ee2 <.LVL139>:
    5ee2:	06 c0       	rjmp	.+12     	; 0x5ef0 <.L67>

00005ee4 <.L66>:
        if (key_pressed > 0) percent += 1;	// duty cycle will be increased with 1
    5ee4:	11 15       	cp	r17, r1
    5ee6:	11 f0       	breq	.+4      	; 0x5eec <.L68>

00005ee8 <.Loc.429>:
    5ee8:	cf 5f       	subi	r28, 0xFF	; 255

00005eea <.Loc.431>:
    5eea:	fa cf       	rjmp	.-12     	; 0x5ee0 <.L73>

00005eec <.L68>:
     if ((key_pressed > 0) || (rotary.incre > 0)) times = 0;	// reset the loop counter, operator is active
    5eec:	91 11       	cpse	r25, r1
    5eee:	f8 cf       	rjmp	.-16     	; 0x5ee0 <.L73>

00005ef0 <.L67>:
     times = Pwr_mode_check(times);	// no time limit with DC_Pwr_mode
    5ef0:	8d 2f       	mov	r24, r29
    5ef2:	56 d9       	rcall	.-3412   	; 0x51a0 <Pwr_mode_check>

00005ef4 <.LVL144>:
    5ef4:	d8 2f       	mov	r29, r24

00005ef6 <.LVL145>:
  for (times=0; times<240; ) 
    5ef6:	80 3f       	cpi	r24, 0xF0	; 240
    5ef8:	08 f4       	brcc	.+2      	; 0x5efc <L0^A+0x2>

00005efa <L0^A>:
    5efa:	8c cf       	rjmp	.-232    	; 0x5e14 <.L69>
    5efc:	ca cf       	rjmp	.-108    	; 0x5e92 <.L63>

00005efe <set_contrast>:
   #define MAX_CONTRAST 0xff
  #else
   /* for DOG-M the upper bit of contrast value is BOOSTER 0x40 */
   #define MAX_CONTRAST 0x7f
  #endif
void set_contrast(void) {
    5efe:	cf 93       	push	r28

00005f00 <.LCFI18>:
    5f00:	df 93       	push	r29

00005f02 <.LCFI19>:
uint8_t key_pressed;
uint8_t contrast;
  // set the contrast value
  message_key_released(CONTRAST_str);	// display Contrast and wait for key released
    5f02:	8e ea       	ldi	r24, 0xAE	; 174
    5f04:	91 e0       	ldi	r25, 0x01	; 1
    5f06:	30 d1       	rcall	.+608    	; 0x6168 <message_key_released>

00005f08 <.LVL146>:
  contrast = eeprom_read_byte(&EE_Volume_Value);
    5f08:	85 e1       	ldi	r24, 0x15	; 21
    5f0a:	93 e0       	ldi	r25, 0x03	; 3
    5f0c:	0e 94 15 39 	call	0x722a	; 0x722a <eeprom_read_byte>

00005f10 <.LVL147>:
    5f10:	c8 2f       	mov	r28, r24

00005f12 <.LVL148>:
  #ifdef POWER_OFF
  uint8_t times;
  for (times=0;times<240;)
    5f12:	d0 e0       	ldi	r29, 0x00	; 0

00005f14 <.L83>:
  #else
  while (1)                     /* wait endless without option POWER_OFF */
  #endif
  {
  #if ((LCD_ST_TYPE == 7565) || (LCD_ST_TYPE == 1306))
     lcd_command(CMD_SET_VOLUME_FIRST);		// 0x81 set  volume command
    5f14:	81 e8       	ldi	r24, 0x81	; 129
    5f16:	0e 94 0b 0b 	call	0x1616	; 0x1616 <lcd_command>

00005f1a <.LVL150>:
     lcd_command(contrast);			// value from 1 to 63 (0x3f) 
    5f1a:	8c 2f       	mov	r24, r28
    5f1c:	0e 94 0b 0b 	call	0x1616	; 0x1616 <lcd_command>

00005f20 <.LVL151>:
     lcd_command(CMD_SetIFOptions | MODE_8BIT | 0x09);	// 2-line / IS=1
     lcd_command(CMD1_PowerControl | ((contrast>>4)&0x07));	// booster on,off / set contrast C5:C4 
     lcd_command(CMD1_SetContrast | (contrast&0x0f));	// set contrast C3:0 
     lcd_command(CMD_SetIFOptions | MODE_8BIT | 0x08);	// 2-line / IS=0
  #endif
     lcd_line2();
    5f20:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_line2>

00005f24 <.LVL152>:
     DisplayValue16(contrast,0,' ',4);
    5f24:	24 e0       	ldi	r18, 0x04	; 4
    5f26:	40 e2       	ldi	r20, 0x20	; 32
    5f28:	60 e0       	ldi	r22, 0x00	; 0
    5f2a:	8c 2f       	mov	r24, r28
    5f2c:	90 e0       	ldi	r25, 0x00	; 0
    5f2e:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

00005f32 <.LVL153>:
     lcd_clear_line();		// clear to end of line
    5f32:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

00005f36 <.LVL154>:
     key_pressed = wait_for_key_ms(1600);
    5f36:	80 e4       	ldi	r24, 0x40	; 64
    5f38:	96 e0       	ldi	r25, 0x06	; 6
    5f3a:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <wait_for_key_ms>

00005f3e <.LVL155>:
  #ifdef POWER_OFF
   #ifdef WITH_ROTARY_SWITCH
     if ((key_pressed != 0) || (rotary.incre > 0)) times = 0;	// reset counter, operator is active
    5f3e:	81 11       	cpse	r24, r1
    5f40:	1c c0       	rjmp	.+56     	; 0x5f7a <.L75>

00005f42 <.Loc.455>:
    5f42:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rotary+0x6>
    5f46:	91 11       	cpse	r25, r1
    5f48:	1a c0       	rjmp	.+52     	; 0x5f7e <.L76>

00005f4a <.L77>:
   #endif
  #endif
     if(key_pressed >= 130) break;	// more than 1.3 seconds
  #ifdef WITH_ROTARY_SWITCH
     if (rotary.incre > FAST_ROTATION) break;		// fast rotation ends setting of contrast
     if (rotary.count >= 0) {
    5f4a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rotary+0x5>

00005f4e <.Loc.458>:
    5f4e:	97 fd       	sbrc	r25, 7
    5f50:	1c c0       	rjmp	.+56     	; 0x5f8a <.L79>

00005f52 <.L88>:
        contrast += rotary.count;		// increase the contrast by rotary.count
     } else {
        contrast += (MAX_CONTRAST + 1 + rotary.count);	// decrease the contrast by rotary.count
    5f52:	c9 0f       	add	r28, r25

00005f54 <.Loc.460>:
     }
  #endif
     if (key_pressed > 0) {
    5f54:	81 15       	cp	r24, r1
    5f56:	19 f0       	breq	.+6      	; 0x5f5e <.L81>

00005f58 <.Loc.462>:
        if (key_pressed > 40) {
    5f58:	89 32       	cpi	r24, 0x29	; 41
    5f5a:	c8 f0       	brcs	.+50     	; 0x5f8e <.L82>

00005f5c <.Loc.464>:
           contrast++; // longer key press select higher contrast value
    5f5c:	cf 5f       	subi	r28, 0xFF	; 255

00005f5e <.L81>:
        } else {
           contrast += MAX_CONTRAST;	// decrease the contrast 
        }
     }
     contrast &= MAX_CONTRAST;
    5f5e:	cf 77       	andi	r28, 0x7F	; 127

00005f60 <.Loc.468>:
  #ifdef POWER_OFF
     times = Pwr_mode_check(times);	// no time limit with DC_Pwr_mode
    5f60:	8d 2f       	mov	r24, r29

00005f62 <.LVL160>:
    5f62:	1e d9       	rcall	.-3524   	; 0x51a0 <Pwr_mode_check>

00005f64 <.LVL161>:
    5f64:	d8 2f       	mov	r29, r24

00005f66 <.LVL162>:
  for (times=0;times<240;)
    5f66:	80 3f       	cpi	r24, 0xF0	; 240
    5f68:	a8 f2       	brcs	.-86     	; 0x5f14 <.L83>

00005f6a <.L78>:
  #endif
  } /* end for times */

  eeprom_write_byte((uint8_t *)(&EE_Volume_Value), (int8_t)contrast);	// save contrast value
    5f6a:	6c 2f       	mov	r22, r28
    5f6c:	85 e1       	ldi	r24, 0x15	; 21
    5f6e:	93 e0       	ldi	r25, 0x03	; 3
    5f70:	0e 94 22 39 	call	0x7244	; 0x7244 <eeprom_write_byte>

00005f74 <.LVL164>:
}  /* end set_contrast */
    5f74:	df 91       	pop	r29
    5f76:	cf 91       	pop	r28

00005f78 <.LVL165>:
    5f78:	08 95       	ret

00005f7a <.L75>:
     if(key_pressed >= 130) break;	// more than 1.3 seconds
    5f7a:	82 38       	cpi	r24, 0x82	; 130
    5f7c:	b0 f7       	brcc	.-20     	; 0x5f6a <.L78>

00005f7e <.L76>:
     if (rotary.incre > FAST_ROTATION) break;		// fast rotation ends setting of contrast
    5f7e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rotary+0x6>
    5f82:	9b 30       	cpi	r25, 0x0B	; 11
    5f84:	90 f7       	brcc	.-28     	; 0x5f6a <.L78>
    5f86:	d0 e0       	ldi	r29, 0x00	; 0
    5f88:	e0 cf       	rjmp	.-64     	; 0x5f4a <.L77>

00005f8a <.L79>:
        contrast += (MAX_CONTRAST + 1 + rotary.count);	// decrease the contrast by rotary.count
    5f8a:	90 58       	subi	r25, 0x80	; 128
    5f8c:	e2 cf       	rjmp	.-60     	; 0x5f52 <.L88>

00005f8e <.L82>:
           contrast += MAX_CONTRAST;	// decrease the contrast 
    5f8e:	c1 58       	subi	r28, 0x81	; 129

00005f90 <.Loc.484>:
    5f90:	e6 cf       	rjmp	.-52     	; 0x5f5e <.L81>

00005f92 <set_big_cap_corr>:
/* set the correction value for big capacitor measurement */
/* *************************************************** */
 #if (USE_BIG_CAP_CORR == 1)
#define MIN_KORR (-20)
#define MAX_KORR 80
void set_big_cap_corr(void) {
    5f92:	0f 93       	push	r16

00005f94 <.LCFI20>:
    5f94:	1f 93       	push	r17

00005f96 <.LCFI21>:
    5f96:	cf 93       	push	r28

00005f98 <.LCFI22>:
    5f98:	df 93       	push	r29

00005f9a <.LCFI23>:
uint8_t key_pressed;
int8_t korr;
  // set the contrast value
  message_key_released(SetCapCorr_str);	// display Capacity correction and wait for key released
    5f9a:	87 ed       	ldi	r24, 0xD7	; 215
    5f9c:	91 e0       	ldi	r25, 0x01	; 1
    5f9e:	e4 d0       	rcall	.+456    	; 0x6168 <message_key_released>

00005fa0 <.LVL169>:
  korr = eeprom_read_byte((uint8_t *)&big_cap_corr);
    5fa0:	8a e1       	ldi	r24, 0x1A	; 26
    5fa2:	93 e0       	ldi	r25, 0x03	; 3
    5fa4:	0e 94 15 39 	call	0x722a	; 0x722a <eeprom_read_byte>

00005fa8 <.LVL170>:
    5fa8:	c8 2f       	mov	r28, r24

00005faa <.LVL171>:
  #ifdef POWER_OFF
  uint8_t times;
  for (times=0;times<240;)
    5faa:	d0 e0       	ldi	r29, 0x00	; 0

00005fac <.L101>:
  #else
  while (1)                     /* wait endless without option POWER_OFF */
  #endif
  {
     lcd_line2();
    5fac:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_line2>

00005fb0 <.LVL173>:
     if (korr < 0) {
    5fb0:	0c 2f       	mov	r16, r28
    5fb2:	0c 2e       	mov	r0, r28
    5fb4:	00 0c       	add	r0, r0
    5fb6:	11 0b       	sbc	r17, r17

00005fb8 <.Loc.497>:
    5fb8:	c7 ff       	sbrs	r28, 7
    5fba:	35 c0       	rjmp	.+106    	; 0x6026 <.L90>

00005fbc <.Loc.498>:
       lcd_minus();		// lcd_data('-');
    5fbc:	0e 94 b6 06 	call	0xd6c	; 0xd6c <lcd_minus>

00005fc0 <.LVL174>:
       DisplayValue16(-korr,-1,'%',3);
    5fc0:	23 e0       	ldi	r18, 0x03	; 3
    5fc2:	45 e2       	ldi	r20, 0x25	; 37
    5fc4:	6f ef       	ldi	r22, 0xFF	; 255
    5fc6:	88 27       	eor	r24, r24
    5fc8:	99 27       	eor	r25, r25
    5fca:	80 1b       	sub	r24, r16
    5fcc:	91 0b       	sbc	r25, r17

00005fce <.L104>:
     } else {
       DisplayValue16(korr,-1,'%',3);
    5fce:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

00005fd2 <.LVL175>:
     }
     lcd_clear_line();		// clear to end of line
    5fd2:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

00005fd6 <.LVL176>:
     key_pressed = wait_for_key_ms(1600);
    5fd6:	80 e4       	ldi	r24, 0x40	; 64
    5fd8:	96 e0       	ldi	r25, 0x06	; 6
    5fda:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <wait_for_key_ms>

00005fde <.LVL177>:
  #ifdef POWER_OFF
   #ifdef WITH_ROTARY_SWITCH
     if ((key_pressed != 0) || (rotary.incre > 0)) times = 0;	// reset counter, operator is active
    5fde:	81 11       	cpse	r24, r1
    5fe0:	27 c0       	rjmp	.+78     	; 0x6030 <.L92>

00005fe2 <.Loc.506>:
    5fe2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rotary+0x6>
    5fe6:	91 11       	cpse	r25, r1
    5fe8:	25 c0       	rjmp	.+74     	; 0x6034 <.L102>

00005fea <.L93>:
     if (key_pressed != 0)  times = 0;	// reset counter, operator is active
   #endif
  #endif
     if(key_pressed >= 130) break;	// more than 1.3 seconds
  #ifdef WITH_ROTARY_SWITCH
     if (rotary.incre > FAST_ROTATION) break;		// fast rotation ends setting of korr
    5fea:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rotary+0x6>
    5fee:	9b 30       	cpi	r25, 0x0B	; 11
    5ff0:	80 f4       	brcc	.+32     	; 0x6012 <.L95>

00005ff2 <.Loc.509>:
     korr += rotary.count;		// increase or decrease the korr by rotary.count
    5ff2:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rotary+0x5>
    5ff6:	c9 0f       	add	r28, r25

00005ff8 <.Loc.511>:
  #endif
     if (key_pressed > 0) {
    5ff8:	81 15       	cp	r24, r1
    5ffa:	19 f0       	breq	.+6      	; 0x6002 <.L97>

00005ffc <.Loc.513>:
        if (key_pressed > 40) {
    5ffc:	89 32       	cpi	r24, 0x29	; 41
    5ffe:	e0 f0       	brcs	.+56     	; 0x6038 <.L98>

00006000 <.Loc.515>:
           korr++; // longer key press select higher korr value
    6000:	cf 5f       	subi	r28, 0xFF	; 255

00006002 <.L97>:
        } else {
           korr--;	// decrease the korr 
        }
     }
     if (korr > MAX_KORR) korr -= (MAX_KORR - MIN_KORR + 1);
    6002:	c1 35       	cpi	r28, 0x51	; 81
    6004:	dc f0       	brlt	.+54     	; 0x603c <.L99>

00006006 <.Loc.519>:
    6006:	c5 56       	subi	r28, 0x65	; 101

00006008 <.L100>:
     if (korr < MIN_KORR) korr += (MAX_KORR - MIN_KORR + 1);
  #ifdef POWER_OFF
     times = Pwr_mode_check(times);	// no time limit with DC_Pwr_mode
    6008:	8d 2f       	mov	r24, r29

0000600a <.LVL182>:
    600a:	ca d8       	rcall	.-3692   	; 0x51a0 <Pwr_mode_check>

0000600c <.LVL183>:
    600c:	d8 2f       	mov	r29, r24

0000600e <.LVL184>:
  for (times=0;times<240;)
    600e:	80 3f       	cpi	r24, 0xF0	; 240
    6010:	68 f2       	brcs	.-102    	; 0x5fac <.L101>

00006012 <.L95>:
  #endif
  } /* end for times */

  eeprom_write_byte((uint8_t *)(&big_cap_corr), (int8_t)korr);	// save korr value
    6012:	6c 2f       	mov	r22, r28
    6014:	8a e1       	ldi	r24, 0x1A	; 26
    6016:	93 e0       	ldi	r25, 0x03	; 3
    6018:	0e 94 22 39 	call	0x7244	; 0x7244 <eeprom_write_byte>

0000601c <.LVL186>:
}	/* end set_big_cap_corr() */
    601c:	df 91       	pop	r29
    601e:	cf 91       	pop	r28

00006020 <.LVL187>:
    6020:	1f 91       	pop	r17
    6022:	0f 91       	pop	r16
    6024:	08 95       	ret

00006026 <.L90>:
       DisplayValue16(korr,-1,'%',3);
    6026:	23 e0       	ldi	r18, 0x03	; 3
    6028:	45 e2       	ldi	r20, 0x25	; 37
    602a:	6f ef       	ldi	r22, 0xFF	; 255
    602c:	c8 01       	movw	r24, r16
    602e:	cf cf       	rjmp	.-98     	; 0x5fce <.L104>

00006030 <.L92>:
     if(key_pressed >= 130) break;	// more than 1.3 seconds
    6030:	82 38       	cpi	r24, 0x82	; 130
    6032:	78 f7       	brcc	.-34     	; 0x6012 <.L95>

00006034 <.L102>:
     if ((key_pressed != 0) || (rotary.incre > 0)) times = 0;	// reset counter, operator is active
    6034:	d0 e0       	ldi	r29, 0x00	; 0
    6036:	d9 cf       	rjmp	.-78     	; 0x5fea <.L93>

00006038 <.L98>:
           korr--;	// decrease the korr 
    6038:	c1 50       	subi	r28, 0x01	; 1

0000603a <.Loc.536>:
    603a:	e3 cf       	rjmp	.-58     	; 0x6002 <.L97>

0000603c <.L99>:
     if (korr < MIN_KORR) korr += (MAX_KORR - MIN_KORR + 1);
    603c:	cc 3e       	cpi	r28, 0xEC	; 236
    603e:	24 f7       	brge	.-56     	; 0x6008 <.L100>

00006040 <.Loc.539>:
    6040:	cb 59       	subi	r28, 0x9B	; 155

00006042 <.Loc.541>:
    6042:	e2 cf       	rjmp	.-60     	; 0x6008 <.L100>

00006044 <do_menu>:
    if (func_number == MODE_FGEN) {
    6044:	81 30       	cpi	r24, 0x01	; 1
    6046:	11 f4       	brne	.+4      	; 0x604c <.L106>

00006048 <.Loc.545>:
       make_frequency();		// make some sample frequencies
    6048:	05 cd       	rjmp	.-1526   	; 0x5a54 <make_frequency>

0000604a <.LVL194>:
    if (func_number == MODE_CONTRAST) set_contrast();
    604a:	08 95       	ret

0000604c <.L106>:
    if (func_number == MODE_PWM) {
    604c:	82 30       	cpi	r24, 0x02	; 2
    604e:	11 f4       	brne	.+4      	; 0x6054 <.L108>

00006050 <.Loc.556>:
       do_10bit_PWM();		// generate 10bit PWM
    6050:	a1 ce       	rjmp	.-702    	; 0x5d94 <do_10bit_PWM>

00006052 <.LVL196>:
    if (func_number == MODE_SELFTEST) AutoCheck(0x11);	// Full selftest with calibration
    6052:	08 95       	ret

00006054 <.L108>:
    if (func_number == MODE_ESR) {
    6054:	83 30       	cpi	r24, 0x03	; 3
    6056:	11 f4       	brne	.+4      	; 0x605c <.L110>

00006058 <.Loc.564>:
       show_C_ESR();		// measure capacity and ESR at TP1 and TP3
    6058:	99 cc       	rjmp	.-1742   	; 0x598c <show_C_ESR>

0000605a <.LVL198>:
    if (func_number == MODE_OFF) {
    605a:	08 95       	ret

0000605c <.L110>:
    if (func_number == MODE_RESIS) {
    605c:	84 30       	cpi	r24, 0x04	; 4
    605e:	11 f4       	brne	.+4      	; 0x6064 <.L112>

00006060 <.Loc.574>:
       show_Resis13();		// measure resistor at TP1 and TP3
    6060:	a9 c8       	rjmp	.-3758   	; 0x51b4 <show_Resis13>

00006062 <.LVL200>:
    if (func_number == MODE_SHOW) {
    6062:	08 95       	ret

00006064 <.L112>:
    if (func_number == MODE_CAP13) {
    6064:	85 30       	cpi	r24, 0x05	; 5
    6066:	21 f4       	brne	.+8      	; 0x6070 <.L114>

00006068 <.Loc.582>:
       lcd_clear();
    6068:	0e 94 14 0b 	call	0x1628	; 0x1628 <lcd_clear>

0000606c <.LVL202>:
       show_Cap13();		// measure capacitor at TP1 and TP3
    606c:	ec c8       	rjmp	.-3624   	; 0x5246 <show_Cap13>

0000606e <.LVL203>:
    if (func_number == MODE_BIG_CAP_CORR) {
    606e:	08 95       	ret

00006070 <.L114>:
    6070:	86 30       	cpi	r24, 0x06	; 6
    6072:	11 f4       	brne	.+4      	; 0x6078 <.L115>

00006074 <.Loc.587>:
       set_big_cap_corr();
    6074:	8e cf       	rjmp	.-228    	; 0x5f92 <set_big_cap_corr>

00006076 <.LVL205>:
    if (func_number == MODE_OFF) {
    6076:	08 95       	ret

00006078 <.L115>:
    if (func_number == MODE_SELFTEST) AutoCheck(0x11);	// Full selftest with calibration
    6078:	87 30       	cpi	r24, 0x07	; 7
    607a:	59 f4       	brne	.+22     	; 0x6092 <.L116>

0000607c <.Loc.594>:
    607c:	81 e1       	ldi	r24, 0x11	; 17

0000607e <.LVL207>:
    607e:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <AutoCheck>

00006082 <.LVL208>:
    if (func_number == MODE_SHOW) {
    6082:	08 95       	ret

00006084 <.L118>:
    if (func_number == MODE_CONTRAST) set_contrast();
    6084:	3c cf       	rjmp	.-392    	; 0x5efe <set_contrast>

00006086 <.LVL210>:
    if (func_number == MODE_OFF) {
    6086:	08 95       	ret

00006088 <.L117>:
    6088:	8a 30       	cpi	r24, 0x0A	; 10
    608a:	49 f4       	brne	.+18     	; 0x609e <.L105>

0000608c <.Loc.603>:
       switch_tester_off();		//switch off power
    608c:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <switch_tester_off>

00006090 <.LVL212>:
}
    6090:	08 95       	ret

00006092 <.L116>:
    if (func_number == MODE_CONTRAST) set_contrast();
    6092:	88 30       	cpi	r24, 0x08	; 8
    6094:	b9 f3       	breq	.-18     	; 0x6084 <.L118>

00006096 <.Loc.608>:
    if (func_number == MODE_SHOW) {
    6096:	89 30       	cpi	r24, 0x09	; 9
    6098:	b9 f7       	brne	.-18     	; 0x6088 <.L117>

0000609a <.Loc.610>:
       ShowData();			// Show Calibration Data
    609a:	12 c2       	rjmp	.+1060   	; 0x64c0 <ShowData>

0000609c <.LVL214>:
    if (func_number == MODE_OFF) {
    609c:	08 95       	ret

0000609e <.L105>:
}
    609e:	08 95       	ret

000060a0 <function_menu>:
uint8_t function_menu() {
    60a0:	ff 92       	push	r15

000060a2 <.LCFI24>:
    60a2:	0f 93       	push	r16

000060a4 <.LCFI25>:
    60a4:	1f 93       	push	r17

000060a6 <.LCFI26>:
    60a6:	cf 93       	push	r28

000060a8 <.LCFI27>:
    60a8:	df 93       	push	r29

000060aa <.LCFI28>:
  message_key_released(SELECTION_str);
    60aa:	8a e2       	ldi	r24, 0x2A	; 42
    60ac:	92 e0       	ldi	r25, 0x02	; 2
    60ae:	5c d0       	rcall	.+184    	; 0x6168 <message_key_released>

000060b0 <.LBB5>:
  for (ll=0;ll<((MODE_LAST+1)*10);ll++) 
    60b0:	d0 e0       	ldi	r29, 0x00	; 0

000060b2 <.Loc.623>:
  func_number = 0;
    60b2:	c0 e0       	ldi	r28, 0x00	; 0

000060b4 <.L121>:
     mm = 0;
    60b4:	0a e0       	ldi	r16, 0x0A	; 10
    60b6:	0c 0f       	add	r16, r28

000060b8 <.Loc.628>:
    60b8:	10 e0       	ldi	r17, 0x00	; 0

000060ba <.L126>:
        lcd_set_cursor((mm+1)*PAGES_PER_LINE,0);
    60ba:	f1 2e       	mov	r15, r17
    60bc:	1f 5f       	subi	r17, 0xFF	; 255

000060be <.LVL220>:
    60be:	60 e0       	ldi	r22, 0x00	; 0
    60c0:	81 2f       	mov	r24, r17
    60c2:	88 0f       	add	r24, r24
    60c4:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <lcd_set_cursor>

000060c8 <.LVL221>:
        if (mm == MENU_MIDDLE) {
    60c8:	81 e0       	ldi	r24, 0x01	; 1
    60ca:	f8 12       	cpse	r15, r24
    60cc:	46 c0       	rjmp	.+140    	; 0x615a <.L123>

000060ce <.Loc.634>:
           lcd_data('>');				// put a '>' marker to row 1 of line 4
    60ce:	8e e3       	ldi	r24, 0x3E	; 62
    60d0:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

000060d4 <.L124>:
        if (f_nr > MODE_LAST) f_nr -= (MODE_LAST +1);
    60d4:	85 ef       	ldi	r24, 0xF5	; 245
    60d6:	80 0f       	add	r24, r16

000060d8 <.Loc.638>:
    60d8:	0b 30       	cpi	r16, 0x0B	; 11
    60da:	08 f4       	brcc	.+2      	; 0x60de <.L125>

000060dc <.Loc.639>:
        f_nr = func_number + MODE_LAST + 1 - MENU_MIDDLE + mm;
    60dc:	80 2f       	mov	r24, r16

000060de <.L125>:
        message2line(f_nr);	// show function for this line
    60de:	18 dc       	rcall	.-2000   	; 0x5910 <message2line>

000060e0 <.LVL224>:
     } while (++mm < MENU_LINES);
    60e0:	0f 5f       	subi	r16, 0xFF	; 255
    60e2:	13 30       	cpi	r17, 0x03	; 3
    60e4:	51 f7       	brne	.-44     	; 0x60ba <.L126>

000060e6 <.Loc.643>:
     ii = wait_for_key_ms(SHORT_WAIT_TIME);	// wait about 5 seconds
    60e6:	80 e4       	ldi	r24, 0x40	; 64
    60e8:	9f e1       	ldi	r25, 0x1F	; 31
    60ea:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <wait_for_key_ms>

000060ee <.LVL225>:
     if (ii > 0) ll = 0;			// reset timer, operator present
    60ee:	81 11       	cpse	r24, r1

000060f0 <.Loc.647>:
    60f0:	d0 e0       	ldi	r29, 0x00	; 0

000060f2 <.LVL226>:
     if (DC_Pwr_mode == 1) ll = 0;
    60f2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <DC_Pwr_mode>
    60f6:	91 30       	cpi	r25, 0x01	; 1
    60f8:	09 f4       	brne	.+2      	; 0x60fc <.L128>

000060fa <.Loc.650>:
    60fa:	d0 e0       	ldi	r29, 0x00	; 0

000060fc <.L128>:
     if ((ii >= MIN_SELECT_TIME) || ((rotary_switch_present != 0) && (ii > 0)))
    60fc:	82 33       	cpi	r24, 0x32	; 50
    60fe:	30 f4       	brcc	.+12     	; 0x610c <.L129>

00006100 <.Loc.653>:
    6100:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <rotary_switch_present>
    6104:	91 15       	cp	r25, r1
    6106:	71 f0       	breq	.+28     	; 0x6124 <.L130>

00006108 <.Loc.654>:
    6108:	81 15       	cp	r24, r1
    610a:	59 f0       	breq	.+22     	; 0x6122 <.L131>

0000610c <.L129>:
        if (func_number == MODE_TRANS) return 0;		// return to TransistorTester
    610c:	c1 15       	cp	r28, r1
    610e:	d1 f0       	breq	.+52     	; 0x6144 <.L146>

00006110 <.Loc.657>:
        do_menu(func_number);
    6110:	8c 2f       	mov	r24, r28

00006112 <.LVL228>:
    6112:	98 df       	rcall	.-208    	; 0x6044 <do_menu>

00006114 <.LVL229>:
        rotary.incre = 0;	// reset all rotary information
    6114:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rotary+0x6>

00006118 <.Loc.662>:
        rotary.count = 0;
    6118:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rotary+0x5>

0000611c <.Loc.664>:
        message_key_released(SELECTION_str);	//write Line 1 with Selection:
    611c:	8a e2       	ldi	r24, 0x2A	; 42
    611e:	92 e0       	ldi	r25, 0x02	; 2
    6120:	23 d0       	rcall	.+70     	; 0x6168 <message_key_released>

00006122 <.L131>:
     ii = wait_for_key_ms(SHORT_WAIT_TIME);	// wait about 5 seconds
    6122:	80 e0       	ldi	r24, 0x00	; 0

00006124 <.L130>:
     if (rotary.incre >= FAST_ROTATION) break; // to much rotation
    6124:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rotary+0x6>
    6128:	9a 30       	cpi	r25, 0x0A	; 10
    612a:	60 f4       	brcc	.+24     	; 0x6144 <.L146>

0000612c <.Loc.668>:
     if (rotary.count != 0) ll = 0; 	// someone is working, reset timer
    612c:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rotary+0x5>

00006130 <.Loc.670>:
    6130:	91 15       	cp	r25, r1
    6132:	11 f0       	breq	.+4      	; 0x6138 <.L134>

00006134 <.LVL232>:
     if (rotary.count >= 0) {
    6134:	ac f0       	brlt	.+42     	; 0x6160 <.L135>
    6136:	d0 e0       	ldi	r29, 0x00	; 0

00006138 <.L134>:
        func_number += rotary.count;	// function number is increased by rotary steps
    6138:	c9 0f       	add	r28, r25

0000613a <.L136>:
     if (ii > 0) func_number++;	// increase the function number with key press
    613a:	81 11       	cpse	r24, r1

0000613c <.Loc.678>:
    613c:	cf 5f       	subi	r28, 0xFF	; 255

0000613e <.LBE6>:
  for (ll=0;ll<((MODE_LAST+1)*10);ll++) 
    613e:	df 5f       	subi	r29, 0xFF	; 255

00006140 <.LVL236>:
    6140:	de 36       	cpi	r29, 0x6E	; 110
    6142:	31 f4       	brne	.+12     	; 0x6150 <.L138>

00006144 <.L146>:
 } // end function_menu()
    6144:	80 e0       	ldi	r24, 0x00	; 0

00006146 <.LVL237>:
    6146:	cd b7       	in	r28, 0x3d	; 61
    6148:	de b7       	in	r29, 0x3e	; 62

0000614a <.LVL238>:
    614a:	e5 e0       	ldi	r30, 0x05	; 5
    614c:	0c 94 b3 38 	jmp	0x7166	; 0x7166 <.Loc.13>

00006150 <.L138>:
     if (func_number > MODE_LAST) func_number -= (MODE_LAST + 1);
    6150:	cb 30       	cpi	r28, 0x0B	; 11
    6152:	08 f4       	brcc	.+2      	; 0x6156 <.Loc.688>

00006154 <L0^A>:
    6154:	af cf       	rjmp	.-162    	; 0x60b4 <.L121>

00006156 <.Loc.688>:
    6156:	cb 50       	subi	r28, 0x0B	; 11

00006158 <.Loc.690>:
    6158:	ad cf       	rjmp	.-166    	; 0x60b4 <.L121>

0000615a <.L123>:
           lcd_space();				// put a blank to 1. row of line 2
    615a:	0e 94 b4 06 	call	0xd68	; 0xd68 <lcd_space>

0000615e <.LVL242>:
    615e:	ba cf       	rjmp	.-140    	; 0x60d4 <.L124>

00006160 <.L135>:
        func_number += (MODE_LAST + 1 + rotary.count);	// function is decreased by rotary steps
    6160:	95 5f       	subi	r25, 0xF5	; 245
    6162:	c9 0f       	add	r28, r25

00006164 <.Loc.694>:
    6164:	d0 e0       	ldi	r29, 0x00	; 0
    6166:	e9 cf       	rjmp	.-46     	; 0x613a <.L136>

00006168 <message_key_released>:

//=================================================================
// Clear display, show Message XX_str and wait for key release

#if FLASHEND > 0x3fff
void message_key_released(const unsigned char XX_str[]) {
    6168:	cf 93       	push	r28

0000616a <.LCFI0>:
    616a:	df 93       	push	r29

0000616c <.LCFI1>:
    616c:	d8 2f       	mov	r29, r24
    616e:	c9 2f       	mov	r28, r25

00006170 <.Loc.2>:
//  lcd_clear_line();
//  lcd_line2();
//  lcd_clear_line();
//  lcd_line1();
//#else
  lcd_clear();
    6170:	0e 94 14 0b 	call	0x1628	; 0x1628 <lcd_clear>

00006174 <.LVL1>:
//#endif
  lcd_MEM2_string(XX_str);		// display MEM2_str in row 1
    6174:	8d 2f       	mov	r24, r29
    6176:	9c 2f       	mov	r25, r28
    6178:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

0000617c <.LVL2>:
    617c:	c4 e6       	ldi	r28, 0x64	; 100

0000617e <.L3>:
  for (times=0;times<100;times++) {
     wait_about10ms();
    617e:	0e 94 c4 07 	call	0xf88	; 0xf88 <sleep_10ms>

00006182 <.LVL4>:
    if((RST_PIN_REG & (1<<RST_PIN))) break;	// key is released
    6182:	4f 99       	sbic	0x09, 7	; 9
    6184:	02 c0       	rjmp	.+4      	; 0x618a <.L2>

00006186 <.LVL5>:
  for (times=0;times<100;times++) {
    6186:	ca 95       	dec	r28

00006188 <.LVL6>:
    6188:	d1 f7       	brne	.-12     	; 0x617e <.L3>

0000618a <.L2>:
  }
  lcd_line2();
    618a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_line2>

0000618e <.LVL8>:
  return;
} /* end message_key_released() */
    618e:	df 91       	pop	r29
    6190:	cf 91       	pop	r28
    6192:	08 95       	ret

00006194 <__vector_16>:
/* timer 0 Overflow interrupt                                   */
/* timer 0 count up to 0xff, then OV occur. update upper part   */
/* to build the total counts within one second or               */
/* to build the total counts within the specified pin changes.  */
/* ************************************************************ */
ISR(TIMER0_OVF_vect, ISR_BLOCK) {
    6194:	8f 93       	push	r24
    6196:	8f b7       	in	r24, 0x3f	; 63
    6198:	8f 93       	push	r24
    619a:	9f 93       	push	r25

0000619c <.LCFI1>:
    619c:	af 93       	push	r26

0000619e <.LCFI2>:
    619e:	bf 93       	push	r27

000061a0 <.LCFI3>:
  sei();		// set interrupt enable
    61a0:	78 94       	sei

000061a2 <.Loc.205>:
  ext_freq.dw += 256;	// add 256 clock tics to the total time
    61a2:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <ext_freq>
    61a6:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <ext_freq+0x1>
    61aa:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <ext_freq+0x2>
    61ae:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <ext_freq+0x3>
    61b2:	9f 5f       	subi	r25, 0xFF	; 255
    61b4:	af 4f       	sbci	r26, 0xFF	; 255
    61b6:	bf 4f       	sbci	r27, 0xFF	; 255
    61b8:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <ext_freq>
    61bc:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <ext_freq+0x1>
    61c0:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <ext_freq+0x2>
    61c4:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <ext_freq+0x3>

000061c8 <.Loc.207>:
}
    61c8:	bf 91       	pop	r27
    61ca:	af 91       	pop	r26
    61cc:	9f 91       	pop	r25
    61ce:	8f 91       	pop	r24
    61d0:	8f bf       	out	0x3f, r24	; 63
    61d2:	8f 91       	pop	r24
    61d4:	18 95       	reti

000061d6 <__vector_11>:
/* ************************************************************ */
/* Timer 1 Compare A interrupts with count 1 to start counter 0 */
/* This is defined as start of the measurement second.          */
/* ************************************************************ */
// this handler is also used by SamplingADC.S, where simply any dummy interrupt handler is usable; but if timing of this handler changes, need to adapt SamplingADC.S as well
ISR(TIMER1_COMPA_vect, ISR_BLOCK) {
    61d6:	8f 93       	push	r24

000061d8 <.Loc.209>:
#if PROCESSOR_TYP == 1280
  TCCR3B = (1<<CS32) | (1<<CS31) | (0<<CS30);	// start the counter 3 with external input T3
#else
  TCCR0B = (1<<CS02) | (1<<CS01) | (0<<CS00);	// now start the counter 0 with external input T0
    61d8:	86 e0       	ldi	r24, 0x06	; 6
    61da:	85 bd       	out	0x25, r24	; 37

000061dc <.Loc.211>:
#endif
}
    61dc:	8f 91       	pop	r24
    61de:	18 95       	reti

000061e0 <__vector_12>:

#ifdef WITH_MENU
/* ************************************************************ */
/* Timer 1 Compare B interrupt after 1 second to stop counter 0 */
/* ************************************************************ */
ISR(TIMER1_COMPB_vect, ISR_BLOCK) {
    61e0:	1f 92       	push	r1
    61e2:	1f b6       	in	r1, 0x3f	; 63
    61e4:	1f 92       	push	r1
    61e6:	11 24       	eor	r1, r1

000061e8 <.Loc.213>:
  // The TIMER1_COMPB_vect uses one push and one ldi more than this interrupt.
  // Therefore we stop timer 1 first and ajust to same time with wdt_reset();
  wdt_reset();			// for adjusting to same time as TIMER1_COMPB_vect
    61e8:	a8 95       	wdr

000061ea <.Loc.214>:
  TCCR1B = 0;			// stop counter 1
    61ea:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

000061ee <.Loc.216>:
#if PROCESSOR_TYP == 1280
  TCCR3B = 0;			// stop counter 3
#else
  TCCR0B = 0;			// stop counter 0
    61ee:	15 bc       	out	0x25, r1	; 37

000061f0 <.Loc.218>:
#endif
}
    61f0:	1f 90       	pop	r1
    61f2:	1f be       	out	0x3f, r1	; 63
    61f4:	1f 90       	pop	r1
    61f6:	18 95       	reti

000061f8 <__vector_5>:
/* full periods  (no half period)				*/
/* ************************************************************ */


ISR(PCINTx_vect, ISR_BLOCK)
{
    61f8:	1f 92       	push	r1
    61fa:	1f b6       	in	r1, 0x3f	; 63
    61fc:	1f 92       	push	r1
    61fe:	11 24       	eor	r1, r1
    6200:	2f 93       	push	r18
    6202:	3f 93       	push	r19

00006204 <.LCFI4>:
    6204:	8f 93       	push	r24

00006206 <.LCFI5>:
    6206:	9f 93       	push	r25

00006208 <.LCFI6>:
  if (pinchange_count == 0) {
    6208:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <pinchange_count>
    620c:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <pinchange_count+0x1>
    6210:	89 2b       	or	r24, r25
    6212:	11 f4       	brne	.+4      	; 0x6218 <.L39>

00006214 <.Loc.222>:
#if PROCESSOR_TYP == 1280
     TCCR3B = (1<<CS30);	// start the counter 3 with full CPU clock
#else
     TCCR0B = (1<<CS00);	// start the counter 0 with full CPU clock
    6214:	81 e0       	ldi	r24, 0x01	; 1
    6216:	85 bd       	out	0x25, r24	; 37

00006218 <.L39>:
#endif
  }
  if (pinchange_count >= pinchange_max) {
    6218:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <pinchange_count>
    621c:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <pinchange_count+0x1>
    6220:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <pinchange_max>
    6224:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <pinchange_max+0x1>
    6228:	28 17       	cp	r18, r24
    622a:	39 07       	cpc	r19, r25
    622c:	30 f0       	brcs	.+12     	; 0x623a <.L40>

0000622e <.Loc.226>:
     // stop the counter 3, when maximum value has reached.
     TCCR3B = 0;		// stop counter 3
     PCMSK_FREQ &= ~(1<<PCINT_FREQ);	// disable int6
#else
     // stop the counter 0, when maximum value has reached.
     TCCR0B = 0;		// stop counter 0
    622e:	15 bc       	out	0x25, r1	; 37

00006230 <.Loc.228>:
     PCMSK_FREQ &= ~(1<<PCINT_FREQ);	// disable monitoring of PD4 PCINT20 or PB0 PCINT8 pin change
    6230:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
    6234:	8f 7e       	andi	r24, 0xEF	; 239
    6236:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>

0000623a <.L40>:
#endif
//     PCICR &= ~(1<<PCI_ENABLE_BIT);	// disable the interrupt
  }
  pinchange_count++;
    623a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <pinchange_count>
    623e:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <pinchange_count+0x1>
    6242:	01 96       	adiw	r24, 0x01	; 1
    6244:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <pinchange_count+0x1>
    6248:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <pinchange_count>

0000624c <.Loc.232>:
}
    624c:	9f 91       	pop	r25
    624e:	8f 91       	pop	r24
    6250:	3f 91       	pop	r19
    6252:	2f 91       	pop	r18
    6254:	1f 90       	pop	r1
    6256:	1f be       	out	0x3f, r1	; 63
    6258:	1f 90       	pop	r1
    625a:	18 95       	reti

0000625c <ReadBigCap>:
#include "Transistortester.h"


#ifdef WITH_MENU
//=================================================================
void ReadBigCap(uint8_t HighPin, uint8_t LowPin) {
    625c:	a0 e0       	ldi	r26, 0x00	; 0
    625e:	b0 e0       	ldi	r27, 0x00	; 0
    6260:	e3 e3       	ldi	r30, 0x33	; 51
    6262:	f1 e3       	ldi	r31, 0x31	; 49
    6264:	5e c7       	rjmp	.+3772   	; 0x7122 <.Loc.7>

00006266 <.L1^B1>:
    6266:	18 2f       	mov	r17, r24
    6268:	06 2f       	mov	r16, r22

0000626a <.LBB2>:
//#endif

#if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
  LoADC = pgm_read_byte((&PinRLRHADCtab[6])+LowPin-TP_MIN) | TXD_MSK;
#else
  LoADC = pgm_read_byte((&PinRLRHADCtab[3])+LowPin-TP_MIN) | TXD_MSK;
    626a:	26 2f       	mov	r18, r22
    626c:	30 e0       	ldi	r19, 0x00	; 0

0000626e <.Loc.10>:
    626e:	f9 01       	movw	r30, r18
    6270:	e2 5b       	subi	r30, 0xB2	; 178
    6272:	fd 4f       	sbci	r31, 0xFD	; 253

00006274 <.LVL2>:
    6274:	f4 90       	lpm	r15, Z

00006276 <.LBB3>:
#endif
  HiPinR_L = pgm_read_byte(&PinRLRHADCtab[HighPin-TP_MIN]);	//R_L mask for HighPin R_L load
    6276:	e8 2f       	mov	r30, r24

00006278 <.LVL4>:
    6278:	f0 e0       	ldi	r31, 0x00	; 0
    627a:	e5 5b       	subi	r30, 0xB5	; 181
    627c:	fd 4f       	sbci	r31, 0xFD	; 253
    627e:	c4 91       	lpm	r28, Z

00006280 <.LBB4>:
  LoPinR_L = pgm_read_byte(&PinRLRHADCtab[LowPin-TP_MIN]);	//R_L mask for LowPin R_L load
    6280:	f9 01       	movw	r30, r18
    6282:	e5 5b       	subi	r30, 0xB5	; 181
    6284:	fd 4f       	sbci	r31, 0xFD	; 253

00006286 <.LVL6>:
    6286:	d4 91       	lpm	r29, Z

00006288 <.LBE4>:

#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
    6288:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <cap+0xd>
    628c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <cap+0xc>

00006290 <.Loc.30>:
#endif
  cap.cval = 0;				// set capacity value to zero
    6290:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <cap>
    6294:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <cap+0x1>
    6298:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <cap+0x2>
    629c:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <cap+0x3>

000062a0 <.Loc.32>:
  cap.cpre = -9;			//default unit is nF
    62a0:	87 ef       	ldi	r24, 0xF7	; 247

000062a2 <.LVL8>:
    62a2:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <cap+0x12>

000062a6 <.Loc.35>:
  EntladePins();			// discharge capacitor
    62a6:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <EntladePins>

000062aa <.LVL9>:
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    62aa:	18 b8       	out	0x08, r1	; 8

000062ac <.Loc.38>:
// The polarity of residual voltage of the capacitor depends on the measurement
// history.   Because the ADC can not measure a negative Voltage,
// the LowPin voltage is shifted to 139mV with the R_L resistor.
// The voltage of the capacitor is build as difference between HighPin and LowPin voltage.
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    62ac:	f7 b8       	out	0x07, r15	; 7

000062ae <.Loc.40>:
  R_DDR = LoPinR_L;			// switch R_L Port of LoPin to VCC
    62ae:	d4 b9       	out	0x04, r29	; 4

000062b0 <.Loc.42>:
  R_PORT = LoPinR_L;			// switch R_L Port of LoPin to VCC
    62b0:	d5 b9       	out	0x05, r29	; 5

000062b2 <.Loc.44>:
  residual_voltage = ReadADC(HighPin) - ReadADC(LowPin);	// capacitor voltage before any load 
    62b2:	81 2f       	mov	r24, r17
    62b4:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

000062b8 <.LVL10>:
    62b8:	5c 01       	movw	r10, r24

000062ba <.Loc.46>:
    62ba:	80 2f       	mov	r24, r16
    62bc:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

000062c0 <.LVL11>:
  R_DDR = 0;				// switch all R_L Port to input
    62c0:	14 b8       	out	0x04, r1	; 4

000062c2 <.LVL12>:
  cap_voltage1 = 0;			// preset to prevent compiler warning
  
  ovcnt16 = 0;
    62c2:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <ovcnt16+0x1>
    62c6:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ovcnt16>

000062ca <.Loc.52>:
  cap_voltage1 = 0;			// preset to prevent compiler warning
    62ca:	20 e0       	ldi	r18, 0x00	; 0
    62cc:	30 e0       	ldi	r19, 0x00	; 0

000062ce <.Loc.54>:
#define MAX_LOAD_TIME 12500
#define MIN_VOLTAGE 300
  while (ovcnt16 < MAX_LOAD_TIME) {
     R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
     if ((ovcnt16 == 0) || ((MIN_VOLTAGE-cap_voltage1) < (cap_voltage1*10/ovcnt16))) {
    62ce:	5c e2       	ldi	r21, 0x2C	; 44
    62d0:	c5 2e       	mov	r12, r21
    62d2:	dd 24       	eor	r13, r13
    62d4:	d3 94       	inc	r13

000062d6 <.Loc.55>:
    62d6:	da e0       	ldi	r29, 0x0A	; 10

000062d8 <.LVL13>:
        R_DDR = HiPinR_L;		//switch Pin to output, across R to VCC
        wait200us();			// wait exactly 0.2ms, do not sleep
        R_DDR = 0;			// switch back to input
        ovcnt16++;
     } else if ((ovcnt16 > 10) && ((MIN_VOLTAGE-cap_voltage1) > ((cap_voltage1*100)/ovcnt16))){
    62d8:	64 e6       	ldi	r22, 0x64	; 100
    62da:	96 2e       	mov	r9, r22

000062dc <.Loc.57>:
     }
     R_PORT = 0;			// no Pull up
     wait50us();			//wait a little time
     wdt_reset();
     // read voltage without current, is already charged enough?
     cap_voltage1 = ReadADC(HighPin) - residual_voltage;	// voltage loaded to capacitor
    62dc:	7c 01       	movw	r14, r24
    62de:	ea 18       	sub	r14, r10
    62e0:	fb 08       	sbc	r15, r11

000062e2 <.L2>:
  while (ovcnt16 < MAX_LOAD_TIME) {
    62e2:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    62e6:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    62ea:	84 3d       	cpi	r24, 0xD4	; 212
    62ec:	90 43       	sbci	r25, 0x30	; 48
    62ee:	40 f0       	brcs	.+16     	; 0x6300 <.L10>

000062f0 <.L11>:
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    62f0:	17 b8       	out	0x07, r1	; 7

000062f2 <.Loc.61>:
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    62f2:	18 b8       	out	0x08, r1	; 8

000062f4 <.Loc.63>:
  R_DDR = 0;			// switch all resistor ports to input
    62f4:	14 b8       	out	0x04, r1	; 4

000062f6 <.Loc.65>:
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    62f6:	15 b8       	out	0x05, r1	; 5

000062f8 <.Loc.67>:
  return;
 } // end ReadBigCap()
    62f8:	cd b7       	in	r28, 0x3d	; 61
    62fa:	de b7       	in	r29, 0x3e	; 62

000062fc <.LVL16>:
    62fc:	eb e0       	ldi	r30, 0x0B	; 11
    62fe:	2d c7       	rjmp	.+3674   	; 0x715a <.Loc.7>

00006300 <.L10>:
     R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    6300:	c5 b9       	out	0x05, r28	; 5

00006302 <.Loc.72>:
     if ((ovcnt16 == 0) || ((MIN_VOLTAGE-cap_voltage1) < (cap_voltage1*10/ovcnt16))) {
    6302:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    6306:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>

0000630a <.Loc.74>:
    630a:	89 2b       	or	r24, r25
    630c:	89 f0       	breq	.+34     	; 0x6330 <.L3>

0000630e <.Loc.75>:
    630e:	f6 01       	movw	r30, r12
    6310:	e2 1b       	sub	r30, r18
    6312:	f3 0b       	sbc	r31, r19

00006314 <.Loc.76>:
    6314:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <ovcnt16>
    6318:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <ovcnt16+0x1>

0000631c <.Loc.77>:
    631c:	d2 9f       	mul	r29, r18
    631e:	c0 01       	movw	r24, r0
    6320:	d3 9f       	mul	r29, r19
    6322:	90 0d       	add	r25, r0
    6324:	11 24       	eor	r1, r1

00006326 <.Loc.78>:
    6326:	6c d6       	rcall	.+3288   	; 0x7000 <__udivmodhi4>

00006328 <.Loc.79>:
    6328:	e6 17       	cp	r30, r22
    632a:	f7 07       	cpc	r31, r23
    632c:	08 f0       	brcs	.+2      	; 0x6330 <.L3>

0000632e <L0^A>:
    632e:	a0 c0       	rjmp	.+320    	; 0x6470 <.L4>

00006330 <.L3>:
        R_DDR = HiPinR_L;		//switch Pin to output, across R to VCC
    6330:	c4 b9       	out	0x04, r28	; 4

00006332 <.Loc.82>:
        wait200us();			// wait exactly 0.2ms, do not sleep
    6332:	0e 94 b7 07 	call	0xf6e	; 0xf6e <wait200us>

00006336 <.LVL18>:
        R_DDR = 0;			// switch back to input
    6336:	14 b8       	out	0x04, r1	; 4

00006338 <.Loc.85>:
        ovcnt16++;
    6338:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    633c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    6340:	01 96       	adiw	r24, 0x01	; 1

00006342 <.L18>:
        ovcnt16 += 10;
    6342:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <ovcnt16+0x1>
    6346:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <ovcnt16>

0000634a <.Loc.88>:
     R_PORT = 0;			// no Pull up
    634a:	15 b8       	out	0x05, r1	; 5

0000634c <.Loc.90>:
     wait50us();			//wait a little time
    634c:	0e 94 b9 07 	call	0xf72	; 0xf72 <wait50us>

00006350 <.LVL19>:
     wdt_reset();
    6350:	a8 95       	wdr

00006352 <.Loc.92>:
     cap_voltage1 = ReadADC(HighPin) - residual_voltage;	// voltage loaded to capacitor
    6352:	81 2f       	mov	r24, r17
    6354:	0e 94 fc 07 	call	0xff8	; 0xff8 <ReadADC>

00006358 <.LVL20>:
    6358:	97 01       	movw	r18, r14
    635a:	28 0f       	add	r18, r24
    635c:	39 1f       	adc	r19, r25

0000635e <.LVL21>:
     if ((ovcnt16 > (MAX_LOAD_TIME/8)) && (cap_voltage1 < (MIN_VOLTAGE/8))) {
    635e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    6362:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>

00006366 <.Loc.97>:
    6366:	8b 31       	cpi	r24, 0x1B	; 27
    6368:	96 40       	sbci	r25, 0x06	; 6
    636a:	20 f0       	brcs	.+8      	; 0x6374 <.L7>

0000636c <.Loc.98>:
    636c:	25 32       	cpi	r18, 0x25	; 37
    636e:	31 05       	cpc	r19, r1
    6370:	0c f4       	brge	.+2      	; 0x6374 <.L7>

00006372 <L0^A>:
    6372:	be cf       	rjmp	.-132    	; 0x62f0 <.L11>

00006374 <.L7>:
     if (cap_voltage1 > MIN_VOLTAGE) {
    6374:	2d 32       	cpi	r18, 0x2D	; 45
    6376:	81 e0       	ldi	r24, 0x01	; 1
    6378:	38 07       	cpc	r19, r24
    637a:	0c f4       	brge	.+2      	; 0x637e <.Loc.101>

0000637c <L0^A>:
    637c:	b2 cf       	rjmp	.-156    	; 0x62e2 <.L2>

0000637e <.Loc.101>:
  if ((ovcnt16 == 1 ) && (cap_voltage1 > 1300)) {
    637e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    6382:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>

00006386 <.Loc.104>:
    6386:	01 97       	sbiw	r24, 0x01	; 1
    6388:	29 f4       	brne	.+10     	; 0x6394 <.L13>

0000638a <.Loc.105>:
    638a:	25 31       	cpi	r18, 0x15	; 21
    638c:	85 e0       	ldi	r24, 0x05	; 5
    638e:	38 07       	cpc	r19, r24
    6390:	0c f0       	brlt	.+2      	; 0x6394 <.L13>

00006392 <L0^A>:
    6392:	ae cf       	rjmp	.-164    	; 0x62f0 <.L11>

00006394 <.L13>:
  cap.cval_uncorrected.dw = ovcnt16*2;
    6394:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    6398:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    639c:	88 0f       	add	r24, r24
    639e:	99 1f       	adc	r25, r25
    63a0:	a0 e0       	ldi	r26, 0x00	; 0
    63a2:	b0 e0       	ldi	r27, 0x00	; 0
    63a4:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <cap+0x8>
    63a8:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <cap+0x9>
    63ac:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <cap+0xa>
    63b0:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <cap+0xb>

000063b4 <.Loc.108>:
  cap.cval_uncorrected.dw *= GetRLmultip(cap_voltage1 + cap_voltage1/40);	// get factor to convert time to capacity from table
    63b4:	c9 01       	movw	r24, r18
    63b6:	68 e2       	ldi	r22, 0x28	; 40
    63b8:	70 e0       	ldi	r23, 0x00	; 0
    63ba:	36 d6       	rcall	.+3180   	; 0x7028 <__divmodhi4>

000063bc <.Loc.110>:
    63bc:	cb 01       	movw	r24, r22
    63be:	82 0f       	add	r24, r18
    63c0:	93 1f       	adc	r25, r19
    63c2:	0e 94 c1 08 	call	0x1182	; 0x1182 <GetRLmultip>

000063c6 <.LVL22>:
    63c6:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <cap+0x8>
    63ca:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <cap+0x9>
    63ce:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <cap+0xa>
    63d2:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <cap+0xb>
    63d6:	dc 01       	movw	r26, r24
    63d8:	8d d6       	rcall	.+3354   	; 0x70f4 <__muluhisi3>
    63da:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <cap+0x8>
    63de:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <cap+0x9>
    63e2:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <cap+0xa>
    63e6:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <cap+0xb>

000063ea <.Loc.112>:
   cap.cval = cap.cval_uncorrected.dw;	// set result to uncorrected
    63ea:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <cap>
    63ee:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <cap+0x1>
    63f2:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <cap+0x2>
    63f6:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <cap+0x3>

000063fa <.Loc.114>:
   Scale_C_with_vcc();
    63fa:	0e 94 76 23 	call	0x46ec	; 0x46ec <Scale_C_with_vcc>

000063fe <.LVL23>:
   cap.cval *= (1000 - (int8_t)eeprom_read_byte((uint8_t *)&big_cap_corr));	// correct with actual big_cap_korr at 0.1% resolution
    63fe:	c0 90 3c 01 	lds	r12, 0x013C	; 0x80013c <cap>
    6402:	d0 90 3d 01 	lds	r13, 0x013D	; 0x80013d <cap+0x1>
    6406:	e0 90 3e 01 	lds	r14, 0x013E	; 0x80013e <cap+0x2>
    640a:	f0 90 3f 01 	lds	r15, 0x013F	; 0x80013f <cap+0x3>

0000640e <.Loc.117>:
    640e:	8a e1       	ldi	r24, 0x1A	; 26
    6410:	93 e0       	ldi	r25, 0x03	; 3
    6412:	0b d7       	rcall	.+3606   	; 0x722a <eeprom_read_byte>

00006414 <.LVL24>:
    6414:	a8 ee       	ldi	r26, 0xE8	; 232
    6416:	b3 e0       	ldi	r27, 0x03	; 3
    6418:	a8 1b       	sub	r26, r24
    641a:	b1 09       	sbc	r27, r1
    641c:	87 fd       	sbrc	r24, 7
    641e:	b3 95       	inc	r27

00006420 <.Loc.120>:
    6420:	a7 01       	movw	r20, r14
    6422:	96 01       	movw	r18, r12
    6424:	71 d6       	rcall	.+3298   	; 0x7108 <__mulshisi3>

00006426 <.Loc.121>:
   cap.cval /= 10000;
    6426:	20 e1       	ldi	r18, 0x10	; 16
    6428:	37 e2       	ldi	r19, 0x27	; 39
    642a:	40 e0       	ldi	r20, 0x00	; 0
    642c:	50 e0       	ldi	r21, 0x00	; 0
    642e:	0f d6       	rcall	.+3102   	; 0x704e <__udivmodsi4>
    6430:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <cap>
    6434:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <cap+0x1>
    6438:	40 93 3e 01 	sts	0x013E, r20	; 0x80013e <cap+0x2>
    643c:	50 93 3f 01 	sts	0x013F, r21	; 0x80013f <cap+0x3>

00006440 <.Loc.122>:
   PartFound = PART_CAPACITOR;	//capacitor is found
    6440:	88 e0       	ldi	r24, 0x08	; 8
    6442:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>

00006446 <.Loc.124>:
      cap.cval_max = cap.cval;
    6446:	20 93 40 01 	sts	0x0140, r18	; 0x800140 <cap+0x4>
    644a:	30 93 41 01 	sts	0x0141, r19	; 0x800141 <cap+0x5>
    644e:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <cap+0x6>
    6452:	50 93 43 01 	sts	0x0143, r21	; 0x800143 <cap+0x7>

00006456 <.Loc.126>:
      cap.cpre_max = cap.cpre;
    6456:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <cap+0x12>
    645a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cap+0x13>

0000645e <.Loc.128>:
      cap.v_loss = 0;			// set lost voltage to zero
    645e:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cap+0xf>
    6462:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <cap+0xe>

00006466 <.Loc.130>:
      cap.ca = LowPin;		// save LowPin
    6466:	00 93 4c 01 	sts	0x014C, r16	; 0x80014c <cap+0x10>

0000646a <.Loc.132>:
      cap.cb = HighPin;		// save HighPin
    646a:	10 93 4d 01 	sts	0x014D, r17	; 0x80014d <cap+0x11>
    646e:	40 cf       	rjmp	.-384    	; 0x62f0 <.L11>

00006470 <.L4>:
     } else if ((ovcnt16 > 10) && ((MIN_VOLTAGE-cap_voltage1) > ((cap_voltage1*100)/ovcnt16))){
    6470:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    6474:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>

00006478 <.Loc.136>:
    6478:	0b 97       	sbiw	r24, 0x0b	; 11
    647a:	c0 f0       	brcs	.+48     	; 0x64ac <.L6>

0000647c <.Loc.137>:
    647c:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <ovcnt16>
    6480:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <ovcnt16+0x1>

00006484 <.Loc.138>:
    6484:	92 9e       	mul	r9, r18
    6486:	c0 01       	movw	r24, r0
    6488:	93 9e       	mul	r9, r19
    648a:	90 0d       	add	r25, r0
    648c:	11 24       	eor	r1, r1

0000648e <.Loc.139>:
    648e:	b8 d5       	rcall	.+2928   	; 0x7000 <__udivmodhi4>

00006490 <.Loc.140>:
    6490:	6e 17       	cp	r22, r30
    6492:	7f 07       	cpc	r23, r31
    6494:	58 f4       	brcc	.+22     	; 0x64ac <.L6>

00006496 <.Loc.141>:
        R_DDR = HiPinR_L;		//switch Pin to output, across R to VCC
    6496:	c4 b9       	out	0x04, r28	; 4

00006498 <.Loc.143>:
        wait20ms();			// wait exactly 20ms, do not sleep
    6498:	0e 94 ac 07 	call	0xf58	; 0xf58 <wait20ms>

0000649c <.LVL26>:
        R_DDR = 0;			// switch back to input
    649c:	14 b8       	out	0x04, r1	; 4

0000649e <.Loc.146>:
        ovcnt16 += 100;
    649e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    64a2:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    64a6:	8c 59       	subi	r24, 0x9C	; 156
    64a8:	9f 4f       	sbci	r25, 0xFF	; 255
    64aa:	4b cf       	rjmp	.-362    	; 0x6342 <.L18>

000064ac <.L6>:
        R_DDR = HiPinR_L;		//switch Pin to output, across R to VCC
    64ac:	c4 b9       	out	0x04, r28	; 4

000064ae <.Loc.150>:
        wait2ms();			// wait exactly 2ms, do not sleep
    64ae:	0e 94 b2 07 	call	0xf64	; 0xf64 <wait2ms>

000064b2 <.LVL28>:
        R_DDR = 0;			// switch back to input
    64b2:	14 b8       	out	0x04, r1	; 4

000064b4 <.Loc.153>:
        ovcnt16 += 10;
    64b4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    64b8:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    64bc:	0a 96       	adiw	r24, 0x0a	; 10
    64be:	41 cf       	rjmp	.-382    	; 0x6342 <.L18>

000064c0 <ShowData>:
#include "Transistortester.h"
/*  ShowData shows the Software version number and */
/*  the calibration data at the 2-line or 4-line LCD */
#ifdef WITH_MENU
void ShowData(void) {
    64c0:	a0 e0       	ldi	r26, 0x00	; 0
    64c2:	b0 e0       	ldi	r27, 0x00	; 0
    64c4:	e5 e6       	ldi	r30, 0x65	; 101
    64c6:	f2 e3       	ldi	r31, 0x32	; 50
    64c8:	30 c6       	rjmp	.+3168   	; 0x712a <.Loc.11>

000064ca <.L1^B1>:
  uint8_t ii,jj,kk;
#endif
#ifdef WITH_ROTARY_SWITCH
show_page_1:
#endif
  lcd_clear();
    64ca:	0e 94 14 0b 	call	0x1628	; 0x1628 <lcd_clear>

000064ce <.LVL0>:
  lcd_MEM_string(VERSION_str);	// "Version x.xxk"
    64ce:	85 ef       	ldi	r24, 0xF5	; 245
    64d0:	90 e0       	ldi	r25, 0x00	; 0
    64d2:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

000064d6 <.LVL1>:
  lcd_line2();
    64d6:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_line2>

000064da <.LVL2>:
  lcd_MEM2_string(R0_str);	// "R0="
    64da:	81 eb       	ldi	r24, 0xB1	; 177
    64dc:	90 e0       	ldi	r25, 0x00	; 0
    64de:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

000064e2 <.LVL3>:
  DisplayValue16(eeprom_read_byte(&EE_ESR_ZEROtab[2]),-2,' ',3);
    64e2:	88 e1       	ldi	r24, 0x18	; 24
    64e4:	93 e0       	ldi	r25, 0x03	; 3
    64e6:	a1 d6       	rcall	.+3394   	; 0x722a <eeprom_read_byte>

000064e8 <.LVL4>:
    64e8:	23 e0       	ldi	r18, 0x03	; 3
    64ea:	40 e2       	ldi	r20, 0x20	; 32
    64ec:	6e ef       	ldi	r22, 0xFE	; 254
    64ee:	90 e0       	ldi	r25, 0x00	; 0
    64f0:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

000064f4 <.LVL5>:
  DisplayValue16(eeprom_read_byte(&EE_ESR_ZEROtab[3]),-2,' ',3);
    64f4:	89 e1       	ldi	r24, 0x19	; 25
    64f6:	93 e0       	ldi	r25, 0x03	; 3
    64f8:	98 d6       	rcall	.+3376   	; 0x722a <eeprom_read_byte>

000064fa <.LVL6>:
    64fa:	23 e0       	ldi	r18, 0x03	; 3
    64fc:	40 e2       	ldi	r20, 0x20	; 32
    64fe:	6e ef       	ldi	r22, 0xFE	; 254
    6500:	90 e0       	ldi	r25, 0x00	; 0
    6502:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

00006506 <.LVL7>:
  DisplayValue16(eeprom_read_byte(&EE_ESR_ZEROtab[1]),-2,LCD_CHAR_OMEGA,3);
    6506:	87 e1       	ldi	r24, 0x17	; 23
    6508:	93 e0       	ldi	r25, 0x03	; 3
    650a:	8f d6       	rcall	.+3358   	; 0x722a <eeprom_read_byte>

0000650c <.LVL8>:
    650c:	23 e0       	ldi	r18, 0x03	; 3
    650e:	4d e1       	ldi	r20, 0x1D	; 29
    6510:	6e ef       	ldi	r22, 0xFE	; 254
    6512:	90 e0       	ldi	r25, 0x00	; 0
    6514:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

00006518 <.LVL9>:
#if (LCD_LINES > 3)
  lcd_line3();
    6518:	0e 94 ed 0a 	call	0x15da	; 0x15da <lcd_line3>

0000651c <.LVL10>:
show_page_2:
 #endif
  lcd_clear();
#endif
  /* output line 3 */
  lcd_MEM_string(RIHI_str); // "RiHi="
    651c:	8a ea       	ldi	r24, 0xAA	; 170
    651e:	90 e0       	ldi	r25, 0x00	; 0
    6520:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00006524 <.LVL11>:
  DisplayValue16(RRpinPL,-1,LCD_CHAR_OMEGA,3);
    6524:	23 e0       	ldi	r18, 0x03	; 3
    6526:	4d e1       	ldi	r20, 0x1D	; 29
    6528:	6f ef       	ldi	r22, 0xFF	; 255
    652a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <pin_rpl>
    652e:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <pin_rpl+0x1>
    6532:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

00006536 <.LVL12>:
#if (LCD_LINES > 3)
  lcd_line4();
    6536:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <lcd_line4>

0000653a <.LVL13>:
#else
  lcd_line2();
#endif
  /* output line 4 */
  lcd_MEM_string(RILO_str); // "RiLo="
    653a:	83 ea       	ldi	r24, 0xA3	; 163
    653c:	90 e0       	ldi	r25, 0x00	; 0
    653e:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00006542 <.LVL14>:
  DisplayValue16(RRpinMI,-1,LCD_CHAR_OMEGA,3);
    6542:	23 e0       	ldi	r18, 0x03	; 3
    6544:	4d e1       	ldi	r20, 0x1D	; 29
    6546:	6f ef       	ldi	r22, 0xFF	; 255
    6548:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <pin_rmi>
    654c:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <pin_rmi+0x1>
    6550:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

00006554 <.LVL15>:

  wait_for_key_ms(MIDDLE_WAIT_TIME);
    6554:	88 e9       	ldi	r24, 0x98	; 152
    6556:	9a e3       	ldi	r25, 0x3A	; 58
    6558:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <wait_for_key_ms>

0000655c <.LVL16>:
#ifdef WITH_ROTARY_SWITCH
  if (rotary.incre > FAST_ROTATION) return;	// fast rotation ends the function
    655c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rotary+0x6>
    6560:	8b 30       	cpi	r24, 0x0B	; 11
    6562:	08 f0       	brcs	.+2      	; 0x6566 <.Loc.25>

00006564 <L0^A>:
    6564:	b7 c0       	rjmp	.+366    	; 0x66d4 <.L1>

00006566 <.Loc.25>:
 #if (LCD_LINES > 3)
  if (rotary.count < 0) goto show_page_1;
    6566:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rotary+0x5>
    656a:	87 fd       	sbrc	r24, 7
    656c:	ae cf       	rjmp	.-164    	; 0x64ca <.L1^B1>

0000656e <.L5>:
#endif
#ifdef AUTO_CAL
 #ifdef WITH_ROTARY_SWITCH
show_page_3:
 #endif
  lcd_clear();
    656e:	0e 94 14 0b 	call	0x1628	; 0x1628 <lcd_clear>

00006572 <.LVL17>:
  lcd_MEM_string(C0_str);                       //output "C0 "
    6572:	8f e9       	ldi	r24, 0x9F	; 159
    6574:	90 e0       	ldi	r25, 0x00	; 0
    6576:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

0000657a <.LVL18>:
  u2lcd_space(eeprom_read_byte(&c_zero_tab[5]) -(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));		//output cap0 1:3
    657a:	8c e3       	ldi	r24, 0x3C	; 60
    657c:	93 e0       	ldi	r25, 0x03	; 3
    657e:	55 d6       	rcall	.+3242   	; 0x722a <eeprom_read_byte>

00006580 <.LVL19>:
    6580:	82 51       	subi	r24, 0x12	; 18
    6582:	99 0b       	sbc	r25, r25
    6584:	0e 94 b3 06 	call	0xd66	; 0xd66 <u2lcd_space>

00006588 <.LVL20>:
  u2lcd_space(eeprom_read_byte(&c_zero_tab[6]) -(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));		//output cap0 2:3
    6588:	8d e3       	ldi	r24, 0x3D	; 61
    658a:	93 e0       	ldi	r25, 0x03	; 3
    658c:	4e d6       	rcall	.+3228   	; 0x722a <eeprom_read_byte>

0000658e <.LVL21>:
    658e:	82 51       	subi	r24, 0x12	; 18
    6590:	99 0b       	sbc	r25, r25
    6592:	0e 94 b3 06 	call	0xd66	; 0xd66 <u2lcd_space>

00006596 <.LVL22>:
  DisplayValue16(eeprom_read_byte(&c_zero_tab[2]) -(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)) ,-12,'F',3);		//output cap0 1:2
    6596:	89 e3       	ldi	r24, 0x39	; 57
    6598:	93 e0       	ldi	r25, 0x03	; 3
    659a:	47 d6       	rcall	.+3214   	; 0x722a <eeprom_read_byte>

0000659c <.LVL23>:
    659c:	23 e0       	ldi	r18, 0x03	; 3
    659e:	46 e4       	ldi	r20, 0x46	; 70
    65a0:	64 ef       	ldi	r22, 0xF4	; 244
    65a2:	82 51       	subi	r24, 0x12	; 18
    65a4:	99 0b       	sbc	r25, r25
    65a6:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

000065aa <.LVL24>:
  lcd_line2();
    65aa:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_line2>

000065ae <.LVL25>:
  lcd_spaces(3);
    65ae:	83 e0       	ldi	r24, 0x03	; 3
    65b0:	0e 94 c9 0a 	call	0x1592	; 0x1592 <lcd_spaces>

000065b4 <.LVL26>:
  u2lcd_space(eeprom_read_byte(&c_zero_tab[1]) -(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));		//output cap0 3:1
    65b4:	88 e3       	ldi	r24, 0x38	; 56
    65b6:	93 e0       	ldi	r25, 0x03	; 3
    65b8:	38 d6       	rcall	.+3184   	; 0x722a <eeprom_read_byte>

000065ba <.LVL27>:
    65ba:	82 51       	subi	r24, 0x12	; 18
    65bc:	99 0b       	sbc	r25, r25
    65be:	0e 94 b3 06 	call	0xd66	; 0xd66 <u2lcd_space>

000065c2 <.LVL28>:
  u2lcd_space(eeprom_read_byte(&c_zero_tab[4]) -(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));		//output cap0 3:2
    65c2:	8b e3       	ldi	r24, 0x3B	; 59
    65c4:	93 e0       	ldi	r25, 0x03	; 3
    65c6:	31 d6       	rcall	.+3170   	; 0x722a <eeprom_read_byte>

000065c8 <.LVL29>:
    65c8:	82 51       	subi	r24, 0x12	; 18
    65ca:	99 0b       	sbc	r25, r25
    65cc:	0e 94 b3 06 	call	0xd66	; 0xd66 <u2lcd_space>

000065d0 <.LVL30>:
  DisplayValue16(eeprom_read_byte(&c_zero_tab[0]) -(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)) ,-12,'F',3);		//output cap0 2:1
    65d0:	87 e3       	ldi	r24, 0x37	; 55
    65d2:	93 e0       	ldi	r25, 0x03	; 3
    65d4:	2a d6       	rcall	.+3156   	; 0x722a <eeprom_read_byte>

000065d6 <.LVL31>:
    65d6:	23 e0       	ldi	r18, 0x03	; 3
    65d8:	46 e4       	ldi	r20, 0x46	; 70
    65da:	64 ef       	ldi	r22, 0xF4	; 244
    65dc:	82 51       	subi	r24, 0x12	; 18
    65de:	99 0b       	sbc	r25, r25
    65e0:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

000065e4 <.LVL32>:
#if (LCD_LINES > 3)
  lcd_line3();
    65e4:	0e 94 ed 0a 	call	0x15da	; 0x15da <lcd_line3>

000065e8 <.LVL33>:
show_page_4:
 #endif
  lcd_clear();
#endif
  /* output line 7 */
  lcd_MEM2_string(REF_C_str);	// "REF_C="
    65e8:	8d e1       	ldi	r24, 0x1D	; 29
    65ea:	90 e0       	ldi	r25, 0x00	; 0
    65ec:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

000065f0 <.LVL34>:
  i2lcd((int16_t)eeprom_read_word((uint16_t *)(&ref_offset)));
    65f0:	8e e3       	ldi	r24, 0x3E	; 62
    65f2:	93 e0       	ldi	r25, 0x03	; 3
    65f4:	22 d6       	rcall	.+3140   	; 0x723a <eeprom_read_word>

000065f6 <.LVL35>:
    65f6:	0e 94 9e 06 	call	0xd3c	; 0xd3c <i2lcd>

000065fa <.LVL36>:
#if (LCD_LINES > 3)
  lcd_line4();
    65fa:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <lcd_line4>

000065fe <.LVL37>:
#else
  lcd_line2();
#endif
  /* output line 8 */
  lcd_MEM2_string(REF_R_str);  // "REF_R="
    65fe:	86 e1       	ldi	r24, 0x16	; 22
    6600:	90 e0       	ldi	r25, 0x00	; 0
    6602:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00006606 <.LVL38>:
  i2lcd((int8_t)eeprom_read_byte((uint8_t *)(&RefDiff)));
    6606:	80 e4       	ldi	r24, 0x40	; 64
    6608:	93 e0       	ldi	r25, 0x03	; 3
    660a:	0f d6       	rcall	.+3102   	; 0x722a <eeprom_read_byte>

0000660c <.LVL39>:
    660c:	08 2e       	mov	r0, r24
    660e:	00 0c       	add	r0, r0
    6610:	99 0b       	sbc	r25, r25
    6612:	0e 94 9e 06 	call	0xd3c	; 0xd3c <i2lcd>

00006616 <.L6>:
#ifdef SamplingADC
 #ifdef WITH_ROTARY_SWITCH
show_page_5:
 #endif
  /* modified output from sampling_cap_calibrate */
  lcd_set_cursor((LCD_LINES-1)*PAGES_PER_LINE,0);      // set for initial clear screen
    6616:	60 e0       	ldi	r22, 0x00	; 0
    6618:	86 e0       	ldi	r24, 0x06	; 6
    661a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <lcd_set_cursor>

0000661e <.LVL41>:
  for (ii=0;ii<=2;ii++)
    661e:	c0 e0       	ldi	r28, 0x00	; 0

00006620 <.L7>:
    for (jj=0;jj<=2;jj++)
    6620:	fc 2e       	mov	r15, r28
    6622:	ff 0c       	add	r15, r15
    6624:	fc 0e       	add	r15, r28

00006626 <.Loc.64>:
    6626:	d0 e0       	ldi	r29, 0x00	; 0

00006628 <.Loc.65>:
       if (ii != jj) {
          kk = (ii * 3) + jj - 1;
    6628:	fa 94       	dec	r15

0000662a <.L13>:
       if (ii != jj) {
    662a:	cd 17       	cp	r28, r29
    662c:	09 f4       	brne	.+2      	; 0x6630 <.LVL44>

0000662e <L0^A>:
    662e:	46 c0       	rjmp	.+140    	; 0x66bc <.L8>

00006630 <.LVL44>:
          kk = (ii * 3) + jj - 1;
    6630:	0f 2d       	mov	r16, r15
    6632:	0d 0f       	add	r16, r29

00006634 <.Loc.71>:
          cc = eeprom_read_word((void *)(c_zero_tab2_lo+kk));
    6634:	10 e0       	ldi	r17, 0x00	; 0
    6636:	00 0f       	add	r16, r16
    6638:	11 1f       	adc	r17, r17

0000663a <.Loc.72>:
    663a:	c8 01       	movw	r24, r16
    663c:	87 5d       	subi	r24, 0xD7	; 215
    663e:	9c 4f       	sbci	r25, 0xFC	; 252
    6640:	fc d5       	rcall	.+3064   	; 0x723a <eeprom_read_word>

00006642 <.LVL45>:
    6642:	d8 2e       	mov	r13, r24
    6644:	e9 2e       	mov	r14, r25

00006646 <.LVL46>:
          dd = eeprom_read_word((void *)(c_zero_tab2_hi+kk));
    6646:	c8 01       	movw	r24, r16
    6648:	85 5e       	subi	r24, 0xE5	; 229
    664a:	9c 4f       	sbci	r25, 0xFC	; 252
    664c:	f6 d5       	rcall	.+3052   	; 0x723a <eeprom_read_word>

0000664e <.LVL47>:
    664e:	8c 01       	movw	r16, r24

00006650 <.LVL48>:
          if (lcd_text_line > (LCD_LINES - 2)) {
    6650:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd_text_line>
    6654:	83 30       	cpi	r24, 0x03	; 3
    6656:	08 f4       	brcc	.+2      	; 0x665a <.Loc.77>

00006658 <L0^A>:
    6658:	41 c0       	rjmp	.+130    	; 0x66dc <.L9>

0000665a <.Loc.77>:
             wait_for_key_ms(MIDDLE_WAIT_TIME);
    665a:	88 e9       	ldi	r24, 0x98	; 152
    665c:	9a e3       	ldi	r25, 0x3A	; 58
    665e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <wait_for_key_ms>

00006662 <.LVL49>:
 #ifdef WITH_ROTARY_SWITCH
             if (rotary.incre > FAST_ROTATION) return;	// fast rotation ends the function
    6662:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rotary+0x6>
    6666:	8b 30       	cpi	r24, 0x0B	; 11
    6668:	a8 f5       	brcc	.+106    	; 0x66d4 <.L1>

0000666a <.Loc.80>:
  #if (LCD_LINES > 3)
             if (rotary.count < -2) goto show_page_1;	// page_2 is shown together with _page_1
    666a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rotary+0x5>

0000666e <.Loc.82>:
    666e:	8e 3f       	cpi	r24, 0xFE	; 254
    6670:	0c f4       	brge	.+2      	; 0x6674 <.Loc.83>

00006672 <L0^A>:
    6672:	2b cf       	rjmp	.-426    	; 0x64ca <.L1^B1>

00006674 <.Loc.83>:
             if (rotary.count < -1) goto show_page_3;	// page_4 is shown together with _page 3
    6674:	8e 3f       	cpi	r24, 0xFE	; 254
    6676:	09 f4       	brne	.+2      	; 0x667a <.Loc.85>

00006678 <L0^A>:
    6678:	7a cf       	rjmp	.-268    	; 0x656e <.L5>

0000667a <.Loc.85>:
             if (rotary.count < 0) goto show_page_5;
    667a:	8f 3f       	cpi	r24, 0xFF	; 255
    667c:	61 f2       	breq	.-104    	; 0x6616 <.L6>

0000667e <.Loc.87>:
             if (rotary.count < -2) goto show_page_3;
             if (rotary.count < -1) goto show_page_4;
             if (rotary.count < 0) goto show_page_5;
  #endif
 #endif  /* WITH_ROTARY_SWITCH */
             lcd_clear();
    667e:	0e 94 14 0b 	call	0x1628	; 0x1628 <lcd_clear>

00006682 <.L12>:
          } else {  
	     lcd_next_line(0);
          }
          lcd_MEM_string(C0samp_str);	// "C0samp "
    6682:	87 e9       	ldi	r24, 0x97	; 151
    6684:	90 e0       	ldi	r25, 0x00	; 0
    6686:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

0000668a <.LVL51>:
	  lcd_testpin(ii);
    668a:	8c 2f       	mov	r24, r28
    668c:	0e 94 99 0c 	call	0x1932	; 0x1932 <lcd_testpin>

00006690 <.LVL52>:
	  lcd_data(':');
    6690:	8a e3       	ldi	r24, 0x3A	; 58
    6692:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00006696 <.LVL53>:
          lcd_testpin(jj);
    6696:	8d 2f       	mov	r24, r29
    6698:	0e 94 99 0c 	call	0x1932	; 0x1932 <lcd_testpin>

0000669c <.LVL54>:
	  lcd_next_line(0);
    669c:	80 e0       	ldi	r24, 0x00	; 0
    669e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <lcd_next_line>

000066a2 <.LVL55>:
	  DisplayValue16(cc,-2,' ',3);
    66a2:	23 e0       	ldi	r18, 0x03	; 3
    66a4:	40 e2       	ldi	r20, 0x20	; 32
    66a6:	6e ef       	ldi	r22, 0xFE	; 254
    66a8:	8d 2d       	mov	r24, r13
    66aa:	9e 2d       	mov	r25, r14
    66ac:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

000066b0 <.LVL56>:
	  DisplayValue16(dd,-12-2,'F',3);
    66b0:	23 e0       	ldi	r18, 0x03	; 3
    66b2:	46 e4       	ldi	r20, 0x46	; 70
    66b4:	62 ef       	ldi	r22, 0xF2	; 242
    66b6:	c8 01       	movw	r24, r16
    66b8:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

000066bc <.L8>:
    for (jj=0;jj<=2;jj++)
    66bc:	df 5f       	subi	r29, 0xFF	; 255

000066be <.Loc.96>:
    66be:	d3 30       	cpi	r29, 0x03	; 3
    66c0:	09 f0       	breq	.+2      	; 0x66c4 <.Loc.97>

000066c2 <L0^A>:
    66c2:	b3 cf       	rjmp	.-154    	; 0x662a <.L13>

000066c4 <.Loc.97>:
  for (ii=0;ii<=2;ii++)
    66c4:	cf 5f       	subi	r28, 0xFF	; 255

000066c6 <.Loc.98>:
    66c6:	c3 30       	cpi	r28, 0x03	; 3
    66c8:	09 f0       	breq	.+2      	; 0x66cc <.Loc.99>

000066ca <L0^A>:
    66ca:	aa cf       	rjmp	.-172    	; 0x6620 <.L7>

000066cc <.Loc.99>:
 #endif

#endif  /* SamplingADC */
#endif /* defined AUTO_CAL */

  wait_for_key_ms(MIDDLE_WAIT_TIME);
    66cc:	88 e9       	ldi	r24, 0x98	; 152
    66ce:	9a e3       	ldi	r25, 0x3A	; 58
    66d0:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <wait_for_key_ms>

000066d4 <.L1>:
//#if  defined(WITH_GRAPHICS) && !defined(SamplingADC)
#ifdef SHOW_ICONS
 ShowIcons();		// show all Icons
#endif
}
    66d4:	cd b7       	in	r28, 0x3d	; 61
    66d6:	de b7       	in	r29, 0x3e	; 62
    66d8:	e7 e0       	ldi	r30, 0x07	; 7
    66da:	43 c5       	rjmp	.+2694   	; 0x7162 <.Loc.11>

000066dc <.L9>:
	     lcd_next_line(0);
    66dc:	80 e0       	ldi	r24, 0x00	; 0
    66de:	0e 94 67 0b 	call	0x16ce	; 0x16ce <lcd_next_line>

000066e2 <.LVL62>:
    66e2:	cf cf       	rjmp	.-98     	; 0x6682 <.L12>

000066e4 <mylog>:



// calculate -32768*ln(1-y/32768)
static unsigned int mylog(unsigned int y)
{
    66e4:	8f 92       	push	r8

000066e6 <.LCFI0>:
    66e6:	9f 92       	push	r9

000066e8 <.LCFI1>:
    66e8:	af 92       	push	r10

000066ea <.LCFI2>:
    66ea:	bf 92       	push	r11

000066ec <.LCFI3>:
    66ec:	cf 92       	push	r12

000066ee <.LCFI4>:
    66ee:	df 92       	push	r13

000066f0 <.LCFI5>:
    66f0:	ef 92       	push	r14

000066f2 <.LCFI6>:
    66f2:	ff 92       	push	r15

000066f4 <.LCFI7>:
    66f4:	ac 01       	movw	r20, r24

000066f6 <.LVL1>:
*/

   // newer version: uses one more term for better accuracy (0.2% instead of 1% in the test mentioned above)
   // only 30 bytes longer than the 1% version
   unsigned short int bb;
   b=y;
    66f6:	6c 01       	movw	r12, r24
    66f8:	e1 2c       	mov	r14, r1
    66fa:	f1 2c       	mov	r15, r1

000066fc <.LVL2>:
   a = (b<<16);
    66fc:	56 01       	movw	r10, r12
    66fe:	99 24       	eor	r9, r9
    6700:	88 24       	eor	r8, r8

00006702 <.LVL3>:
   a += b* (y+(y>>4)+(y>>8));
    6702:	e5 2f       	mov	r30, r21
    6704:	ff 27       	eor	r31, r31

00006706 <.LVL4>:
   b = b*y;
   bb = b>>16;
    6706:	9a 01       	movw	r18, r20
    6708:	da 01       	movw	r26, r20
    670a:	df d4       	rcall	.+2494   	; 0x70ca <__umulhisi3>
    670c:	dc 01       	movw	r26, r24

0000670e <.LVL5>:
   bb>>=2;                                     // not integrated in previous line because then compiler does an 18-position shift of a 32-bit variable :-(
   unsigned short bb2=bb>>2;                   // without this intermediate variable, compiler does some of >> multiple times
   a += y * (unsigned long int) (bb - bb2);
   bb = (bb2>>1)*(y>>8);            
    670e:	9c 01       	movw	r18, r24
    6710:	65 e0       	ldi	r22, 0x05	; 5

00006712 <.L1^B1>:
    6712:	36 95       	lsr	r19
    6714:	27 95       	ror	r18
    6716:	6a 95       	dec	r22
    6718:	e1 f7       	brne	.-8      	; 0x6712 <.L1^B1>

0000671a <.Loc.19>:
    671a:	e2 9f       	mul	r30, r18
    671c:	c0 01       	movw	r24, r0
    671e:	e3 9f       	mul	r30, r19
    6720:	90 0d       	add	r25, r0
    6722:	f2 9f       	mul	r31, r18
    6724:	90 0d       	add	r25, r0
    6726:	11 24       	eor	r1, r1

00006728 <.LVL6>:
   a += b* (y+(y>>4)+(y>>8));
    6728:	ba 01       	movw	r22, r20
    672a:	24 e0       	ldi	r18, 0x04	; 4

0000672c <.L1^B2>:
    672c:	76 95       	lsr	r23
    672e:	67 95       	ror	r22
    6730:	2a 95       	dec	r18
    6732:	e1 f7       	brne	.-8      	; 0x672c <.L1^B2>

00006734 <.LVL7>:
    6734:	6e 0f       	add	r22, r30
    6736:	7f 1f       	adc	r23, r31

00006738 <.LVL8>:
    6738:	64 0f       	add	r22, r20
    673a:	75 1f       	adc	r23, r21

0000673c <.Loc.25>:
   bb>>=2;                                     // not integrated in previous line because then compiler does an 18-position shift of a 32-bit variable :-(
    673c:	9d 01       	movw	r18, r26
    673e:	36 95       	lsr	r19
    6740:	27 95       	ror	r18
    6742:	36 95       	lsr	r19
    6744:	27 95       	ror	r18

00006746 <.Loc.26>:
   unsigned short bb2=bb>>2;                   // without this intermediate variable, compiler does some of >> multiple times
    6746:	54 e0       	ldi	r21, 0x04	; 4

00006748 <.L1^B3>:
    6748:	b6 95       	lsr	r27
    674a:	a7 95       	ror	r26
    674c:	5a 95       	dec	r21
    674e:	e1 f7       	brne	.-8      	; 0x6748 <.L1^B3>

00006750 <.LVL9>:
   a += y * (unsigned long int) (bb - bb2);
    6750:	2a 1b       	sub	r18, r26
    6752:	3b 0b       	sbc	r19, r27

00006754 <.LVL10>:
    6754:	40 e0       	ldi	r20, 0x00	; 0
    6756:	50 e0       	ldi	r21, 0x00	; 0

00006758 <.Loc.29>:
   a += y * (unsigned long int)(bb - (bb>>3));
    6758:	26 0f       	add	r18, r22
    675a:	37 1f       	adc	r19, r23
    675c:	41 1d       	adc	r20, r1
    675e:	51 1d       	adc	r21, r1

00006760 <.LVL11>:
    6760:	bc 01       	movw	r22, r24
    6762:	e3 e0       	ldi	r30, 0x03	; 3

00006764 <.L1^B4>:
    6764:	76 95       	lsr	r23
    6766:	67 95       	ror	r22
    6768:	ea 95       	dec	r30
    676a:	e1 f7       	brne	.-8      	; 0x6764 <.L1^B4>

0000676c <.LVL12>:
    676c:	86 1b       	sub	r24, r22
    676e:	97 0b       	sbc	r25, r23

00006770 <.LVL13>:
    6770:	28 0f       	add	r18, r24
    6772:	39 1f       	adc	r19, r25
    6774:	41 1d       	adc	r20, r1
    6776:	51 1d       	adc	r21, r1
    6778:	c7 01       	movw	r24, r14
    677a:	b6 01       	movw	r22, r12
    677c:	26 d4       	rcall	.+2124   	; 0x6fca <__mulsi3>

0000677e <.LVL14>:
    677e:	68 0d       	add	r22, r8
    6780:	79 1d       	adc	r23, r9
    6782:	8a 1d       	adc	r24, r10
    6784:	9b 1d       	adc	r25, r11

00006786 <.Loc.34>:
   return a>>16;
} /* end mylog */
    6786:	ff 90       	pop	r15
    6788:	ef 90       	pop	r14
    678a:	df 90       	pop	r13
    678c:	cf 90       	pop	r12

0000678e <.LVL15>:
    678e:	bf 90       	pop	r11
    6790:	af 90       	pop	r10
    6792:	9f 90       	pop	r9
    6794:	8f 90       	pop	r8
    6796:	08 95       	ret

00006798 <sampling_cap>:


int32_t sampling_cap(byte HighPin, byte LowPin, byte opts)
{
    6798:	a3 e0       	ldi	r26, 0x03	; 3
    679a:	b2 e0       	ldi	r27, 0x02	; 2
    679c:	e1 ed       	ldi	r30, 0xD1	; 209
    679e:	f3 e3       	ldi	r31, 0x33	; 51
    67a0:	b9 c4       	rjmp	.+2418   	; 0x7114 <__prologue_saves__>

000067a2 <.L1^B5>:
    67a2:	18 2f       	mov	r17, r24
    67a4:	26 2e       	mov	r2, r22
    67a6:	cd 5f       	subi	r28, 0xFD	; 253
    67a8:	dd 4f       	sbci	r29, 0xFD	; 253
    67aa:	48 83       	st	Y, r20
    67ac:	c3 50       	subi	r28, 0x03	; 3
    67ae:	d2 40       	sbci	r29, 0x02	; 2

000067b0 <.Loc.38>:
  EntladePins();
    67b0:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <EntladePins>

000067b4 <.LBB2>:

  uint8_t HiPinR_L, HiPinR_H;
  uint8_t LoADC;
  uint16_t samp_opt;
  HiPinR_L = pgm_read_byte(&PinRLRHADCtab[HighPin]);	//R_L mask for HighPin R_L load
    67b4:	e1 2f       	mov	r30, r17
    67b6:	f0 e0       	ldi	r31, 0x00	; 0
    67b8:	e5 5b       	subi	r30, 0xB5	; 181
    67ba:	fd 4f       	sbci	r31, 0xFD	; 253
    67bc:	b4 90       	lpm	r11, Z

000067be <.LBE2>:
#if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
  HiPinR_H = pgm_read_byte((&PinRLRHADCtab[3])+HighPin);	//R_H mask for HighPin R_H load
  LoADC = pgm_read_byte((&PinRLRHADCtab[6])+LowPin) | TXD_MSK;
#else
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    67be:	ab 2c       	mov	r10, r11
    67c0:	aa 0c       	add	r10, r10

000067c2 <.LBB3>:
  LoADC = pgm_read_byte((&PinRLRHADCtab[3])+LowPin) | TXD_MSK;
    67c2:	e2 2d       	mov	r30, r2
    67c4:	f0 e0       	ldi	r31, 0x00	; 0
    67c6:	e2 5b       	subi	r30, 0xB2	; 178
    67c8:	fd 4f       	sbci	r31, 0xFD	; 253
    67ca:	e4 91       	lpm	r30, Z

000067cc <.LBE3>:
#endif

   byte i=0;

   unsigned int uu[256];
   ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    67cc:	e7 b9       	out	0x07, r30	; 7

000067ce <.LVL21>:
   R_PORT = 0;			//R_L to 0 (GND) 
    67ce:	15 b8       	out	0x05, r1	; 5

000067d0 <.Loc.62>:
   R_DDR = HiPinR_L;			
    67d0:	b4 b8       	out	0x04, r11	; 4

000067d2 <.Loc.64>:
//   wait200us();			// let the last ADC cycle finish

   ADMUX = HighPin|(1<<REFS0);	// switch Multiplexer to Highpin and use 5V reference voltage
    67d2:	81 2f       	mov	r24, r17
    67d4:	80 64       	ori	r24, 0x40	; 64
    67d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

000067da <.Loc.66>:
#ifdef NO_AREF_CAP
    wait100us(); /* time for voltage stabilization */
    67da:	0e 94 b8 07 	call	0xf70	; 0xf70 <wait100us>

000067de <.LVL22>:
#ifdef SamplingADC_CNT
   samp_opt = 1;		// sample distance 1
#else
   samp_opt = 0;
#endif
   byte d=( (opts&1) ? HiPinR_L : HiPinR_H );
    67de:	cd 5f       	subi	r28, 0xFD	; 253
    67e0:	dd 4f       	sbci	r29, 0xFD	; 253
    67e2:	28 81       	ld	r18, Y
    67e4:	c3 50       	subi	r28, 0x03	; 3
    67e6:	d2 40       	sbci	r29, 0x02	; 2
    67e8:	21 70       	andi	r18, 0x01	; 1
    67ea:	32 2e       	mov	r3, r18

000067ec <.Loc.70>:
    67ec:	db 2c       	mov	r13, r11

000067ee <.Loc.71>:
    67ee:	21 11       	cpse	r18, r1
    67f0:	01 c0       	rjmp	.+2      	; 0x67f4 <.L3>

000067f2 <.Loc.72>:
    67f2:	da 2c       	mov	r13, r10

000067f4 <.L3>:
    67f4:	e0 e2       	ldi	r30, 0x20	; 32
    67f6:	fe 2e       	mov	r15, r30

000067f8 <.Loc.76>:
   samp_opt = 0;
    67f8:	80 e0       	ldi	r24, 0x00	; 0
    67fa:	90 e0       	ldi	r25, 0x00	; 0

000067fc <.L4>:

   for (i=0;i<32;i++) {
      samplingADC(samp_opt, uu, N2+1, d, HiPinR_H, d, HiPinR_L);
    67fc:	cb 2c       	mov	r12, r11
    67fe:	ed 2c       	mov	r14, r13
    6800:	0a 2d       	mov	r16, r10
    6802:	2d 2d       	mov	r18, r13
    6804:	44 e7       	ldi	r20, 0x74	; 116
    6806:	be 01       	movw	r22, r28
    6808:	6f 5f       	subi	r22, 0xFF	; 255
    680a:	7f 4f       	sbci	r23, 0xFF	; 255
    680c:	0e 94 34 00 	call	0x68	; 0x68 <samplingADC>

00006810 <.LVL25>:
   for (i=0;i<32;i++) {
    6810:	fa 94       	dec	r15

00006812 <.LVL26>:
    6812:	80 e4       	ldi	r24, 0x40	; 64
    6814:	90 e0       	ldi	r25, 0x00	; 0
    6816:	f1 10       	cpse	r15, r1
    6818:	f1 cf       	rjmp	.-30     	; 0x67fc <.L4>

0000681a <.Loc.82>:
      samp_opt |= samplingADC_cumul;
   }
//   uart_newline(); for (i=0;i<N2;i++) { myuart_putc('a'); myuart_putc(' '); uart_int(uu[i]); uart_newline(); wdt_reset(); }

   R_DDR = 0;			
    681a:	14 b8       	out	0x04, r1	; 4

0000681c <.LVL27>:

   // we use the least-squares algorithm to find the slope
   // cf. e.g. https://en.wikipedia.org/wiki/Ordinary_least_squares
   unsigned long sumy, sumxy;
   sumy=sumxy=0;
   for (i=N1;i<=N2;i++) {	/* 70-230 @16MHz, 35-115 @8MHz */
    681c:	ce 01       	movw	r24, r28
    681e:	89 5b       	subi	r24, 0xB9	; 185
    6820:	9f 4f       	sbci	r25, 0xFF	; 255
    6822:	cf 5f       	subi	r28, 0xFF	; 255
    6824:	dd 4f       	sbci	r29, 0xFD	; 253
    6826:	99 83       	std	Y+1, r25	; 0x01
    6828:	88 83       	st	Y, r24
    682a:	c1 50       	subi	r28, 0x01	; 1
    682c:	d2 40       	sbci	r29, 0x02	; 2

0000682e <.Loc.88>:
   R_DDR = 0;			
    682e:	73 e2       	ldi	r23, 0x23	; 35
    6830:	47 2e       	mov	r4, r23
    6832:	51 2c       	mov	r5, r1
    6834:	61 2c       	mov	r6, r1
    6836:	71 2c       	mov	r7, r1

00006838 <.Loc.89>:
   sumy=sumxy=0;
    6838:	c1 2c       	mov	r12, r1
    683a:	d1 2c       	mov	r13, r1
    683c:	76 01       	movw	r14, r12

0000683e <.Loc.90>:
    683e:	81 2c       	mov	r8, r1
    6840:	91 2c       	mov	r9, r1
    6842:	54 01       	movw	r10, r8

00006844 <.L7>:
      if (i==N3) i=N4;		// skip from N3 to (N4-1), 182-192 @16MHz, 200-200 @8MHz
      unsigned int z;
      if (opts&1) z=mylog(32768-uu[i]);
    6844:	cf 5f       	subi	r28, 0xFF	; 255
    6846:	dd 4f       	sbci	r29, 0xFD	; 253
    6848:	e8 81       	ld	r30, Y
    684a:	f9 81       	ldd	r31, Y+1	; 0x01
    684c:	c1 50       	subi	r28, 0x01	; 1
    684e:	d2 40       	sbci	r29, 0x02	; 2
    6850:	81 91       	ld	r24, Z+
    6852:	91 91       	ld	r25, Z+
    6854:	cf 5f       	subi	r28, 0xFF	; 255
    6856:	dd 4f       	sbci	r29, 0xFD	; 253
    6858:	f9 83       	std	Y+1, r31	; 0x01
    685a:	e8 83       	st	Y, r30
    685c:	c1 50       	subi	r28, 0x01	; 1
    685e:	d2 40       	sbci	r29, 0x02	; 2

00006860 <.Loc.95>:
    6860:	31 14       	cp	r3, r1
    6862:	29 f0       	breq	.+10     	; 0x686e <.L5>

00006864 <.Loc.96>:
    6864:	20 e0       	ldi	r18, 0x00	; 0
    6866:	30 e8       	ldi	r19, 0x80	; 128
    6868:	28 1b       	sub	r18, r24
    686a:	39 0b       	sbc	r19, r25
    686c:	c9 01       	movw	r24, r18

0000686e <.L5>:
      else z=mylog(uu[i]);
    686e:	3a df       	rcall	.-396    	; 0x66e4 <mylog>

00006870 <.LVL29>:
    6870:	9c 01       	movw	r18, r24

00006872 <.LVL30>:
      sumy+=z;
    6872:	40 e0       	ldi	r20, 0x00	; 0
    6874:	50 e0       	ldi	r21, 0x00	; 0
    6876:	82 0e       	add	r8, r18
    6878:	93 1e       	adc	r9, r19
    687a:	a4 1e       	adc	r10, r20
    687c:	b5 1e       	adc	r11, r21

0000687e <.Loc.102>:
      sumxy+=(unsigned long int)i*z;
    687e:	c3 01       	movw	r24, r6
    6880:	b2 01       	movw	r22, r4
    6882:	a3 d3       	rcall	.+1862   	; 0x6fca <__mulsi3>

00006884 <.Loc.104>:
    6884:	c6 0e       	add	r12, r22
    6886:	d7 1e       	adc	r13, r23
    6888:	e8 1e       	adc	r14, r24
    688a:	f9 1e       	adc	r15, r25

0000688c <.LBE4>:
   for (i=N1;i<=N2;i++) {	/* 70-230 @16MHz, 35-115 @8MHz */
    688c:	3f ef       	ldi	r19, 0xFF	; 255
    688e:	43 1a       	sub	r4, r19
    6890:	53 0a       	sbc	r5, r19
    6892:	63 0a       	sbc	r6, r19
    6894:	73 0a       	sbc	r7, r19

00006896 <.LVL33>:
    6896:	84 e7       	ldi	r24, 0x74	; 116
    6898:	48 16       	cp	r4, r24
    689a:	51 04       	cpc	r5, r1
    689c:	61 04       	cpc	r6, r1
    689e:	71 04       	cpc	r7, r1
    68a0:	89 f6       	brne	.-94     	; 0x6844 <.L7>

000068a2 <.LVL34>:
   // sumy ~ 2^22
   // sumxy ~ 2^30
   // at 8 MHz, we sum roughly half as many sample samples, and x will get only half as big, so sumxy will be about 1/4, and sumxx 1/8
   sumxx -= sumx*sumx/N;
   // now sumxx ~ <2^19 , as it turns out; note that sumxx is a constant, depending only on N and N1..4; it was a variable previously, hence this code
   sumxy -= sumx*(sumy/N);
    68a2:	c5 01       	movw	r24, r10
    68a4:	b4 01       	movw	r22, r8
    68a6:	21 e5       	ldi	r18, 0x51	; 81
    68a8:	30 e0       	ldi	r19, 0x00	; 0
    68aa:	40 e0       	ldi	r20, 0x00	; 0
    68ac:	50 e0       	ldi	r21, 0x00	; 0

000068ae <.LVL35>:
    68ae:	cf d3       	rcall	.+1950   	; 0x704e <__udivmodsi4>

000068b0 <.Loc.113>:
    68b0:	ab eb       	ldi	r26, 0xBB	; 187
    68b2:	b7 e1       	ldi	r27, 0x17	; 23
    68b4:	1f d4       	rcall	.+2110   	; 0x70f4 <__muluhisi3>

000068b6 <.Loc.114>:
    68b6:	c6 1a       	sub	r12, r22
    68b8:	d7 0a       	sbc	r13, r23
    68ba:	e8 0a       	sbc	r14, r24
    68bc:	f9 0a       	sbc	r15, r25

000068be <.LVL36>:
#if MHZ_CPU>=16
   sumxx>>=3;   // bitshift such that sumxx fits in 16 bits
   sumxy>>=6;   // we shift sumxy by 3 bits more than sumxx because a few lines down we have an extra /8 to make things fit 
#elif MHZ_CPU==8
   sumxx>>=0;
   sumxy>>=4;
    68be:	a7 01       	movw	r20, r14
    68c0:	96 01       	movw	r18, r12
    68c2:	64 e0       	ldi	r22, 0x04	; 4

000068c4 <.L1^B6>:
    68c4:	56 95       	lsr	r21
    68c6:	47 95       	ror	r20
    68c8:	37 95       	ror	r19
    68ca:	27 95       	ror	r18
    68cc:	6a 95       	dec	r22
    68ce:	d1 f7       	brne	.-12     	; 0x68c4 <.L1^B6>

000068d0 <.LVL37>:
   unsigned long int c3;
#if MHZ_CPU == 20
   // at 20 MHz, and aiming for units of 10^{-14} Farad, the constant becomes 32768e14/20e6/R = 16384e7/R
   c3 = sumxx*((uint32_t)(((16384000000./R_H_VAL)+4)/8))/sumxy;  // units of 0.01 pF
#else
   c3 = sumxx*((uint32_t)(((20480000000./R_H_VAL)+4)/8))/sumxy;  // units of 0.01 pF
    68d0:	60 ee       	ldi	r22, 0xE0	; 224
    68d2:	7d ec       	ldi	r23, 0xCD	; 205
    68d4:	81 ec       	ldi	r24, 0xC1	; 193
    68d6:	9f e8       	ldi	r25, 0x8F	; 143
    68d8:	ba d3       	rcall	.+1908   	; 0x704e <__udivmodsi4>

000068da <.LVL38>:
    68da:	69 01       	movw	r12, r18
    68dc:	7a 01       	movw	r14, r20

000068de <.LVL39>:
#endif
   // the /8 is to make the (...) factor (about 435745) fit in 16 bits
   // note that the /8 is compensated for by the different bitshifts of sumxx and sumxy, and the +4 rounds this number properly
   if (!(opts&2)) 
    68de:	cd 5f       	subi	r28, 0xFD	; 253
    68e0:	dd 4f       	sbci	r29, 0xFD	; 253
    68e2:	98 81       	ld	r25, Y
    68e4:	c3 50       	subi	r28, 0x03	; 3
    68e6:	d2 40       	sbci	r29, 0x02	; 2
    68e8:	91 fd       	sbrc	r25, 1
    68ea:	12 c0       	rjmp	.+36     	; 0x6910 <.L8>

000068ec <.LBB5>:
   {
      byte k = ((HighPin - TP_MIN)*3) + LowPin - TP_MIN -1;
    68ec:	81 2f       	mov	r24, r17
    68ee:	88 0f       	add	r24, r24
    68f0:	81 0f       	add	r24, r17

000068f2 <.Loc.127>:
    68f2:	9f ef       	ldi	r25, 0xFF	; 255
    68f4:	92 0d       	add	r25, r2
    68f6:	89 0f       	add	r24, r25

000068f8 <.Loc.128>:
      if (opts&1) c3-= eeprom_read_word(c_zero_tab2_hi+k);
    68f8:	90 e0       	ldi	r25, 0x00	; 0
    68fa:	88 0f       	add	r24, r24
    68fc:	99 1f       	adc	r25, r25

000068fe <.Loc.129>:
    68fe:	31 14       	cp	r3, r1
    6900:	69 f0       	breq	.+26     	; 0x691c <.L9>

00006902 <.Loc.130>:
    6902:	85 5e       	subi	r24, 0xE5	; 229
    6904:	9c 4f       	sbci	r25, 0xFC	; 252

00006906 <.L13>:
      else c3-= eeprom_read_word(c_zero_tab2_lo+k);
    6906:	99 d4       	rcall	.+2354   	; 0x723a <eeprom_read_word>

00006908 <.LVL41>:
    6908:	c8 1a       	sub	r12, r24
    690a:	d9 0a       	sbc	r13, r25
    690c:	e1 08       	sbc	r14, r1
    690e:	f1 08       	sbc	r15, r1

00006910 <.L8>:
   }
   return c3;
}  /* end sampling_cap */
    6910:	c7 01       	movw	r24, r14
    6912:	b6 01       	movw	r22, r12
    6914:	cd 5f       	subi	r28, 0xFD	; 253
    6916:	dd 4f       	sbci	r29, 0xFD	; 253
    6918:	e2 e1       	ldi	r30, 0x12	; 18
    691a:	18 c4       	rjmp	.+2096   	; 0x714c <__epilogue_restores__>

0000691c <.L9>:
      else c3-= eeprom_read_word(c_zero_tab2_lo+k);
    691c:	87 5d       	subi	r24, 0xD7	; 215
    691e:	9c 4f       	sbci	r25, 0xFC	; 252
    6920:	f2 cf       	rjmp	.-28     	; 0x6906 <.L13>

00006922 <sampling_cap_calibrate>:




void sampling_cap_calibrate()
{
    6922:	a0 e0       	ldi	r26, 0x00	; 0
    6924:	b0 e0       	ldi	r27, 0x00	; 0
    6926:	e6 e9       	ldi	r30, 0x96	; 150
    6928:	f4 e3       	ldi	r31, 0x34	; 52
    692a:	ff c3       	rjmp	.+2046   	; 0x712a <.Loc.11>

0000692c <.L1^B7>:
   // measure capacitance of all combinations without anything connected
   byte i,j;
   for (i=0;i<=2;i++)
    692c:	c0 e0       	ldi	r28, 0x00	; 0

0000692e <.L15>:
      for (j=0;j<=2;j++)
    692e:	fc 2e       	mov	r15, r28
    6930:	ff 0c       	add	r15, r15
    6932:	fc 0e       	add	r15, r28

00006934 <.Loc.145>:
    6934:	d0 e0       	ldi	r29, 0x00	; 0

00006936 <.LBB7>:
            lcd_testpin(i);
            lcd_data(':');
            lcd_testpin(j);
            lcd_space();				//lcd_data(' ');
            lcd_line2();
            byte k=3*i+j-1;
    6936:	fa 94       	dec	r15

00006938 <.L17>:
         if (i!=j) {
    6938:	cd 17       	cp	r28, r29
    693a:	a9 f1       	breq	.+106    	; 0x69a6 <.L16>

0000693c <.LBB8>:
            c=sampling_cap(i,j,2);
    693c:	42 e0       	ldi	r20, 0x02	; 2
    693e:	6d 2f       	mov	r22, r29
    6940:	8c 2f       	mov	r24, r28
    6942:	2a df       	rcall	.-428    	; 0x6798 <sampling_cap>

00006944 <.LVL47>:
    6944:	d6 2e       	mov	r13, r22
    6946:	e7 2e       	mov	r14, r23

00006948 <.Loc.153>:
            lcd_clear();
    6948:	0e 94 14 0b 	call	0x1628	; 0x1628 <lcd_clear>

0000694c <.LVL49>:
            lcd_MEM2_string(C0samp_str);			//output "C0samp "
    694c:	87 e9       	ldi	r24, 0x97	; 151
    694e:	90 e0       	ldi	r25, 0x00	; 0
    6950:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00006954 <.LVL50>:
            lcd_space();				// lcd_data(' ');
    6954:	0e 94 b4 06 	call	0xd68	; 0xd68 <lcd_space>

00006958 <.LVL51>:
            lcd_testpin(i);
    6958:	8c 2f       	mov	r24, r28
    695a:	0e 94 99 0c 	call	0x1932	; 0x1932 <lcd_testpin>

0000695e <.LVL52>:
            lcd_data(':');
    695e:	8a e3       	ldi	r24, 0x3A	; 58
    6960:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_data>

00006964 <.LVL53>:
            lcd_testpin(j);
    6964:	8d 2f       	mov	r24, r29
    6966:	0e 94 99 0c 	call	0x1932	; 0x1932 <lcd_testpin>

0000696a <.LVL54>:
            lcd_space();				//lcd_data(' ');
    696a:	0e 94 b4 06 	call	0xd68	; 0xd68 <lcd_space>

0000696e <.LVL55>:
            lcd_line2();
    696e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_line2>

00006972 <.LVL56>:
            DisplayValue16(c,-2,' ',4);
            DisplayValue16(d,-14,'F',4);
            eeprom_write_word((void*)(c_zero_tab2_lo+k),c); /* C0 from 0 to 1 */
            eeprom_write_word((void*)(c_zero_tab2_hi+k),d); /* C0 from 1 to 0 */
#else
            DisplayValue16(c,-14,' ',4);
    6972:	24 e0       	ldi	r18, 0x04	; 4
    6974:	40 e2       	ldi	r20, 0x20	; 32
    6976:	62 ef       	ldi	r22, 0xF2	; 242
    6978:	8d 2d       	mov	r24, r13
    697a:	9e 2d       	mov	r25, r14
    697c:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

00006980 <.LVL57>:
            eeprom_write_word((void*)(c_zero_tab2_lo+k),c); /* C0 from 0 to 1 */
    6980:	0f 2d       	mov	r16, r15
    6982:	0d 0f       	add	r16, r29
    6984:	10 e0       	ldi	r17, 0x00	; 0
    6986:	00 0f       	add	r16, r16
    6988:	11 1f       	adc	r17, r17

0000698a <.Loc.165>:
    698a:	6d 2d       	mov	r22, r13
    698c:	7e 2d       	mov	r23, r14
    698e:	c8 01       	movw	r24, r16
    6990:	87 5d       	subi	r24, 0xD7	; 215
    6992:	9c 4f       	sbci	r25, 0xFC	; 252
    6994:	65 d4       	rcall	.+2250   	; 0x7260 <eeprom_write_word>

00006996 <.LVL58>:
            eeprom_write_word((void*)(c_zero_tab2_hi+k),c); /* set 1to0 same as 0to1 */
    6996:	6d 2d       	mov	r22, r13
    6998:	7e 2d       	mov	r23, r14
    699a:	c8 01       	movw	r24, r16
    699c:	85 5e       	subi	r24, 0xE5	; 229
    699e:	9c 4f       	sbci	r25, 0xFC	; 252
    69a0:	5f d4       	rcall	.+2238   	; 0x7260 <eeprom_write_word>

000069a2 <.LVL59>:
#endif
            lcd_clear_line();
    69a2:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

000069a6 <.L16>:
      for (j=0;j<=2;j++)
    69a6:	df 5f       	subi	r29, 0xFF	; 255

000069a8 <.Loc.170>:
    69a8:	d3 30       	cpi	r29, 0x03	; 3
    69aa:	31 f6       	brne	.-116    	; 0x6938 <.L17>

000069ac <.Loc.171>:
   for (i=0;i<=2;i++)
    69ac:	cf 5f       	subi	r28, 0xFF	; 255

000069ae <.Loc.172>:
    69ae:	c3 30       	cpi	r28, 0x03	; 3
    69b0:	09 f0       	breq	.+2      	; 0x69b4 <.Loc.173>

000069b2 <L0^A>:
    69b2:	bd cf       	rjmp	.-134    	; 0x692e <.L15>

000069b4 <.Loc.173>:
            lcd_refresh();
         }
   lcd_line1();
    69b4:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <lcd_line1>

000069b8 <.LVL63>:
   lcd_MEM_string(OK_str);	// "OK"
    69b8:	85 ea       	ldi	r24, 0xA5	; 165
    69ba:	91 e0       	ldi	r25, 0x01	; 1
    69bc:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

000069c0 <.LVL64>:
   lcd_clear_line();
    69c0:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

000069c4 <.LVL65>:
   lcd_refresh();
   wait_about200ms();
    69c4:	88 e2       	ldi	r24, 0x28	; 40
    69c6:	0e 94 c5 07 	call	0xf8a	; 0xf8a <sleep_5ms>

000069ca <.LVL66>:
} /* end sampling_cap_calibrate */
    69ca:	cd b7       	in	r28, 0x3d	; 61
    69cc:	de b7       	in	r29, 0x3e	; 62

000069ce <.LVL67>:
    69ce:	e7 e0       	ldi	r30, 0x07	; 7
    69d0:	c8 c3       	rjmp	.+1936   	; 0x7162 <.Loc.11>

000069d2 <peaksearch>:

static unsigned int peaksearch(unsigned int uu[], unsigned int *qptr)
// searches uu[256] for peaks, using averaging over dist samples 
// writes measured Q *10 into *qptr if non-NULL
// returns measured period, with 6 bits of fraction, or 256*64 if no resonance found
{  
    69d2:	a2 e1       	ldi	r26, 0x12	; 18
    69d4:	b0 e0       	ldi	r27, 0x00	; 0
    69d6:	ee ee       	ldi	r30, 0xEE	; 238
    69d8:	f4 e3       	ldi	r31, 0x34	; 52
    69da:	9c c3       	rjmp	.+1848   	; 0x7114 <__prologue_saves__>

000069dc <.L1^B1>:
    69dc:	8b 83       	std	Y+3, r24	; 0x03
    69de:	9c 83       	std	Y+4, r25	; 0x04
    69e0:	1b 01       	movw	r2, r22

000069e2 <.LVL1>:
   unsigned int mean_per;		// average period; the (ipk>>2) provides for rounding
   unsigned int last_per;		// length of last period with 6 bits of fraction
   unsigned int sum_ab;
   unsigned int rr;
   
   dist = 1;		// begin peak search with dist=1
    69e2:	cc 24       	eor	r12, r12
    69e4:	c3 94       	inc	r12

000069e6 <.L2>:
 #define MinPK 1
   sawzero = 0;		// flag: did we allready encounter a growing signal?
#endif
   prevdelta=1;
   mean_per = 256<<6;	// set period illegal
   for (ii=0;ii<255-dist;ii++) 
    69e6:	8c 2c       	mov	r8, r12
    69e8:	91 2c       	mov	r9, r1

000069ea <.LBB2>:

#if PeakSearchMethod == 1
         if (ipk != 0)
#endif
         {
            if (sum_ab < (3*dist)) break;  // stop if peak not significantly high
    69ea:	c4 01       	movw	r24, r8
    69ec:	88 0f       	add	r24, r24
    69ee:	99 1f       	adc	r25, r25
    69f0:	8c 01       	movw	r16, r24
    69f2:	08 0d       	add	r16, r8
    69f4:	19 1d       	adc	r17, r9
    69f6:	1e 87       	std	Y+14, r17	; 0x0e
    69f8:	0d 87       	std	Y+13, r16	; 0x0d

000069fa <.Loc.36>:
#if PeakSearchMethod == 1
            if (ipk==1)
#else
            if (ii < (dist*4)) goto illegal_peak;
    69fa:	94 01       	movw	r18, r8
    69fc:	22 0f       	add	r18, r18
    69fe:	33 1f       	adc	r19, r19
    6a00:	22 0f       	add	r18, r18
    6a02:	33 1f       	adc	r19, r19
    6a04:	3c 87       	std	Y+12, r19	; 0x0c
    6a06:	2b 87       	std	Y+11, r18	; 0x0b

00006a08 <.LBE2>:
   mean_per = 256<<6;	// set period illegal
    6a08:	19 82       	std	Y+1, r1	; 0x01
    6a0a:	30 e4       	ldi	r19, 0x40	; 64
    6a0c:	3a 83       	std	Y+2, r19	; 0x02

00006a0e <.Loc.38>:
   sawzero = 0;		// flag: did we allready encounter a growing signal?
    6a0e:	50 e0       	ldi	r21, 0x00	; 0

00006a10 <.Loc.39>:
   prevpeak_x=0;      // time of previous peak, with 6 bits of fraction
    6a10:	41 2c       	mov	r4, r1
    6a12:	51 2c       	mov	r5, r1

00006a14 <.Loc.40>:
   firstpeak_x=0;     // time of first peak, with 6 bits of fraction
    6a14:	1f 82       	std	Y+7, r1	; 0x07
    6a16:	18 86       	std	Y+8, r1	; 0x08

00006a18 <.Loc.41>:
   sumpeak=0;        // sum of peaks
    6a18:	61 2c       	mov	r6, r1
    6a1a:	71 2c       	mov	r7, r1

00006a1c <.Loc.42>:
   prevpeak_sum=0;       // height of previous peak
    6a1c:	a1 2c       	mov	r10, r1
    6a1e:	b1 2c       	mov	r11, r1

00006a20 <.Loc.43>:
   firstpeak_sum=0;      // height of first peak
    6a20:	1d 82       	std	Y+5, r1	; 0x05
    6a22:	1e 82       	std	Y+6, r1	; 0x06

00006a24 <.Loc.44>:
   ipk=0;    // peak counter
    6a24:	40 e0       	ldi	r20, 0x00	; 0

00006a26 <.Loc.45>:
   for (ii=0;ii<255-dist;ii++) 
    6a26:	d1 2c       	mov	r13, r1

00006a28 <.Loc.46>:
   bb = 0;
    6a28:	e0 e0       	ldi	r30, 0x00	; 0
    6a2a:	f0 e0       	ldi	r31, 0x00	; 0

00006a2c <.Loc.47>:
   aa = 0;
    6a2c:	20 e0       	ldi	r18, 0x00	; 0
    6a2e:	30 e0       	ldi	r19, 0x00	; 0

00006a30 <.Loc.48>:
   prevdelta=1;
    6a30:	61 e0       	ldi	r22, 0x01	; 1
    6a32:	70 e0       	ldi	r23, 0x00	; 0

00006a34 <.Loc.49>:
   for (ii=0;ii<255-dist;ii++) 
    6a34:	0f ef       	ldi	r16, 0xFF	; 255
    6a36:	10 e0       	ldi	r17, 0x00	; 0
    6a38:	08 19       	sub	r16, r8
    6a3a:	19 09       	sbc	r17, r9
    6a3c:	18 8b       	std	Y+16, r17	; 0x10
    6a3e:	0f 87       	std	Y+15, r16	; 0x0f

00006a40 <.L3>:
    6a40:	ed 2c       	mov	r14, r13
    6a42:	f1 2c       	mov	r15, r1
    6a44:	0f 85       	ldd	r16, Y+15	; 0x0f
    6a46:	18 89       	ldd	r17, Y+16	; 0x10
    6a48:	d0 16       	cp	r13, r16
    6a4a:	11 06       	cpc	r1, r17
    6a4c:	44 f1       	brlt	.+80     	; 0x6a9e <.L12>

00006a4e <.L7>:
      prevdelta = delta;
   } /* end for ii */

   /* total data are analysed, ipk is now the count of peaks + 1 */
//   if (firstzero>(per>>6)) return 0;     // sanity check: first zero should be within first period
   if (qptr) {
    6a4e:	21 14       	cp	r2, r1
    6a50:	31 04       	cpc	r3, r1
    6a52:	01 f1       	breq	.+64     	; 0x6a94 <.L1>

00006a54 <.LVL5>:
      // calculate r = ratio of amplitude between two consecutive peaks (*1000 for scaling)
      // but we use all peaks seen in this calculation for better accuracy
      // r is weighted average of peak2/peak1, peak3/peak2 and so on, weighed by respectively peak1, peak2 and so on
      // this can be calculated as r = (peak2+peak3+...+peak_m)/(peak1+peak2+peak_{m-1})
      rr = 0;
    6a54:	60 e0       	ldi	r22, 0x00	; 0
    6a56:	70 e0       	ldi	r23, 0x00	; 0

00006a58 <.Loc.56>:
      if (ipk > MinPK) {
    6a58:	42 30       	cpi	r20, 0x02	; 2
    6a5a:	c0 f0       	brcs	.+48     	; 0x6a8c <.L14>

00006a5c <.L16>:
         unsigned int sumdiff = sumpeak - prevpeak_sum;
         rr = ((unsigned long)(sumpeak-firstpeak_sum)*1000)/sumdiff;
    6a5c:	93 01       	movw	r18, r6

00006a5e <.LVL7>:
    6a5e:	ed 81       	ldd	r30, Y+5	; 0x05
    6a60:	fe 81       	ldd	r31, Y+6	; 0x06

00006a62 <.LVL8>:
    6a62:	2e 1b       	sub	r18, r30
    6a64:	3f 0b       	sbc	r19, r31

00006a66 <.LVL9>:
    6a66:	a8 ee       	ldi	r26, 0xE8	; 232
    6a68:	b3 e0       	ldi	r27, 0x03	; 3
    6a6a:	2f d3       	rcall	.+1630   	; 0x70ca <__umulhisi3>

00006a6c <.Loc.64>:
         unsigned int sumdiff = sumpeak - prevpeak_sum;
    6a6c:	6a 18       	sub	r6, r10
    6a6e:	7b 08       	sbc	r7, r11

00006a70 <.LVL10>:
         rr = ((unsigned long)(sumpeak-firstpeak_sum)*1000)/sumdiff;
    6a70:	93 01       	movw	r18, r6

00006a72 <.Loc.66>:
    6a72:	40 e0       	ldi	r20, 0x00	; 0
    6a74:	50 e0       	ldi	r21, 0x00	; 0
    6a76:	eb d2       	rcall	.+1494   	; 0x704e <__udivmodsi4>

00006a78 <.Loc.67>:
         // rr = exp(-pi/Q)  so Q = -pi/(ln(rr))
         // for r almost 1 (i.e., high Q), this is approx. pi/(1-rr)
         rr = 31416u/get_log(1000-rr);
    6a78:	88 ee       	ldi	r24, 0xE8	; 232
    6a7a:	93 e0       	ldi	r25, 0x03	; 3
    6a7c:	82 1b       	sub	r24, r18
    6a7e:	93 0b       	sbc	r25, r19
    6a80:	0e 94 00 09 	call	0x1200	; 0x1200 <get_log>

00006a84 <.LVL11>:
    6a84:	bc 01       	movw	r22, r24

00006a86 <.Loc.68>:
    6a86:	88 eb       	ldi	r24, 0xB8	; 184
    6a88:	9a e7       	ldi	r25, 0x7A	; 122
    6a8a:	ba d2       	rcall	.+1396   	; 0x7000 <__udivmodhi4>

00006a8c <.L14>:
         // note scaling: the get_log is *1000, and we now compute Q in multiples of .1, hence the numerator being 10000*pi
      }
      *qptr = (unsigned int)rr;
    6a8c:	d1 01       	movw	r26, r2
    6a8e:	6c 93       	st	X, r22
    6a90:	11 96       	adiw	r26, 0x01	; 1
    6a92:	7c 93       	st	X, r23

00006a94 <.L1>:
   DisplayValue(ipk,0,' ',3);
   DisplayValue(((unsigned long)mean_per*25)/16,-2,' ',6);
   DisplayValue(dist,0,' ',5);
#endif
   return mean_per;
}  /* end of peaksearch */
    6a94:	89 81       	ldd	r24, Y+1	; 0x01
    6a96:	9a 81       	ldd	r25, Y+2	; 0x02
    6a98:	62 96       	adiw	r28, 0x12	; 18
    6a9a:	e2 e1       	ldi	r30, 0x12	; 18
    6a9c:	57 c3       	rjmp	.+1710   	; 0x714c <__epilogue_restores__>

00006a9e <.L12>:
      bb += uu[ii+dist];
    6a9e:	d7 01       	movw	r26, r14
    6aa0:	a8 0d       	add	r26, r8
    6aa2:	b9 1d       	adc	r27, r9
    6aa4:	aa 0f       	add	r26, r26
    6aa6:	bb 1f       	adc	r27, r27
    6aa8:	0b 81       	ldd	r16, Y+3	; 0x03
    6aaa:	1c 81       	ldd	r17, Y+4	; 0x04
    6aac:	a0 0f       	add	r26, r16
    6aae:	b1 1f       	adc	r27, r17

00006ab0 <.Loc.76>:
    6ab0:	0d 90       	ld	r0, X+
    6ab2:	bc 91       	ld	r27, X
    6ab4:	a0 2d       	mov	r26, r0
    6ab6:	ae 0f       	add	r26, r30
    6ab8:	bf 1f       	adc	r27, r31

00006aba <.LVL15>:
      aa += uu[ii];
    6aba:	f7 01       	movw	r30, r14
    6abc:	ee 0f       	add	r30, r30
    6abe:	ff 1f       	adc	r31, r31
    6ac0:	e0 0f       	add	r30, r16
    6ac2:	f1 1f       	adc	r31, r17
    6ac4:	80 81       	ld	r24, Z
    6ac6:	91 81       	ldd	r25, Z+1	; 0x01

00006ac8 <.Loc.79>:
    6ac8:	28 0f       	add	r18, r24
    6aca:	39 1f       	adc	r19, r25

00006acc <.Loc.80>:
      if (ii < dist) continue;
    6acc:	dc 14       	cp	r13, r12
    6ace:	08 f4       	brcc	.+2      	; 0x6ad2 <.Loc.82>

00006ad0 <L0^A>:
    6ad0:	8c c0       	rjmp	.+280    	; 0x6bea <.L17>

00006ad2 <.Loc.82>:
      aa -= uu[ii-dist];
    6ad2:	f7 01       	movw	r30, r14
    6ad4:	e8 19       	sub	r30, r8
    6ad6:	f9 09       	sbc	r31, r9

00006ad8 <.Loc.84>:
    6ad8:	ee 0f       	add	r30, r30
    6ada:	ff 1f       	adc	r31, r31
    6adc:	e0 0f       	add	r30, r16
    6ade:	f1 1f       	adc	r31, r17

00006ae0 <.Loc.85>:
    6ae0:	01 90       	ld	r0, Z+
    6ae2:	f0 81       	ld	r31, Z
    6ae4:	e0 2d       	mov	r30, r0
    6ae6:	2e 1b       	sub	r18, r30
    6ae8:	3f 0b       	sbc	r19, r31

00006aea <.Loc.86>:
      bb -= uu[ii];
    6aea:	fd 01       	movw	r30, r26
    6aec:	e8 1b       	sub	r30, r24
    6aee:	f9 0b       	sbc	r31, r25

00006af0 <.LVL18>:
        sum_ab = aa + bb;
    6af0:	89 01       	movw	r16, r18
    6af2:	0e 0f       	add	r16, r30
    6af4:	1f 1f       	adc	r17, r31

00006af6 <.LVL19>:
        delta = aa - bb;
    6af6:	82 0f       	add	r24, r18
    6af8:	93 1f       	adc	r25, r19
    6afa:	8a 1b       	sub	r24, r26
    6afc:	9b 0b       	sbc	r25, r27

00006afe <.Loc.92>:
    6afe:	89 87       	std	Y+9, r24	; 0x09
    6b00:	9a 87       	std	Y+10, r25	; 0x0a

00006b02 <.LVL20>:
        if (((int)(sum_ab/4)+delta) < 0)
    6b02:	d8 01       	movw	r26, r16
    6b04:	b6 95       	lsr	r27
    6b06:	a7 95       	ror	r26
    6b08:	b6 95       	lsr	r27
    6b0a:	a7 95       	ror	r26

00006b0c <.Loc.95>:
    6b0c:	a8 0f       	add	r26, r24
    6b0e:	b9 1f       	adc	r27, r25

00006b10 <.Loc.96>:
    6b10:	b7 fd       	sbrc	r27, 7
    6b12:	76 c0       	rjmp	.+236    	; 0x6c00 <.L5>

00006b14 <.Loc.97>:
      if ((bb < aa) && (sawzero == 1)) {
    6b14:	e2 17       	cp	r30, r18
    6b16:	f3 07       	cpc	r31, r19
    6b18:	08 f0       	brcs	.+2      	; 0x6b1c <.Loc.99>

00006b1a <L0^A>:
    6b1a:	6a c0       	rjmp	.+212    	; 0x6bf0 <.L4>

00006b1c <.Loc.99>:
    6b1c:	51 30       	cpi	r21, 0x01	; 1
    6b1e:	09 f0       	breq	.+2      	; 0x6b22 <.L15>

00006b20 <L0^A>:
    6b20:	67 c0       	rjmp	.+206    	; 0x6bf0 <.L4>

00006b22 <.L15>:
         xx = (ii<<6);
    6b22:	d7 01       	movw	r26, r14
    6b24:	56 e0       	ldi	r21, 0x06	; 6

00006b26 <.L1^B2>:
    6b26:	aa 0f       	add	r26, r26
    6b28:	bb 1f       	adc	r27, r27
    6b2a:	5a 95       	dec	r21
    6b2c:	e1 f7       	brne	.-8      	; 0x6b26 <.L1^B2>
    6b2e:	ba 8b       	std	Y+18, r27	; 0x12
    6b30:	a9 8b       	std	Y+17, r26	; 0x11

00006b32 <.LVL22>:
         kdiv = delta - prevdelta;
    6b32:	dc 01       	movw	r26, r24

00006b34 <.LVL23>:
    6b34:	a6 1b       	sub	r26, r22
    6b36:	b7 0b       	sbc	r27, r23
    6b38:	bd 01       	movw	r22, r26

00006b3a <.LVL24>:
         if (kdiv >= delta) xx -= ((delta * 64)+ 32) / kdiv;
    6b3a:	a8 17       	cp	r26, r24
    6b3c:	b9 07       	cpc	r27, r25
    6b3e:	68 f0       	brcs	.+26     	; 0x6b5a <.L6>

00006b40 <.Loc.108>:
    6b40:	a6 e0       	ldi	r26, 0x06	; 6

00006b42 <.L1^B3>:
    6b42:	88 0f       	add	r24, r24
    6b44:	99 1f       	adc	r25, r25
    6b46:	aa 95       	dec	r26
    6b48:	e1 f7       	brne	.-8      	; 0x6b42 <.L1^B3>

00006b4a <.LVL25>:
    6b4a:	80 96       	adiw	r24, 0x20	; 32

00006b4c <.Loc.111>:
    6b4c:	59 d2       	rcall	.+1202   	; 0x7000 <__udivmodhi4>

00006b4e <.LVL26>:
    6b4e:	89 89       	ldd	r24, Y+17	; 0x11
    6b50:	9a 89       	ldd	r25, Y+18	; 0x12
    6b52:	86 1b       	sub	r24, r22
    6b54:	97 0b       	sbc	r25, r23
    6b56:	9a 8b       	std	Y+18, r25	; 0x12
    6b58:	89 8b       	std	Y+17, r24	; 0x11

00006b5a <.L6>:
            if (sum_ab < (3*dist)) break;  // stop if peak not significantly high
    6b5a:	ad 85       	ldd	r26, Y+13	; 0x0d
    6b5c:	be 85       	ldd	r27, Y+14	; 0x0e
    6b5e:	0a 17       	cp	r16, r26
    6b60:	1b 07       	cpc	r17, r27
    6b62:	08 f4       	brcc	.+2      	; 0x6b66 <.Loc.115>

00006b64 <L0^A>:
    6b64:	74 cf       	rjmp	.-280    	; 0x6a4e <.L7>

00006b66 <.Loc.115>:
            if (ii < (dist*4)) goto illegal_peak;
    6b66:	8b 85       	ldd	r24, Y+11	; 0x0b
    6b68:	9c 85       	ldd	r25, Y+12	; 0x0c
    6b6a:	e8 16       	cp	r14, r24
    6b6c:	f9 06       	cpc	r15, r25
    6b6e:	cc f1       	brlt	.+114    	; 0x6be2 <.L8>

00006b70 <.Loc.117>:
            if (ipk==0)
    6b70:	41 15       	cp	r20, r1
    6b72:	c1 f0       	breq	.+48     	; 0x6ba4 <.L18>

00006b74 <.LBB3>:
               last_per = xx - prevpeak_x;	// length of last period
    6b74:	69 89       	ldd	r22, Y+17	; 0x11
    6b76:	7a 89       	ldd	r23, Y+18	; 0x12
    6b78:	64 19       	sub	r22, r4
    6b7a:	75 09       	sbc	r23, r5

00006b7c <.LVL28>:
               if ((ipk > (MinPK+1)) && (last_per > (mean_per + mean_per/2 + 32))) break;  // gap between peaks
    6b7c:	43 30       	cpi	r20, 0x03	; 3
    6b7e:	60 f0       	brcs	.+24     	; 0x6b98 <.L10>

00006b80 <.Loc.123>:
    6b80:	a9 81       	ldd	r26, Y+1	; 0x01
    6b82:	ba 81       	ldd	r27, Y+2	; 0x02
    6b84:	90 96       	adiw	r26, 0x20	; 32
    6b86:	89 81       	ldd	r24, Y+1	; 0x01
    6b88:	9a 81       	ldd	r25, Y+2	; 0x02
    6b8a:	96 95       	lsr	r25
    6b8c:	87 95       	ror	r24
    6b8e:	8a 0f       	add	r24, r26
    6b90:	9b 1f       	adc	r25, r27

00006b92 <.Loc.124>:
    6b92:	86 17       	cp	r24, r22
    6b94:	97 07       	cpc	r25, r23
    6b96:	c8 f1       	brcs	.+114    	; 0x6c0a <.L11>

00006b98 <.L10>:
               if (smp_per > dist) {		// dist is lower than 1/4 period without rounding
    6b98:	c7 16       	cp	r12, r23
    6b9a:	50 f4       	brcc	.+20     	; 0x6bb0 <.L9>

00006b9c <.Loc.129>:
                  dist = smp_per+1;		// set dist to the found period / 4, rounded up
    6b9c:	cc 24       	eor	r12, r12
    6b9e:	c3 94       	inc	r12

00006ba0 <.LVL30>:
    6ba0:	c7 0e       	add	r12, r23

00006ba2 <.LVL31>:
                  goto repeat;
    6ba2:	21 cf       	rjmp	.-446    	; 0x69e6 <.L2>

00006ba4 <.L18>:
               firstpeak_x = xx;		// position of first peak
    6ba4:	a9 89       	ldd	r26, Y+17	; 0x11
    6ba6:	ba 89       	ldd	r27, Y+18	; 0x12
    6ba8:	b8 87       	std	Y+8, r27	; 0x08
    6baa:	af 83       	std	Y+7, r26	; 0x07

00006bac <.LVL33>:
               firstpeak_sum = sum_ab;		// amplitude sum of first peak
    6bac:	1e 83       	std	Y+6, r17	; 0x06
    6bae:	0d 83       	std	Y+5, r16	; 0x05

00006bb0 <.L9>:
            sumpeak += sum_ab;		// build sum of amplitude
    6bb0:	60 0e       	add	r6, r16
    6bb2:	71 1e       	adc	r7, r17

00006bb4 <.LVL35>:
         ipk++;			// one more peak found
    6bb4:	4f 5f       	subi	r20, 0xFF	; 255

00006bb6 <.Loc.142>:
         if (ipk > MinPK) {
    6bb6:	42 30       	cpi	r20, 0x02	; 2
    6bb8:	f8 f0       	brcs	.+62     	; 0x6bf8 <.L19>

00006bba <.Loc.144>:
            mean_per = (prevpeak_x - firstpeak_x + ((ipk-MinPK)>>1)) / (ipk-MinPK);  // average period with rounding
    6bba:	84 2f       	mov	r24, r20
    6bbc:	81 50       	subi	r24, 0x01	; 1
    6bbe:	99 0b       	sbc	r25, r25
    6bc0:	bc 01       	movw	r22, r24

00006bc2 <.Loc.146>:
    6bc2:	95 95       	asr	r25
    6bc4:	87 95       	ror	r24

00006bc6 <.Loc.147>:
    6bc6:	a9 89       	ldd	r26, Y+17	; 0x11
    6bc8:	ba 89       	ldd	r27, Y+18	; 0x12
    6bca:	8a 0f       	add	r24, r26
    6bcc:	9b 1f       	adc	r25, r27
    6bce:	af 81       	ldd	r26, Y+7	; 0x07
    6bd0:	b8 85       	ldd	r27, Y+8	; 0x08
    6bd2:	8a 1b       	sub	r24, r26
    6bd4:	9b 0b       	sbc	r25, r27

00006bd6 <.Loc.148>:
    6bd6:	14 d2       	rcall	.+1064   	; 0x7000 <__udivmodhi4>
    6bd8:	7a 83       	std	Y+2, r23	; 0x02
    6bda:	69 83       	std	Y+1, r22	; 0x01

00006bdc <.LVL37>:
         prevpeak_x = xx;		// save position of last peak
    6bdc:	49 88       	ldd	r4, Y+17	; 0x11
    6bde:	5a 88       	ldd	r5, Y+18	; 0x12

00006be0 <.Loc.150>:
         prevpeak_sum = sum_ab;		// save amplitude of last peak
    6be0:	58 01       	movw	r10, r16

00006be2 <.L8>:
         if (ipk > Maxpk) break;	// count of requested peaks is found
    6be2:	45 31       	cpi	r20, 0x15	; 21
    6be4:	90 f4       	brcc	.+36     	; 0x6c0a <.L11>

00006be6 <.L24>:
         sawzero=0;
    6be6:	50 e0       	ldi	r21, 0x00	; 0
    6be8:	03 c0       	rjmp	.+6      	; 0x6bf0 <.L4>

00006bea <.L17>:
      bb += uu[ii+dist];
    6bea:	fd 01       	movw	r30, r26
    6bec:	69 87       	std	Y+9, r22	; 0x09
    6bee:	7a 87       	std	Y+10, r23	; 0x0a

00006bf0 <.L4>:
   for (ii=0;ii<255-dist;ii++) 
    6bf0:	d3 94       	inc	r13

00006bf2 <.Loc.158>:
    6bf2:	69 85       	ldd	r22, Y+9	; 0x09
    6bf4:	7a 85       	ldd	r23, Y+10	; 0x0a
    6bf6:	24 cf       	rjmp	.-440    	; 0x6a40 <.L3>

00006bf8 <.L19>:
         prevpeak_x = xx;		// save position of last peak
    6bf8:	49 88       	ldd	r4, Y+17	; 0x11
    6bfa:	5a 88       	ldd	r5, Y+18	; 0x12

00006bfc <.Loc.160>:
         prevpeak_sum = sum_ab;		// save amplitude of last peak
    6bfc:	58 01       	movw	r10, r16
    6bfe:	f3 cf       	rjmp	.-26     	; 0x6be6 <.L24>

00006c00 <.L5>:
           sawzero=1;
    6c00:	51 e0       	ldi	r21, 0x01	; 1

00006c02 <.Loc.165>:
      if ((bb < aa) && (sawzero == 1)) {
    6c02:	e2 17       	cp	r30, r18
    6c04:	f3 07       	cpc	r31, r19
    6c06:	a0 f7       	brcc	.-24     	; 0x6bf0 <.L4>
    6c08:	8c cf       	rjmp	.-232    	; 0x6b22 <.L15>

00006c0a <.L11>:
   if (qptr) {
    6c0a:	21 14       	cp	r2, r1
    6c0c:	31 04       	cpc	r3, r1
    6c0e:	09 f0       	breq	.+2      	; 0x6c12 <.Loc.168>

00006c10 <L0^A>:
    6c10:	25 cf       	rjmp	.-438    	; 0x6a5c <.L16>

00006c12 <.Loc.168>:
    6c12:	40 cf       	rjmp	.-384    	; 0x6a94 <.L1>

00006c14 <sampling_lc>:




void sampling_lc(byte LowPin, byte HighPin)
{
    6c14:	a8 e2       	ldi	r26, 0x28	; 40
    6c16:	b2 e0       	ldi	r27, 0x02	; 2
    6c18:	ef e0       	ldi	r30, 0x0F	; 15
    6c1a:	f6 e3       	ldi	r31, 0x36	; 54
    6c1c:	7b c2       	rjmp	.+1270   	; 0x7114 <__prologue_saves__>

00006c1e <.L1^B4>:
    6c1e:	18 2f       	mov	r17, r24
    6c20:	b6 2e       	mov	r11, r22

00006c22 <.Loc.171>:
   uint16_t lc_cpar;    // value of parallel capacitor used for calculating inductance, in pF
   uint16_t period;
   lc_cpar=eeprom_read_word((uint16_t *)&lc_cpar_ee);
    6c22:	8e e4       	ldi	r24, 0x4E	; 78
    6c24:	93 e0       	ldi	r25, 0x03	; 3

00006c26 <.LVL47>:
    6c26:	09 d3       	rcall	.+1554   	; 0x723a <eeprom_read_word>

00006c28 <.LVL48>:
    6c28:	4c 01       	movw	r8, r24

00006c2a <.LBB7>:

//###################################################################################################
 // new version of the code, with pulses via the ADC port, i.e., without 680 ohm series resistor

   byte HiPinR_L, LoADC;
   HiPinR_L = pinmaskRL(HighPin);
    6c2a:	eb 2d       	mov	r30, r11
    6c2c:	f0 e0       	ldi	r31, 0x00	; 0
    6c2e:	e5 5b       	subi	r30, 0xB5	; 181
    6c30:	fd 4f       	sbci	r31, 0xFD	; 253
    6c32:	64 90       	lpm	r6, Z
    6c34:	c9 5d       	subi	r28, 0xD9	; 217
    6c36:	dd 4f       	sbci	r29, 0xFD	; 253
    6c38:	68 82       	st	Y, r6
    6c3a:	c7 52       	subi	r28, 0x27	; 39
    6c3c:	d2 40       	sbci	r29, 0x02	; 2

00006c3e <.LBB8>:
   LoADC = pinmaskADC(LowPin);
    6c3e:	e1 2f       	mov	r30, r17
    6c40:	f0 e0       	ldi	r31, 0x00	; 0
    6c42:	e2 5b       	subi	r30, 0xB2	; 178
    6c44:	fd 4f       	sbci	r31, 0xFD	; 253
    6c46:	e4 91       	lpm	r30, Z

00006c48 <.LBE8>:

   lc_fx=0;
    6c48:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <lc_fx>
    6c4c:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <lc_fx+0x1>
    6c50:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <lc_fx+0x2>
    6c54:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <lc_fx+0x3>

00006c58 <.Loc.192>:
   lc_qx=0;
    6c58:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <lc_qx+0x1>
    6c5c:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <lc_qx>

00006c60 <.Loc.194>:
   lc_lx=0;
    6c60:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <lc_lx>
    6c64:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <lc_lx+0x1>
    6c68:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <lc_lx+0x2>
    6c6c:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <lc_lx+0x3>

00006c70 <.Loc.196>:
   if ((PartFound != PART_RESISTOR) || (inductor_lpre > 0)) {
    6c70:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <PartFound>
    6c74:	81 30       	cpi	r24, 0x01	; 1
    6c76:	09 f0       	breq	.+2      	; 0x6c7a <.Loc.198>

00006c78 <L0^A>:
    6c78:	34 c1       	rjmp	.+616    	; 0x6ee2 <.L25>

00006c7a <.Loc.198>:
    6c7a:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <inductor_lpre>
    6c7e:	18 16       	cp	r1, r24
    6c80:	0c f4       	brge	.+2      	; 0x6c84 <.LVL52>

00006c82 <L0^A>:
    6c82:	2f c1       	rjmp	.+606    	; 0x6ee2 <.L25>

00006c84 <.LVL52>:
   byte i=0;

   unsigned int uu[255];


   ADC_PORT = TXD_VAL;
    6c84:	18 b8       	out	0x08, r1	; 8

00006c86 <.Loc.203>:
   ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    6c86:	e7 b9       	out	0x07, r30	; 7

00006c88 <.Loc.205>:
   wait100us();
    6c88:	0e 94 b8 07 	call	0xf70	; 0xf70 <wait100us>

00006c8c <.LVL53>:

   // first, acquire data at maximum speed:
   ADMUX=HighPin|ADref1V1;   // use built-in reference, about 1.1 V;
    6c8c:	2b 2d       	mov	r18, r11
    6c8e:	20 6c       	ori	r18, 0xC0	; 192
    6c90:	b2 2e       	mov	r11, r18

00006c92 <.LVL54>:
    6c92:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

00006c96 <.Loc.209>:
                             // that's enough, because peaks more than about 0.6 V are not of interest
                             // (because the negative peak would be chopped by the protection diodes)
   wait_aref_stabilize();                               
    6c96:	0e 94 b8 07 	call	0xf70	; 0xf70 <wait100us>

00006c9a <.LVL55>:

   // run a first measurement, using the narrow full-current impulse
   samplingADC((1<<smplADC_span)|(1<<smplADC_direct), uu, 255, HiPinR_L, 0, 0, HiPinR_L);
    6c9a:	c9 5d       	subi	r28, 0xD9	; 217
    6c9c:	dd 4f       	sbci	r29, 0xFD	; 253
    6c9e:	c8 80       	ld	r12, Y
    6ca0:	c7 52       	subi	r28, 0x27	; 39
    6ca2:	d2 40       	sbci	r29, 0x02	; 2
    6ca4:	e1 2c       	mov	r14, r1
    6ca6:	00 e0       	ldi	r16, 0x00	; 0
    6ca8:	2c 2d       	mov	r18, r12
    6caa:	4f ef       	ldi	r20, 0xFF	; 255
    6cac:	ce 01       	movw	r24, r28
    6cae:	01 96       	adiw	r24, 0x01	; 1
    6cb0:	2c 01       	movw	r4, r24
    6cb2:	bc 01       	movw	r22, r24
    6cb4:	80 e1       	ldi	r24, 0x10	; 16
    6cb6:	91 e0       	ldi	r25, 0x01	; 1
    6cb8:	0e 94 34 00 	call	0x68	; 0x68 <samplingADC>

00006cbc <.LVL56>:

   // also measure some 20 samples at the "cold side" of the coil, and subtract
   // at highest frequencies, this is useful because the on-chip ADC has an RC lowpass which gives an exponentially decaying "DC" offset
   unsigned int uu0[20];
   ADMUX=LowPin|ADref1V1;   // switch to "cold" side for reference measurement
    6cbc:	10 6c       	ori	r17, 0xC0	; 192

00006cbe <.LVL57>:
    6cbe:	10 93 7c 00 	sts	0x007C, r17	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

00006cc2 <.Loc.215>:
   samplingADC((1<<smplADC_span)|(1<<smplADC_direct), uu0, 20, HiPinR_L, 0, 0, HiPinR_L);
    6cc2:	c9 5d       	subi	r28, 0xD9	; 217
    6cc4:	dd 4f       	sbci	r29, 0xFD	; 253
    6cc6:	c8 80       	ld	r12, Y
    6cc8:	c7 52       	subi	r28, 0x27	; 39
    6cca:	d2 40       	sbci	r29, 0x02	; 2
    6ccc:	2c 2d       	mov	r18, r12
    6cce:	44 e1       	ldi	r20, 0x14	; 20
    6cd0:	be 01       	movw	r22, r28
    6cd2:	61 50       	subi	r22, 0x01	; 1
    6cd4:	7e 4f       	sbci	r23, 0xFE	; 254
    6cd6:	80 e1       	ldi	r24, 0x10	; 16
    6cd8:	91 e0       	ldi	r25, 0x01	; 1
    6cda:	0e 94 34 00 	call	0x68	; 0x68 <samplingADC>

00006cde <.LVL58>:
   for (i=0;i<20;i++)
    6cde:	be 01       	movw	r22, r28
    6ce0:	61 50       	subi	r22, 0x01	; 1
    6ce2:	7e 4f       	sbci	r23, 0xFE	; 254
    6ce4:	9e 01       	movw	r18, r28
    6ce6:	27 5d       	subi	r18, 0xD7	; 215
    6ce8:	3f 4f       	sbci	r19, 0xFF	; 255

00006cea <.Loc.218>:
   samplingADC((1<<smplADC_span)|(1<<smplADC_direct), uu0, 20, HiPinR_L, 0, 0, HiPinR_L);
    6cea:	f2 01       	movw	r30, r4
    6cec:	d4 2c       	mov	r13, r4
    6cee:	c8 5d       	subi	r28, 0xD8	; 216
    6cf0:	dd 4f       	sbci	r29, 0xFD	; 253
    6cf2:	58 82       	st	Y, r5
    6cf4:	c8 52       	subi	r28, 0x28	; 40
    6cf6:	d2 40       	sbci	r29, 0x02	; 2
    6cf8:	32 2e       	mov	r3, r18
    6cfa:	f3 2e       	mov	r15, r19

00006cfc <.L30>:
   {
      if (uu[i]>=uu0[i]) uu[i]-=uu0[i];
    6cfc:	81 91       	ld	r24, Z+
    6cfe:	91 91       	ld	r25, Z+

00006d00 <.Loc.221>:
    6d00:	db 01       	movw	r26, r22
    6d02:	4d 91       	ld	r20, X+
    6d04:	5d 91       	ld	r21, X+
    6d06:	bd 01       	movw	r22, r26

00006d08 <.Loc.222>:
    6d08:	84 17       	cp	r24, r20
    6d0a:	95 07       	cpc	r25, r21
    6d0c:	08 f4       	brcc	.+2      	; 0x6d10 <.Loc.223>

00006d0e <L0^A>:
    6d0e:	ed c0       	rjmp	.+474    	; 0x6eea <.L42>

00006d10 <.Loc.223>:
    6d10:	84 1b       	sub	r24, r20
    6d12:	95 0b       	sbc	r25, r21

00006d14 <.L29>:
    6d14:	af 01       	movw	r20, r30
    6d16:	42 50       	subi	r20, 0x02	; 2
    6d18:	51 09       	sbc	r21, r1
    6d1a:	da 01       	movw	r26, r20
    6d1c:	8d 93       	st	X+, r24
    6d1e:	9c 93       	st	X, r25

00006d20 <.Loc.225>:
   for (i=0;i<20;i++)
    6d20:	e2 17       	cp	r30, r18
    6d22:	f3 07       	cpc	r31, r19
    6d24:	59 f7       	brne	.-42     	; 0x6cfc <.L30>

00006d26 <.Loc.227>:
      else uu[i]=0;
   }
   ADMUX=HighPin|ADref1V1;   // back to "hot" side
    6d26:	b0 92 7c 00 	sts	0x007C, r11	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

00006d2a <.LVL61>:

   byte dist0;         // estimate of duration of 1/4 of a period, used to set averaging interval in peaksearch()
   unsigned shift=0;   // by how many bit positions measured period needs to be shifted due to measuring with span>1

   // check how long until signal reaches 0: that gives us a first guess of 1/4 of the resonance period (because we apply an impulse, so we start at the maximum of the sinewave)
   period = peaksearch(uu,NULL);
    6d2a:	60 e0       	ldi	r22, 0x00	; 0
    6d2c:	70 e0       	ldi	r23, 0x00	; 0
    6d2e:	8d 2d       	mov	r24, r13
    6d30:	c8 5d       	subi	r28, 0xD8	; 216
    6d32:	dd 4f       	sbci	r29, 0xFD	; 253
    6d34:	98 81       	ld	r25, Y
    6d36:	c8 52       	subi	r28, 0x28	; 40
    6d38:	d2 40       	sbci	r29, 0x02	; 2
    6d3a:	4b de       	rcall	.-874    	; 0x69d2 <peaksearch>

00006d3c <.LVL62>:
   dist0 = 1+(period>>8);    // >>6 because of fraction bits, plus >>2 because dist0 should be about a quarter period, plus +1 to round up
    6d3c:	9f 5f       	subi	r25, 0xFF	; 255

00006d3e <.LVL63>:
	 DisplayValue(((unsigned long)period*10)/64,-1,' ',5);
         report_buf(uu,6);
 #endif
	
#define samplingADC_direct (1<<smplADC_direct)
     par = (1<<smplADC_span) | samplingADC_direct;
    6d3e:	b0 e1       	ldi	r27, 0x10	; 16
    6d40:	6b 2e       	mov	r6, r27
    6d42:	77 24       	eor	r7, r7
    6d44:	73 94       	inc	r7

00006d46 <.LVL64>:
   unsigned shift=0;   // by how many bit positions measured period needs to be shifted due to measuring with span>1
    6d46:	a1 2c       	mov	r10, r1
    6d48:	b1 2c       	mov	r11, r1

00006d4a <.Loc.240>:
     if (dist0>16) {
    6d4a:	91 31       	cpi	r25, 0x11	; 17
    6d4c:	78 f0       	brcs	.+30     	; 0x6d6c <.L31>

00006d4e <.Loc.241>:
      // rather slow resonance: then re-sample with 4 or 16 times larger interval; shift variable serves to take this into account in later calculations
        if (dist0<64) {
           shift = 2;
           par = (4<<smplADC_span) | samplingADC_direct;
    6d4e:	00 e1       	ldi	r16, 0x10	; 16
    6d50:	60 2e       	mov	r6, r16
    6d52:	04 e0       	ldi	r16, 0x04	; 4
    6d54:	70 2e       	mov	r7, r16

00006d56 <.Loc.243>:
           shift = 2;
    6d56:	82 e0       	ldi	r24, 0x02	; 2
    6d58:	a8 2e       	mov	r10, r24
    6d5a:	b1 2c       	mov	r11, r1

00006d5c <.Loc.244>:
        if (dist0<64) {
    6d5c:	90 34       	cpi	r25, 0x40	; 64
    6d5e:	30 f0       	brcs	.+12     	; 0x6d6c <.L31>

00006d60 <.Loc.245>:
        } else {
           shift = 4;
           par = (16<<smplADC_span) | samplingADC_direct;
    6d60:	f0 e1       	ldi	r31, 0x10	; 16
    6d62:	6f 2e       	mov	r6, r31
    6d64:	76 2c       	mov	r7, r6

00006d66 <.Loc.246>:
           shift = 4;
    6d66:	a4 e0       	ldi	r26, 0x04	; 4
    6d68:	aa 2e       	mov	r10, r26
    6d6a:	b1 2c       	mov	r11, r1

00006d6c <.L31>:
        }
     }

   // we take the average of 8 measurements, to increase S/N, except when using span>1, since then the sampling takes annoyingly long and S/N usually is better anyway at these lower frequencies
     for (i=0;i<8;i++) {
    6d6c:	e8 e0       	ldi	r30, 0x08	; 8
    6d6e:	2e 2e       	mov	r2, r30

00006d70 <.L33>:
        wdt_reset();
    6d70:	a8 95       	wdr

00006d72 <.Loc.250>:
        samplingADC(par, uu, 255, HiPinR_L, 0, 0, HiPinR_L);
    6d72:	c9 5d       	subi	r28, 0xD9	; 217
    6d74:	dd 4f       	sbci	r29, 0xFD	; 253
    6d76:	c8 80       	ld	r12, Y
    6d78:	c7 52       	subi	r28, 0x27	; 39
    6d7a:	d2 40       	sbci	r29, 0x02	; 2
    6d7c:	e1 2c       	mov	r14, r1
    6d7e:	00 e0       	ldi	r16, 0x00	; 0
    6d80:	2c 2d       	mov	r18, r12
    6d82:	4f ef       	ldi	r20, 0xFF	; 255
    6d84:	6d 2d       	mov	r22, r13
    6d86:	c8 5d       	subi	r28, 0xD8	; 216
    6d88:	dd 4f       	sbci	r29, 0xFD	; 253
    6d8a:	78 81       	ld	r23, Y
    6d8c:	c8 52       	subi	r28, 0x28	; 40
    6d8e:	d2 40       	sbci	r29, 0x02	; 2
    6d90:	c3 01       	movw	r24, r6
    6d92:	0e 94 34 00 	call	0x68	; 0x68 <samplingADC>

00006d96 <.LVL68>:
//        if (par > (2<<smplADC_span)) goto noavg;
        if (shift > 0) goto noavg;
    6d96:	a1 14       	cp	r10, r1
    6d98:	b1 04       	cpc	r11, r1
    6d9a:	09 f0       	breq	.+2      	; 0x6d9e <.Loc.253>

00006d9c <L0^A>:
    6d9c:	45 c0       	rjmp	.+138    	; 0x6e28 <.L32>

00006d9e <.Loc.253>:
        par |= samplingADC_cumul;
    6d9e:	c3 01       	movw	r24, r6
    6da0:	80 64       	ori	r24, 0x40	; 64

00006da2 <.LVL69>:
     for (i=0;i<8;i++) {
    6da2:	2a 94       	dec	r2

00006da4 <.LVL70>:
    6da4:	09 f0       	breq	.+2      	; 0x6da8 <.Loc.258>

00006da6 <L0^A>:
    6da6:	a4 c0       	rjmp	.+328    	; 0x6ef0 <.L45>

00006da8 <.Loc.258>:
     }
   if ((par >> smplADC_span) < 4) {
    6da8:	81 15       	cp	r24, r1
    6daa:	94 40       	sbci	r25, 0x04	; 4
    6dac:	70 f5       	brcc	.+92     	; 0x6e0a <.L34>

00006dae <.Loc.260>:
    // case of high frequency: subtract reference measurement, and do no scaling down of accumulated amplitudes since they are small in this case
      ADMUX=LowPin|ADref1V1;   // switch to "cold" side for reference measurement
    6dae:	10 93 7c 00 	sts	0x007C, r17	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

00006db2 <.Loc.262>:
      par &= ~samplingADC_cumul;
    6db2:	e8 94       	clt
    6db4:	66 f8       	bld	r6, 6

00006db6 <.LVL71>:
      ADMUX=LowPin|ADref1V1;   // switch to "cold" side for reference measurement
    6db6:	18 e0       	ldi	r17, 0x08	; 8

00006db8 <.L35>:
      for (i=0;i<8;i++) {
         samplingADC(par, uu0, 20, HiPinR_L, 0, 0, HiPinR_L);
    6db8:	c9 5d       	subi	r28, 0xD9	; 217
    6dba:	dd 4f       	sbci	r29, 0xFD	; 253
    6dbc:	c8 80       	ld	r12, Y
    6dbe:	c7 52       	subi	r28, 0x27	; 39
    6dc0:	d2 40       	sbci	r29, 0x02	; 2
    6dc2:	e1 2c       	mov	r14, r1
    6dc4:	00 e0       	ldi	r16, 0x00	; 0
    6dc6:	2c 2d       	mov	r18, r12
    6dc8:	44 e1       	ldi	r20, 0x14	; 20
    6dca:	be 01       	movw	r22, r28
    6dcc:	61 50       	subi	r22, 0x01	; 1
    6dce:	7e 4f       	sbci	r23, 0xFE	; 254
    6dd0:	c3 01       	movw	r24, r6
    6dd2:	0e 94 34 00 	call	0x68	; 0x68 <samplingADC>

00006dd6 <.LVL73>:
         par |= samplingADC_cumul;
    6dd6:	68 94       	set
    6dd8:	66 f8       	bld	r6, 6

00006dda <.LVL74>:
      for (i=0;i<8;i++) {
    6dda:	1a 95       	dec	r17

00006ddc <.LVL75>:
    6ddc:	69 f7       	brne	.-38     	; 0x6db8 <.L35>
    6dde:	e3 2d       	mov	r30, r3
    6de0:	ff 2d       	mov	r31, r15
    6de2:	af ef       	ldi	r26, 0xFF	; 255
    6de4:	b1 e0       	ldi	r27, 0x01	; 1
    6de6:	ac 0f       	add	r26, r28
    6de8:	bd 1f       	adc	r27, r29
    6dea:	98 96       	adiw	r26, 0x28	; 40

00006dec <.L37>:
      }
      i=20; while (i--)         // equivalent to for (i=0;i<20;i++) but saves 48 bytes of flash????
      {
         if (uu[i]>=uu0[i]) uu[i]-=uu0[i];
    6dec:	92 91       	ld	r25, -Z
    6dee:	82 91       	ld	r24, -Z

00006df0 <.Loc.274>:
    6df0:	3e 91       	ld	r19, -X
    6df2:	2e 91       	ld	r18, -X

00006df4 <.Loc.275>:
    6df4:	82 17       	cp	r24, r18
    6df6:	93 07       	cpc	r25, r19
    6df8:	08 f4       	brcc	.+2      	; 0x6dfc <.Loc.276>

00006dfa <L0^A>:
    6dfa:	7c c0       	rjmp	.+248    	; 0x6ef4 <.L46>

00006dfc <.Loc.276>:
    6dfc:	82 1b       	sub	r24, r18
    6dfe:	93 0b       	sbc	r25, r19

00006e00 <.L36>:
    6e00:	91 83       	std	Z+1, r25	; 0x01
    6e02:	80 83       	st	Z, r24

00006e04 <.Loc.278>:
      i=20; while (i--)         // equivalent to for (i=0;i<20;i++) but saves 48 bytes of flash????
    6e04:	4e 16       	cp	r4, r30
    6e06:	5f 06       	cpc	r5, r31
    6e08:	89 f7       	brne	.-30     	; 0x6dec <.L37>

00006e0a <.L34>:
      }
//   } else {
    }
    // low frequency: no reference measurement needed, but do scale amplitude by number of accumulated samples
    i=255;
    while (i--) uu[i]>>=3;   // divide all samples by 8
    6e0a:	fe 01       	movw	r30, r28
    6e0c:	e1 50       	subi	r30, 0x01	; 1
    6e0e:	fe 4f       	sbci	r31, 0xFE	; 254

00006e10 <.L38>:
    6e10:	92 91       	ld	r25, -Z
    6e12:	82 91       	ld	r24, -Z
    6e14:	73 e0       	ldi	r23, 0x03	; 3

00006e16 <.L1^B5>:
    6e16:	96 95       	lsr	r25
    6e18:	87 95       	ror	r24
    6e1a:	7a 95       	dec	r23
    6e1c:	e1 f7       	brne	.-8      	; 0x6e16 <.L1^B5>
    6e1e:	91 83       	std	Z+1, r25	; 0x01
    6e20:	80 83       	st	Z, r24

00006e22 <.Loc.283>:
    6e22:	4e 16       	cp	r4, r30
    6e24:	5f 06       	cpc	r5, r31
    6e26:	a1 f7       	brne	.-24     	; 0x6e10 <.L38>

00006e28 <.L32>:
//   }


noavg:;
   period = peaksearch(uu,&lc_qx);
    6e28:	6c eb       	ldi	r22, 0xBC	; 188
    6e2a:	71 e0       	ldi	r23, 0x01	; 1
    6e2c:	8d 2d       	mov	r24, r13
    6e2e:	c8 5d       	subi	r28, 0xD8	; 216
    6e30:	dd 4f       	sbci	r29, 0xFD	; 253
    6e32:	98 81       	ld	r25, Y
    6e34:	c8 52       	subi	r28, 0x28	; 40
    6e36:	d2 40       	sbci	r29, 0x02	; 2
    6e38:	cc dd       	rcall	.-1128   	; 0x69d2 <peaksearch>

00006e3a <.LVL79>:
    6e3a:	8c 01       	movw	r16, r24

00006e3c <.LVL80>:
   if (period > (255<<6)) period = 0;		// set implausible period to zero
    6e3c:	81 3c       	cpi	r24, 0xC1	; 193
    6e3e:	9f 43       	sbci	r25, 0x3F	; 63
    6e40:	10 f0       	brcs	.+4      	; 0x6e46 <.L39>

00006e42 <.Loc.289>:
    6e42:	00 e0       	ldi	r16, 0x00	; 0
    6e44:	10 e0       	ldi	r17, 0x00	; 0

00006e46 <.L39>:
	 lcd_data('p');
         DisplayValue16((period*10)/64,-1,' ',4);
 #endif

   unsigned long vv;
   vv = (unsigned long)period;         // measured period with 6 fraction bits, before applying shift, is < 256*64 = 2^14
    6e46:	68 01       	movw	r12, r16
    6e48:	e1 2c       	mov	r14, r1
    6e4a:	f1 2c       	mov	r15, r1

00006e4c <.LVL82>:
   vv = vv*vv;                            // vv < 2^28   ; this is (except for shift)  d<<12
    6e4c:	98 01       	movw	r18, r16
    6e4e:	d8 01       	movw	r26, r16
    6e50:	3c d1       	rcall	.+632    	; 0x70ca <__umulhisi3>

00006e52 <.LVL83>:
#elif F_CPU==8000000UL
//   v=(v>>12)*49473;		// for 8 MHz CPU clock, it's 49473, but we need to right-shift further to fit in 32 bit
				// 1e21 / (2*pi*16e6)**2 / (8 * 1024)      = 12.07842632, which can be computed
				// with a divide by 51 and a mul with 616 (= 12.07843137) .
				// whith better accuracy than   49473/4096 = 12.07836914
   vv = (vv/51)*616;
    6e52:	23 e3       	ldi	r18, 0x33	; 51
    6e54:	30 e0       	ldi	r19, 0x00	; 0
    6e56:	40 e0       	ldi	r20, 0x00	; 0
    6e58:	50 e0       	ldi	r21, 0x00	; 0
    6e5a:	f9 d0       	rcall	.+498    	; 0x704e <__udivmodsi4>

00006e5c <.LVL84>:
    6e5c:	a8 e6       	ldi	r26, 0x68	; 104
    6e5e:	b2 e0       	ldi	r27, 0x02	; 2
    6e60:	49 d1       	rcall	.+658    	; 0x70f4 <__muluhisi3>

00006e62 <.LVL85>:
   shift++;                          // change shift variable to compensate for that later on
    6e62:	af ef       	ldi	r26, 0xFF	; 255
    6e64:	aa 1a       	sub	r10, r26
    6e66:	ba 0a       	sbc	r11, r26

00006e68 <.Loc.300>:
#else
   #error "CPU clocks other than 8, 16  and 20 MHz not yet supported for SamplingADC"
   vv = 0;
#endif
//   vv/=lc_cpar;                          //          ; is (d<<2)/(2*pi*fclock)^2/c * 1e9 >>3
   vv /= (lc_cpar>>1);                          //          ; is (d<<2)/(2*pi*fclock)^2/c * 1e9 >>2
    6e68:	96 94       	lsr	r9
    6e6a:	87 94       	ror	r8

00006e6c <.LVL87>:
    6e6c:	94 01       	movw	r18, r8
    6e6e:	40 e0       	ldi	r20, 0x00	; 0
    6e70:	50 e0       	ldi	r21, 0x00	; 0

00006e72 <.Loc.303>:
    6e72:	ed d0       	rcall	.+474    	; 0x704e <__udivmodsi4>

00006e74 <.LVL88>:
	// shift for 16 MHz 0, 2,  4; for 8 MHz 1, 3,  5
        // resulting factor 2,32,512            8,128,2048 
//   vv<<=1+2*shift;                      //          ; is L in 1e-9 H  
   vv <<= 2*shift;                      //          ; is L in 1e-9 H  
    6e74:	c5 01       	movw	r24, r10
    6e76:	88 0f       	add	r24, r24
    6e78:	99 1f       	adc	r25, r25

00006e7a <.Loc.307>:
    6e7a:	39 01       	movw	r6, r18
    6e7c:	4a 01       	movw	r8, r20
    6e7e:	04 c0       	rjmp	.+8      	; 0x6e88 <.L2^B1>

00006e80 <.L1^B6>:
    6e80:	66 0c       	add	r6, r6
    6e82:	77 1c       	adc	r7, r7
    6e84:	88 1c       	adc	r8, r8
    6e86:	99 1c       	adc	r9, r9

00006e88 <.L2^B1>:
    6e88:	8a 95       	dec	r24
    6e8a:	d2 f7       	brpl	.-12     	; 0x6e80 <.L1^B6>

00006e8c <.Loc.308>:
                        // not nice: the nH number will always be even; then again, do we really measure that precisely?
   lc_lx = vv;
    6e8c:	60 92 b8 01 	sts	0x01B8, r6	; 0x8001b8 <lc_lx>
    6e90:	70 92 b9 01 	sts	0x01B9, r7	; 0x8001b9 <lc_lx+0x1>
    6e94:	80 92 ba 01 	sts	0x01BA, r8	; 0x8001ba <lc_lx+0x2>
    6e98:	90 92 bb 01 	sts	0x01BB, r9	; 0x8001bb <lc_lx+0x3>

00006e9c <.Loc.309>:
   // inductor_lpre = 0, no Inductor found 
   // unductor_lpre = 1,  rx is above 2100 Ohm
   // inductor_lpre = -5, Inductance searched without 680 Ohm, rx is below 24 Ohm
   // inductor_lpre = -4,  Inductance is searched with 680i Ohm, 24 < rx < 2100
   // probably search of 
   if (inductor_lx>2) {
    6e9c:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <inductor_lx>
    6ea0:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <inductor_lx+0x1>
    6ea4:	a0 91 a1 01 	lds	r26, 0x01A1	; 0x8001a1 <inductor_lx+0x2>
    6ea8:	b0 91 a2 01 	lds	r27, 0x01A2	; 0x8001a2 <inductor_lx+0x3>
    6eac:	03 97       	sbiw	r24, 0x03	; 3
    6eae:	a1 05       	cpc	r26, r1
    6eb0:	b1 05       	cpc	r27, r1
    6eb2:	40 f0       	brcs	.+16     	; 0x6ec4 <.L40>

00006eb4 <.Loc.311>:
      // if traditional measurement gave some meaningful-looking value ( > 20 uH, but that's rather arbitrary)
      // discard the new one, it's probably self-resonance
      // note that if a sizeable cap is in parallel, the normal measurement doesn't come up with an answer
      lc_lx=0;
    6eb4:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <lc_lx>
    6eb8:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <lc_lx+0x1>
    6ebc:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <lc_lx+0x2>
    6ec0:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <lc_lx+0x3>

00006ec4 <.L40>:
   }

   // freq/Hz = F_CPU/d
   if (period==0) {
    6ec4:	01 15       	cp	r16, r1
    6ec6:	11 05       	cpc	r17, r1
    6ec8:	c1 f4       	brne	.+48     	; 0x6efa <.L41>

00006eca <.Loc.315>:
      lc_qx = 0;
    6eca:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <lc_qx+0x1>
    6ece:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <lc_qx>

00006ed2 <.Loc.317>:
      lc_lx = 0;
    6ed2:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <lc_lx>
    6ed6:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <lc_lx+0x1>
    6eda:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <lc_lx+0x2>
    6ede:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <lc_lx+0x3>

00006ee2 <.L25>:
#endif
   lc_fx = ((F_CPU<<(7-shift))/vv);

   if (inductor_lpre >= 0) inductor_lpre = -1; 	/* no ESR measurement! */
   return;
} /* end of sampling_lc() */
    6ee2:	c8 5d       	subi	r28, 0xD8	; 216
    6ee4:	dd 4f       	sbci	r29, 0xFD	; 253
    6ee6:	e2 e1       	ldi	r30, 0x12	; 18
    6ee8:	31 c1       	rjmp	.+610    	; 0x714c <__epilogue_restores__>

00006eea <.L42>:
    6eea:	80 e0       	ldi	r24, 0x00	; 0
    6eec:	90 e0       	ldi	r25, 0x00	; 0
    6eee:	12 cf       	rjmp	.-476    	; 0x6d14 <.L29>

00006ef0 <.L45>:
    6ef0:	3c 01       	movw	r6, r24
    6ef2:	3e cf       	rjmp	.-388    	; 0x6d70 <.L33>

00006ef4 <.L46>:
    6ef4:	80 e0       	ldi	r24, 0x00	; 0
    6ef6:	90 e0       	ldi	r25, 0x00	; 0
    6ef8:	83 cf       	rjmp	.-250    	; 0x6e00 <.L36>

00006efa <.L41>:
   lc_fx = ((F_CPU<<(7-shift))/vv);
    6efa:	27 e0       	ldi	r18, 0x07	; 7
    6efc:	30 e0       	ldi	r19, 0x00	; 0
    6efe:	2a 19       	sub	r18, r10
    6f00:	3b 09       	sbc	r19, r11

00006f02 <.Loc.327>:
    6f02:	60 e0       	ldi	r22, 0x00	; 0
    6f04:	72 e1       	ldi	r23, 0x12	; 18
    6f06:	8a e7       	ldi	r24, 0x7A	; 122
    6f08:	90 e0       	ldi	r25, 0x00	; 0
    6f0a:	04 c0       	rjmp	.+8      	; 0x6f14 <.L2^B2>

00006f0c <.L1^B7>:
    6f0c:	66 0f       	add	r22, r22
    6f0e:	77 1f       	adc	r23, r23
    6f10:	88 1f       	adc	r24, r24
    6f12:	99 1f       	adc	r25, r25

00006f14 <.L2^B2>:
    6f14:	2a 95       	dec	r18
    6f16:	d2 f7       	brpl	.-12     	; 0x6f0c <.L1^B7>

00006f18 <.Loc.328>:
    6f18:	a7 01       	movw	r20, r14
    6f1a:	96 01       	movw	r18, r12
    6f1c:	98 d0       	rcall	.+304    	; 0x704e <__udivmodsi4>

00006f1e <.Loc.329>:
    6f1e:	20 93 be 01 	sts	0x01BE, r18	; 0x8001be <lc_fx>
    6f22:	30 93 bf 01 	sts	0x01BF, r19	; 0x8001bf <lc_fx+0x1>
    6f26:	40 93 c0 01 	sts	0x01C0, r20	; 0x8001c0 <lc_fx+0x2>
    6f2a:	50 93 c1 01 	sts	0x01C1, r21	; 0x8001c1 <lc_fx+0x3>

00006f2e <.Loc.330>:
   if (inductor_lpre >= 0) inductor_lpre = -1; 	/* no ESR measurement! */
    6f2e:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <inductor_lpre>
    6f32:	87 fd       	sbrc	r24, 7
    6f34:	d6 cf       	rjmp	.-84     	; 0x6ee2 <.L25>

00006f36 <.Loc.332>:
    6f36:	8f ef       	ldi	r24, 0xFF	; 255
    6f38:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <inductor_lpre>
    6f3c:	d2 cf       	rjmp	.-92     	; 0x6ee2 <.L25>

00006f3e <sampling_lc_calibrate>:




void sampling_lc_calibrate(byte ww)
{
    6f3e:	cf 93       	push	r28

00006f40 <.LCFI2>:
    6f40:	df 93       	push	r29

00006f42 <.LCFI3>:
    6f42:	c8 2f       	mov	r28, r24

00006f44 <.Loc.336>:
 #define C_DIFF_LIMIT 200   /* Tolerance of capacity to rewrite eeprom */
//   lcd_clear();
   lcd_line1();
    6f44:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <lcd_line1>

00006f48 <.LVL95>:
   lcd_MEM2_string(cap_for_l_meas_str);		// "Cap for L meas?"
    6f48:	86 e0       	ldi	r24, 0x06	; 6
    6f4a:	90 e0       	ldi	r25, 0x00	; 0
    6f4c:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00006f50 <.LVL96>:
   lcd_clear_line();
    6f50:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

00006f54 <.LVL97>:
   byte i = 0;		// no legal capacity value found
    6f54:	d0 e0       	ldi	r29, 0x00	; 0

00006f56 <.L55>:
   do { 
      lc_cpartmp = 0;
    6f56:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <lc_cpartmp+0x1>
    6f5a:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <lc_cpartmp>

00006f5e <.Loc.344>:
      wait_about100ms();
    6f5e:	84 e1       	ldi	r24, 0x14	; 20
    6f60:	0e 94 c5 07 	call	0xf8a	; 0xf8a <sleep_5ms>

00006f64 <.LVL99>:
      ReadCapacity(TP1,TP3);
    6f64:	62 e0       	ldi	r22, 0x02	; 2
    6f66:	80 e0       	ldi	r24, 0x00	; 0
    6f68:	0e 94 b7 23 	call	0x476e	; 0x476e <ReadCapacity>

00006f6c <.LVL100>:
      lcd_line2();
    6f6c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_line2>

00006f70 <.LVL101>:
      DisplayValue16(lc_cpartmp,-12,'F',4);
    6f70:	24 e0       	ldi	r18, 0x04	; 4
    6f72:	46 e4       	ldi	r20, 0x46	; 70
    6f74:	64 ef       	ldi	r22, 0xF4	; 244
    6f76:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <lc_cpartmp>
    6f7a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <lc_cpartmp+0x1>
    6f7e:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DisplayValue16>

00006f82 <.LVL102>:
      i++;
//      if ((lc_cpartmp<9500) || (lc_cpartmp>33000)) i=0;		// unstable or not connected
      if ((lc_cpartmp<3900) || (lc_cpartmp>34000)) i=0;		// unstable or not connected
    6f82:	60 91 b6 01 	lds	r22, 0x01B6	; 0x8001b6 <lc_cpartmp>
    6f86:	70 91 b7 01 	lds	r23, 0x01B7	; 0x8001b7 <lc_cpartmp+0x1>
    6f8a:	cb 01       	movw	r24, r22
    6f8c:	8c 53       	subi	r24, 0x3C	; 60
    6f8e:	9f 40       	sbci	r25, 0x0F	; 15

00006f90 <.Loc.351>:
    6f90:	85 39       	cpi	r24, 0x95	; 149
    6f92:	95 47       	sbci	r25, 0x75	; 117
    6f94:	a0 f4       	brcc	.+40     	; 0x6fbe <.L56>

00006f96 <.Loc.352>:
      i++;
    6f96:	df 5f       	subi	r29, 0xFF	; 255

00006f98 <.LVL103>:
 #ifdef AUTO_LC_CAP
      if ((lc_cpartmp == 0) && (ww > 249)) break;	// a coil is connected in the AUTO_LC_CAP mode
 #endif
      if (i > 4) {	// Cx measurement was stable
    6f98:	d5 30       	cpi	r29, 0x05	; 5
    6f9a:	91 f4       	brne	.+36     	; 0x6fc0 <.L53>

00006f9c <.Loc.355>:
           /* new cap value is out of tolerance */
 #else
        if (1)
 #endif
         {  /* rewrite new capacity value to eeprom and report OK */
            eeprom_write_word((uint16_t *)&lc_cpar_ee,lc_cpartmp);
    6f9c:	8e e4       	ldi	r24, 0x4E	; 78
    6f9e:	93 e0       	ldi	r25, 0x03	; 3
    6fa0:	5f d1       	rcall	.+702    	; 0x7260 <eeprom_write_word>

00006fa2 <.LVL104>:
	    lcd_space();
    6fa2:	0e 94 b4 06 	call	0xd68	; 0xd68 <lcd_space>

00006fa6 <.LVL105>:
            lcd_MEM_string(OK_str);	// Output "OK"
    6fa6:	85 ea       	ldi	r24, 0xA5	; 165
    6fa8:	91 e0       	ldi	r25, 0x01	; 1
    6faa:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_fix_string>

00006fae <.LVL106>:
            lcd_refresh();
            wait_about500ms();
    6fae:	84 e6       	ldi	r24, 0x64	; 100
    6fb0:	0e 94 c5 07 	call	0xf8a	; 0xf8a <sleep_5ms>

00006fb4 <.L54>:
         break;
      }  /* end (i > 4) */
      lcd_clear_line();
      lcd_refresh();
   } while (++ww != 0);
   lcd_line1();
    6fb4:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <lcd_line1>

00006fb8 <.LVL108>:
}
    6fb8:	df 91       	pop	r29
    6fba:	cf 91       	pop	r28
    6fbc:	08 95       	ret

00006fbe <.L56>:
      if ((lc_cpartmp<3900) || (lc_cpartmp>34000)) i=0;		// unstable or not connected
    6fbe:	d0 e0       	ldi	r29, 0x00	; 0

00006fc0 <.L53>:
      lcd_clear_line();
    6fc0:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_clear_line>

00006fc4 <.LVL111>:
   } while (++ww != 0);
    6fc4:	c3 95       	inc	r28

00006fc6 <.LVL112>:
    6fc6:	39 f6       	brne	.-114    	; 0x6f56 <.L55>
    6fc8:	f5 cf       	rjmp	.-22     	; 0x6fb4 <.L54>

00006fca <__mulsi3>:
    6fca:	db 01       	movw	r26, r22

00006fcc <.Loc.1>:
    6fcc:	8f 93       	push	r24

00006fce <.Loc.2>:
    6fce:	9f 93       	push	r25

00006fd0 <.Loc.3>:
    6fd0:	91 d0       	rcall	.+290    	; 0x70f4 <__muluhisi3>

00006fd2 <.Loc.4>:
    6fd2:	bf 91       	pop	r27

00006fd4 <.Loc.5>:
    6fd4:	af 91       	pop	r26

00006fd6 <.Loc.6>:
    6fd6:	a2 9f       	mul	r26, r18

00006fd8 <.Loc.7>:
    6fd8:	80 0d       	add	r24, r0

00006fda <.Loc.8>:
    6fda:	91 1d       	adc	r25, r1

00006fdc <.Loc.9>:
    6fdc:	a3 9f       	mul	r26, r19

00006fde <.Loc.10>:
    6fde:	90 0d       	add	r25, r0

00006fe0 <.Loc.11>:
    6fe0:	b2 9f       	mul	r27, r18

00006fe2 <.Loc.12>:
    6fe2:	90 0d       	add	r25, r0

00006fe4 <.Loc.13>:
    6fe4:	11 24       	eor	r1, r1

00006fe6 <.Loc.14>:
    6fe6:	08 95       	ret

00006fe8 <__udivmodqi4>:
    6fe8:	99 1b       	sub	r25, r25

00006fea <.Loc.1>:
    6fea:	79 e0       	ldi	r23, 0x09	; 9

00006fec <.Loc.2>:
    6fec:	04 c0       	rjmp	.+8      	; 0x6ff6 <__udivmodqi4_ep>

00006fee <__udivmodqi4_loop>:
    6fee:	99 1f       	adc	r25, r25

00006ff0 <.Loc.4>:
    6ff0:	96 17       	cp	r25, r22

00006ff2 <.Loc.5>:
    6ff2:	08 f0       	brcs	.+2      	; 0x6ff6 <__udivmodqi4_ep>

00006ff4 <.Loc.6>:
    6ff4:	96 1b       	sub	r25, r22

00006ff6 <__udivmodqi4_ep>:
    6ff6:	88 1f       	adc	r24, r24

00006ff8 <.Loc.8>:
    6ff8:	7a 95       	dec	r23

00006ffa <.Loc.9>:
    6ffa:	c9 f7       	brne	.-14     	; 0x6fee <__udivmodqi4_loop>

00006ffc <.Loc.10>:
    6ffc:	80 95       	com	r24

00006ffe <.Loc.11>:
    6ffe:	08 95       	ret

00007000 <__udivmodhi4>:
    7000:	aa 1b       	sub	r26, r26

00007002 <.Loc.1>:
    7002:	bb 1b       	sub	r27, r27

00007004 <.Loc.2>:
    7004:	51 e1       	ldi	r21, 0x11	; 17

00007006 <.Loc.3>:
    7006:	07 c0       	rjmp	.+14     	; 0x7016 <__udivmodhi4_ep>

00007008 <__udivmodhi4_loop>:
    7008:	aa 1f       	adc	r26, r26

0000700a <.Loc.5>:
    700a:	bb 1f       	adc	r27, r27

0000700c <.Loc.6>:
    700c:	a6 17       	cp	r26, r22

0000700e <.Loc.7>:
    700e:	b7 07       	cpc	r27, r23

00007010 <.Loc.8>:
    7010:	10 f0       	brcs	.+4      	; 0x7016 <__udivmodhi4_ep>

00007012 <.Loc.9>:
    7012:	a6 1b       	sub	r26, r22

00007014 <.Loc.10>:
    7014:	b7 0b       	sbc	r27, r23

00007016 <__udivmodhi4_ep>:
    7016:	88 1f       	adc	r24, r24

00007018 <.Loc.12>:
    7018:	99 1f       	adc	r25, r25

0000701a <.Loc.13>:
    701a:	5a 95       	dec	r21

0000701c <.Loc.14>:
    701c:	a9 f7       	brne	.-22     	; 0x7008 <__udivmodhi4_loop>

0000701e <.Loc.15>:
    701e:	80 95       	com	r24

00007020 <.Loc.16>:
    7020:	90 95       	com	r25

00007022 <.Loc.17>:
    7022:	bc 01       	movw	r22, r24

00007024 <.Loc.18>:
    7024:	cd 01       	movw	r24, r26

00007026 <.Loc.19>:
    7026:	08 95       	ret

00007028 <__divmodhi4>:
    7028:	97 fb       	bst	r25, 7

0000702a <.Loc.1>:
    702a:	07 2e       	mov	r0, r23

0000702c <.Loc.2>:
    702c:	16 f4       	brtc	.+4      	; 0x7032 <.L0^B1>

0000702e <.Loc.3>:
    702e:	00 94       	com	r0

00007030 <.Loc.4>:
    7030:	06 d0       	rcall	.+12     	; 0x703e <__divmodhi4_neg1>

00007032 <.L0^B1>:
    7032:	77 fd       	sbrc	r23, 7

00007034 <.Loc.6>:
    7034:	08 d0       	rcall	.+16     	; 0x7046 <__divmodhi4_neg2>

00007036 <.Loc.7>:
    7036:	e4 df       	rcall	.-56     	; 0x7000 <__udivmodhi4>

00007038 <.Loc.8>:
    7038:	07 fc       	sbrc	r0, 7

0000703a <.Loc.9>:
    703a:	05 d0       	rcall	.+10     	; 0x7046 <__divmodhi4_neg2>

0000703c <.Loc.10>:
    703c:	3e f4       	brtc	.+14     	; 0x704c <__divmodhi4_exit>

0000703e <__divmodhi4_neg1>:
    703e:	90 95       	com	r25

00007040 <.Loc.12>:
    7040:	81 95       	neg	r24

00007042 <.Loc.13>:
    7042:	9f 4f       	sbci	r25, 0xFF	; 255

00007044 <.Loc.14>:
    7044:	08 95       	ret

00007046 <__divmodhi4_neg2>:
    7046:	70 95       	com	r23

00007048 <.Loc.16>:
    7048:	61 95       	neg	r22

0000704a <.Loc.17>:
    704a:	7f 4f       	sbci	r23, 0xFF	; 255

0000704c <__divmodhi4_exit>:
    704c:	08 95       	ret

0000704e <__udivmodsi4>:
    704e:	a1 e2       	ldi	r26, 0x21	; 33

00007050 <.Loc.1>:
    7050:	1a 2e       	mov	r1, r26

00007052 <.Loc.2>:
    7052:	aa 1b       	sub	r26, r26

00007054 <.Loc.3>:
    7054:	bb 1b       	sub	r27, r27

00007056 <.Loc.4>:
    7056:	fd 01       	movw	r30, r26

00007058 <.Loc.5>:
    7058:	0d c0       	rjmp	.+26     	; 0x7074 <__udivmodsi4_ep>

0000705a <__udivmodsi4_loop>:
    705a:	aa 1f       	adc	r26, r26

0000705c <.Loc.7>:
    705c:	bb 1f       	adc	r27, r27

0000705e <.Loc.8>:
    705e:	ee 1f       	adc	r30, r30

00007060 <.Loc.9>:
    7060:	ff 1f       	adc	r31, r31

00007062 <.Loc.10>:
    7062:	a2 17       	cp	r26, r18

00007064 <.Loc.11>:
    7064:	b3 07       	cpc	r27, r19

00007066 <.Loc.12>:
    7066:	e4 07       	cpc	r30, r20

00007068 <.Loc.13>:
    7068:	f5 07       	cpc	r31, r21

0000706a <.Loc.14>:
    706a:	20 f0       	brcs	.+8      	; 0x7074 <__udivmodsi4_ep>

0000706c <.Loc.15>:
    706c:	a2 1b       	sub	r26, r18

0000706e <.Loc.16>:
    706e:	b3 0b       	sbc	r27, r19

00007070 <.Loc.17>:
    7070:	e4 0b       	sbc	r30, r20

00007072 <.Loc.18>:
    7072:	f5 0b       	sbc	r31, r21

00007074 <__udivmodsi4_ep>:
    7074:	66 1f       	adc	r22, r22

00007076 <.Loc.20>:
    7076:	77 1f       	adc	r23, r23

00007078 <.Loc.21>:
    7078:	88 1f       	adc	r24, r24

0000707a <.Loc.22>:
    707a:	99 1f       	adc	r25, r25

0000707c <.Loc.23>:
    707c:	1a 94       	dec	r1

0000707e <.Loc.24>:
    707e:	69 f7       	brne	.-38     	; 0x705a <__udivmodsi4_loop>

00007080 <.Loc.25>:
    7080:	60 95       	com	r22

00007082 <.Loc.26>:
    7082:	70 95       	com	r23

00007084 <.Loc.27>:
    7084:	80 95       	com	r24

00007086 <.Loc.28>:
    7086:	90 95       	com	r25

00007088 <.Loc.29>:
    7088:	9b 01       	movw	r18, r22

0000708a <.Loc.30>:
    708a:	ac 01       	movw	r20, r24

0000708c <.Loc.31>:
    708c:	bd 01       	movw	r22, r26

0000708e <.Loc.32>:
    708e:	cf 01       	movw	r24, r30

00007090 <.Loc.33>:
    7090:	08 95       	ret

00007092 <__divmodsi4>:
    7092:	05 2e       	mov	r0, r21

00007094 <.Loc.1>:
    7094:	97 fb       	bst	r25, 7

00007096 <.Loc.2>:
    7096:	16 f4       	brtc	.+4      	; 0x709c <.L0^B1>

00007098 <.Loc.3>:
    7098:	00 94       	com	r0

0000709a <.Loc.4>:
    709a:	0f d0       	rcall	.+30     	; 0x70ba <__negsi2>

0000709c <.L0^B1>:
    709c:	57 fd       	sbrc	r21, 7

0000709e <.Loc.6>:
    709e:	05 d0       	rcall	.+10     	; 0x70aa <__divmodsi4_neg2>

000070a0 <.Loc.7>:
    70a0:	d6 df       	rcall	.-84     	; 0x704e <__udivmodsi4>

000070a2 <.Loc.8>:
    70a2:	07 fc       	sbrc	r0, 7

000070a4 <.Loc.9>:
    70a4:	02 d0       	rcall	.+4      	; 0x70aa <__divmodsi4_neg2>

000070a6 <.Loc.10>:
    70a6:	46 f4       	brtc	.+16     	; 0x70b8 <__divmodsi4_exit>

000070a8 <.Loc.11>:
    70a8:	08 c0       	rjmp	.+16     	; 0x70ba <__negsi2>

000070aa <__divmodsi4_neg2>:
    70aa:	50 95       	com	r21

000070ac <.Loc.13>:
    70ac:	40 95       	com	r20

000070ae <.Loc.14>:
    70ae:	30 95       	com	r19

000070b0 <.Loc.15>:
    70b0:	21 95       	neg	r18

000070b2 <.Loc.16>:
    70b2:	3f 4f       	sbci	r19, 0xFF	; 255

000070b4 <.Loc.17>:
    70b4:	4f 4f       	sbci	r20, 0xFF	; 255

000070b6 <.Loc.18>:
    70b6:	5f 4f       	sbci	r21, 0xFF	; 255

000070b8 <__divmodsi4_exit>:
    70b8:	08 95       	ret

000070ba <__negsi2>:
    70ba:	90 95       	com	r25
    70bc:	80 95       	com	r24
    70be:	70 95       	com	r23
    70c0:	61 95       	neg	r22
    70c2:	7f 4f       	sbci	r23, 0xFF	; 255
    70c4:	8f 4f       	sbci	r24, 0xFF	; 255
    70c6:	9f 4f       	sbci	r25, 0xFF	; 255

000070c8 <.Loc.1>:
    70c8:	08 95       	ret

000070ca <__umulhisi3>:
    70ca:	a2 9f       	mul	r26, r18

000070cc <.Loc.1>:
    70cc:	b0 01       	movw	r22, r0

000070ce <.Loc.2>:
    70ce:	b3 9f       	mul	r27, r19

000070d0 <.Loc.3>:
    70d0:	c0 01       	movw	r24, r0

000070d2 <.Loc.4>:
    70d2:	a3 9f       	mul	r26, r19

000070d4 <.Loc.5>:
    70d4:	70 0d       	add	r23, r0

000070d6 <.Loc.6>:
    70d6:	81 1d       	adc	r24, r1

000070d8 <.Loc.7>:
    70d8:	11 24       	eor	r1, r1

000070da <.Loc.8>:
    70da:	91 1d       	adc	r25, r1

000070dc <.Loc.9>:
    70dc:	b2 9f       	mul	r27, r18

000070de <.Loc.10>:
    70de:	70 0d       	add	r23, r0

000070e0 <.Loc.11>:
    70e0:	81 1d       	adc	r24, r1

000070e2 <.Loc.12>:
    70e2:	11 24       	eor	r1, r1

000070e4 <.Loc.13>:
    70e4:	91 1d       	adc	r25, r1

000070e6 <.Loc.14>:
    70e6:	08 95       	ret

000070e8 <__usmulhisi3>:
    70e8:	f0 df       	rcall	.-32     	; 0x70ca <__umulhisi3>

000070ea <__usmulhisi3_tail>:
    70ea:	b7 ff       	sbrs	r27, 7

000070ec <.Loc.2>:
    70ec:	08 95       	ret

000070ee <.Loc.3>:
    70ee:	82 1b       	sub	r24, r18

000070f0 <.Loc.4>:
    70f0:	93 0b       	sbc	r25, r19

000070f2 <.Loc.5>:
    70f2:	08 95       	ret

000070f4 <__muluhisi3>:
    70f4:	ea df       	rcall	.-44     	; 0x70ca <__umulhisi3>

000070f6 <.Loc.1>:
    70f6:	a5 9f       	mul	r26, r21

000070f8 <.Loc.2>:
    70f8:	90 0d       	add	r25, r0

000070fa <.Loc.3>:
    70fa:	b4 9f       	mul	r27, r20

000070fc <.Loc.4>:
    70fc:	90 0d       	add	r25, r0

000070fe <.Loc.5>:
    70fe:	a4 9f       	mul	r26, r20

00007100 <.Loc.6>:
    7100:	80 0d       	add	r24, r0

00007102 <.Loc.7>:
    7102:	91 1d       	adc	r25, r1

00007104 <.Loc.8>:
    7104:	11 24       	eor	r1, r1

00007106 <.Loc.9>:
    7106:	08 95       	ret

00007108 <__mulshisi3>:
    7108:	b7 ff       	sbrs	r27, 7

0000710a <.Loc.1>:
    710a:	f4 cf       	rjmp	.-24     	; 0x70f4 <__muluhisi3>

0000710c <__mulohisi3>:
    710c:	f3 df       	rcall	.-26     	; 0x70f4 <__muluhisi3>

0000710e <.Loc.3>:
    710e:	82 1b       	sub	r24, r18

00007110 <.Loc.4>:
    7110:	93 0b       	sbc	r25, r19

00007112 <.Loc.5>:
    7112:	08 95       	ret

00007114 <__prologue_saves__>:
    7114:	2f 92       	push	r2

00007116 <.Loc.1>:
    7116:	3f 92       	push	r3

00007118 <.Loc.2>:
    7118:	4f 92       	push	r4

0000711a <.Loc.3>:
    711a:	5f 92       	push	r5

0000711c <.Loc.4>:
    711c:	6f 92       	push	r6

0000711e <.Loc.5>:
    711e:	7f 92       	push	r7

00007120 <.Loc.6>:
    7120:	8f 92       	push	r8

00007122 <.Loc.7>:
    7122:	9f 92       	push	r9

00007124 <.Loc.8>:
    7124:	af 92       	push	r10

00007126 <.Loc.9>:
    7126:	bf 92       	push	r11

00007128 <.Loc.10>:
    7128:	cf 92       	push	r12

0000712a <.Loc.11>:
    712a:	df 92       	push	r13

0000712c <.Loc.12>:
    712c:	ef 92       	push	r14

0000712e <.Loc.13>:
    712e:	ff 92       	push	r15

00007130 <.Loc.14>:
    7130:	0f 93       	push	r16

00007132 <.Loc.15>:
    7132:	1f 93       	push	r17

00007134 <.Loc.16>:
    7134:	cf 93       	push	r28

00007136 <.Loc.17>:
    7136:	df 93       	push	r29

00007138 <.Loc.18>:
    7138:	cd b7       	in	r28, 0x3d	; 61

0000713a <.Loc.19>:
    713a:	de b7       	in	r29, 0x3e	; 62

0000713c <.Loc.20>:
    713c:	ca 1b       	sub	r28, r26

0000713e <.Loc.21>:
    713e:	db 0b       	sbc	r29, r27

00007140 <.Loc.22>:
    7140:	0f b6       	in	r0, 0x3f	; 63

00007142 <.Loc.23>:
    7142:	f8 94       	cli

00007144 <.Loc.24>:
    7144:	de bf       	out	0x3e, r29	; 62

00007146 <.Loc.25>:
    7146:	0f be       	out	0x3f, r0	; 63

00007148 <.Loc.26>:
    7148:	cd bf       	out	0x3d, r28	; 61

0000714a <.Loc.27>:
    714a:	09 94       	ijmp

0000714c <__epilogue_restores__>:
    714c:	2a 88       	ldd	r2, Y+18	; 0x12

0000714e <.Loc.1>:
    714e:	39 88       	ldd	r3, Y+17	; 0x11

00007150 <.Loc.2>:
    7150:	48 88       	ldd	r4, Y+16	; 0x10

00007152 <.Loc.3>:
    7152:	5f 84       	ldd	r5, Y+15	; 0x0f

00007154 <.Loc.4>:
    7154:	6e 84       	ldd	r6, Y+14	; 0x0e

00007156 <.Loc.5>:
    7156:	7d 84       	ldd	r7, Y+13	; 0x0d

00007158 <.Loc.6>:
    7158:	8c 84       	ldd	r8, Y+12	; 0x0c

0000715a <.Loc.7>:
    715a:	9b 84       	ldd	r9, Y+11	; 0x0b

0000715c <.Loc.8>:
    715c:	aa 84       	ldd	r10, Y+10	; 0x0a

0000715e <.Loc.9>:
    715e:	b9 84       	ldd	r11, Y+9	; 0x09

00007160 <.Loc.10>:
    7160:	c8 84       	ldd	r12, Y+8	; 0x08

00007162 <.Loc.11>:
    7162:	df 80       	ldd	r13, Y+7	; 0x07

00007164 <.Loc.12>:
    7164:	ee 80       	ldd	r14, Y+6	; 0x06

00007166 <.Loc.13>:
    7166:	fd 80       	ldd	r15, Y+5	; 0x05

00007168 <.Loc.14>:
    7168:	0c 81       	ldd	r16, Y+4	; 0x04

0000716a <.Loc.15>:
    716a:	1b 81       	ldd	r17, Y+3	; 0x03

0000716c <.Loc.16>:
    716c:	aa 81       	ldd	r26, Y+2	; 0x02

0000716e <.Loc.17>:
    716e:	b9 81       	ldd	r27, Y+1	; 0x01

00007170 <.Loc.18>:
    7170:	ce 0f       	add	r28, r30

00007172 <.Loc.19>:
    7172:	d1 1d       	adc	r29, r1

00007174 <.Loc.20>:
    7174:	0f b6       	in	r0, 0x3f	; 63

00007176 <.Loc.21>:
    7176:	f8 94       	cli

00007178 <.Loc.22>:
    7178:	de bf       	out	0x3e, r29	; 62

0000717a <.Loc.23>:
    717a:	0f be       	out	0x3f, r0	; 63

0000717c <.Loc.24>:
    717c:	cd bf       	out	0x3d, r28	; 61

0000717e <.Loc.25>:
    717e:	ed 01       	movw	r28, r26

00007180 <.Loc.26>:
    7180:	08 95       	ret

00007182 <__ultoa_ncheck>:
    7182:	bb 27       	eor	r27, r27

00007184 <__ultoa_common>:
    7184:	fa 01       	movw	r30, r20

00007186 <.L1^B1>:
    7186:	a6 2f       	mov	r26, r22
    7188:	62 17       	cp	r22, r18
    718a:	71 05       	cpc	r23, r1
    718c:	81 05       	cpc	r24, r1
    718e:	91 05       	cpc	r25, r1
    7190:	33 0b       	sbc	r19, r19
    7192:	30 fb       	bst	r19, 0
    7194:	66 f0       	brts	.+24     	; 0x71ae <.L4^B1>
    7196:	aa 27       	eor	r26, r26

00007198 <.L2^B1>:
    7198:	66 0f       	add	r22, r22
    719a:	77 1f       	adc	r23, r23
    719c:	88 1f       	adc	r24, r24
    719e:	99 1f       	adc	r25, r25
    71a0:	aa 1f       	adc	r26, r26
    71a2:	a2 17       	cp	r26, r18
    71a4:	10 f0       	brcs	.+4      	; 0x71aa <.L3^B1>
    71a6:	a2 1b       	sub	r26, r18
    71a8:	63 95       	inc	r22

000071aa <.L3^B1>:
    71aa:	38 50       	subi	r19, 0x08	; 8
    71ac:	a9 f7       	brne	.-22     	; 0x7198 <.L2^B1>

000071ae <.L4^B1>:
    71ae:	a0 5d       	subi	r26, 0xD0	; 208
    71b0:	aa 33       	cpi	r26, 0x3A	; 58
    71b2:	08 f0       	brcs	.+2      	; 0x71b6 <.L5^B1>
    71b4:	a9 5d       	subi	r26, 0xD9	; 217

000071b6 <.L5^B1>:
    71b6:	a1 93       	st	Z+, r26
    71b8:	36 f7       	brtc	.-52     	; 0x7186 <.L1^B1>
    71ba:	b1 11       	cpse	r27, r1
    71bc:	b1 93       	st	Z+, r27
    71be:	10 82       	st	Z, r1
    71c0:	ca 01       	movw	r24, r20
    71c2:	23 c0       	rjmp	.+70     	; 0x720a <strrev>

000071c4 <utoa>:
    71c4:	45 32       	cpi	r20, 0x25	; 37
    71c6:	51 05       	cpc	r21, r1
    71c8:	18 f4       	brcc	.+6      	; 0x71d0 <.L1^B1>
    71ca:	42 30       	cpi	r20, 0x02	; 2
    71cc:	08 f0       	brcs	.+2      	; 0x71d0 <.L1^B1>
    71ce:	04 c0       	rjmp	.+8      	; 0x71d8 <__utoa_ncheck>

000071d0 <.L1^B1>:
    71d0:	fb 01       	movw	r30, r22
    71d2:	10 82       	st	Z, r1
    71d4:	cb 01       	movw	r24, r22
    71d6:	08 95       	ret

000071d8 <__utoa_ncheck>:
    71d8:	bb 27       	eor	r27, r27

000071da <__utoa_common>:
    71da:	fb 01       	movw	r30, r22
    71dc:	55 27       	eor	r21, r21

000071de <.L1^B1>:
    71de:	aa 27       	eor	r26, r26

000071e0 <.L2^B1>:
    71e0:	88 0f       	add	r24, r24
    71e2:	99 1f       	adc	r25, r25
    71e4:	aa 1f       	adc	r26, r26
    71e6:	a4 17       	cp	r26, r20
    71e8:	10 f0       	brcs	.+4      	; 0x71ee <.L3^B1>
    71ea:	a4 1b       	sub	r26, r20
    71ec:	83 95       	inc	r24

000071ee <.L3^B1>:
    71ee:	50 51       	subi	r21, 0x10	; 16
    71f0:	b9 f7       	brne	.-18     	; 0x71e0 <.L2^B1>
    71f2:	a0 5d       	subi	r26, 0xD0	; 208
    71f4:	aa 33       	cpi	r26, 0x3A	; 58
    71f6:	08 f0       	brcs	.+2      	; 0x71fa <.L4^B1>
    71f8:	a9 5d       	subi	r26, 0xD9	; 217

000071fa <.L4^B1>:
    71fa:	a1 93       	st	Z+, r26
    71fc:	00 97       	sbiw	r24, 0x00	; 0
    71fe:	79 f7       	brne	.-34     	; 0x71de <.L1^B1>
    7200:	b1 11       	cpse	r27, r1
    7202:	b1 93       	st	Z+, r27
    7204:	11 92       	st	Z+, r1
    7206:	cb 01       	movw	r24, r22
    7208:	00 c0       	rjmp	.+0      	; 0x720a <strrev>

0000720a <strrev>:
    720a:	dc 01       	movw	r26, r24
    720c:	fc 01       	movw	r30, r24

0000720e <.L1^B1>:
    720e:	67 2f       	mov	r22, r23
    7210:	71 91       	ld	r23, Z+
    7212:	77 23       	and	r23, r23
    7214:	e1 f7       	brne	.-8      	; 0x720e <.L1^B1>
    7216:	32 97       	sbiw	r30, 0x02	; 2
    7218:	04 c0       	rjmp	.+8      	; 0x7222 <.L3^B1>

0000721a <.L2^B1>:
    721a:	7c 91       	ld	r23, X
    721c:	6d 93       	st	X+, r22
    721e:	70 83       	st	Z, r23
    7220:	62 91       	ld	r22, -Z

00007222 <.L3^B1>:
    7222:	ae 17       	cp	r26, r30
    7224:	bf 07       	cpc	r27, r31
    7226:	c8 f3       	brcs	.-14     	; 0x721a <.L2^B1>
    7228:	08 95       	ret

0000722a <eeprom_read_byte>:
    722a:	f9 99       	sbic	0x1f, 1	; 31
    722c:	fe cf       	rjmp	.-4      	; 0x722a <eeprom_read_byte>
    722e:	92 bd       	out	0x22, r25	; 34
    7230:	81 bd       	out	0x21, r24	; 33
    7232:	f8 9a       	sbi	0x1f, 0	; 31
    7234:	99 27       	eor	r25, r25
    7236:	80 b5       	in	r24, 0x20	; 32
    7238:	08 95       	ret

0000723a <eeprom_read_word>:
    723a:	a8 e1       	ldi	r26, 0x18	; 24
    723c:	b0 e0       	ldi	r27, 0x00	; 0
    723e:	42 e0       	ldi	r20, 0x02	; 2
    7240:	50 e0       	ldi	r21, 0x00	; 0
    7242:	13 c0       	rjmp	.+38     	; 0x726a <eeprom_read_blraw>

00007244 <eeprom_write_byte>:
    7244:	26 2f       	mov	r18, r22

00007246 <eeprom_write_r18>:
    7246:	f9 99       	sbic	0x1f, 1	; 31
    7248:	fe cf       	rjmp	.-4      	; 0x7246 <eeprom_write_r18>
    724a:	1f ba       	out	0x1f, r1	; 31
    724c:	92 bd       	out	0x22, r25	; 34
    724e:	81 bd       	out	0x21, r24	; 33
    7250:	20 bd       	out	0x20, r18	; 32
    7252:	0f b6       	in	r0, 0x3f	; 63
    7254:	f8 94       	cli
    7256:	fa 9a       	sbi	0x1f, 2	; 31
    7258:	f9 9a       	sbi	0x1f, 1	; 31
    725a:	0f be       	out	0x3f, r0	; 63
    725c:	01 96       	adiw	r24, 0x01	; 1
    725e:	08 95       	ret

00007260 <eeprom_write_word>:
    7260:	f1 df       	rcall	.-30     	; 0x7244 <eeprom_write_byte>
    7262:	27 2f       	mov	r18, r23
    7264:	f0 cf       	rjmp	.-32     	; 0x7246 <eeprom_write_r18>

00007266 <eeprom_read_block>:
    7266:	dc 01       	movw	r26, r24
    7268:	cb 01       	movw	r24, r22

0000726a <eeprom_read_blraw>:
    726a:	fc 01       	movw	r30, r24

0000726c <.L1^B1>:
    726c:	f9 99       	sbic	0x1f, 1	; 31
    726e:	fe cf       	rjmp	.-4      	; 0x726c <.L1^B1>
    7270:	06 c0       	rjmp	.+12     	; 0x727e <.L3^B1>

00007272 <.L2^B1>:
    7272:	f2 bd       	out	0x22, r31	; 34
    7274:	e1 bd       	out	0x21, r30	; 33
    7276:	f8 9a       	sbi	0x1f, 0	; 31
    7278:	31 96       	adiw	r30, 0x01	; 1
    727a:	00 b4       	in	r0, 0x20	; 32
    727c:	0d 92       	st	X+, r0

0000727e <.L3^B1>:
    727e:	41 50       	subi	r20, 0x01	; 1
    7280:	50 40       	sbci	r21, 0x00	; 0
    7282:	b8 f7       	brcc	.-18     	; 0x7272 <.L2^B1>
    7284:	08 95       	ret

00007286 <_exit>:
    7286:	f8 94       	cli

00007288 <__stop_program>:
    7288:	ff cf       	rjmp	.-2      	; 0x7288 <__stop_program>
